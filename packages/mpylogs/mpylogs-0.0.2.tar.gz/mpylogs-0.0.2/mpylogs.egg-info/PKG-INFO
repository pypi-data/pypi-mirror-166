Metadata-Version: 2.1
Name: mpylogs
Version: 0.0.2
Summary: Python library for logging with colors and http status code.
Home-page: https://github.com/jeniferss/_logging
License: MIT
Keywords: logs logging logger
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.10
Requires-Python: >=3.10
Description-Content-Type: text/markdown

# **mPyLogs**

## Install
___
```bash
$ pip install mpylogs
```

## Configure
___

```python
# main.py

from mpylogs.functions import PyLogger

logger = PyLogger(appname="myapp") 
logger.http(message="Uma mensagem http qualquer", status_code=200, data={"name": "Um nome qualquer", "age": 22})
```

> 2022-09-02 14:05:59 | [HTTP   ] | Uma mensagem http qualquer | [STATUSCODE 200] | {'name': 'Um nome qualquer', 'age': 22}


## Log Types
___

| Tipo      | Description                                                        |
|-----------|--------------------------------------------------------------------|
| `error`   | Informar sobre exceÃ§Ãµes tratadas no cÃ³digo                         |
| `warning` | Informar eventos ou estados potencialmente prejudicias ao programa |
| `debug`   | Acompanhar eventos ou estados do programa                          |
| `info`    | Descrever informaÃ§Ãµes detalhadas sobre o estado do programa              |
| `http`    | Informar dados de requests e responses feitas via http             |


## Middlewares
___

### django
```python
# httpLogger.py

from mpylogs.functions import PyLogger
from django.utils.deprecation import MiddlewareMixin


class HTTPLoggerMiddleware(MiddlewareMixin):

    def process_response(self, request, response):
        logger = PyLogger(appname="myDjangoApp")
        logger.http(f'{request.META.get("REMOTE_ADDR")} {request.method} {request.META.get("PATH_INFO")}', {"status": response.status_code})

        return response

```

```python
# setting.py

MIDDLEWARE = [
    ...,
    'app.utils.httpLogger.HTTPLoggerMiddleware' # path to your middleware file
]

```

### Flask

```python

# Your app setup file
from flask import Flask, request, Response
from mpylogs.functions import PyLogger

app = Flask(__name__)
logger = PyLogger(appname="MyFlaskApp")

@app.after_request
def log_response(response: Response):
    logger.http(f'{request.remote_addr} {request.method} {request.path}', {
                "status": response.status_code})
    return response

```
