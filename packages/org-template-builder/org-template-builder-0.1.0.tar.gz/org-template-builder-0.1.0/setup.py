# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['orgtemp']

package_data = \
{'': ['*']}

install_requires = \
['requests==2.28.1']

setup_kwargs = {
    'name': 'org-template-builder',
    'version': '0.1.0',
    'description': 'Python Org-Mode Template Builder.',
    'long_description': '# Org-template-builder\n\n```shell\npip install org-template-builder\n```\n\n```shell\npython -m orgtemp myprojectname --author myname\n```\n\nThe `orgtemp` process will raise an exception if the directory is not empty. It won&rsquo;t exit if it contains dotfiles, like `.git` or `.projectile`. This means that the best way to use it is the following.\n\n```shell\nmkdir myprojectname && cd myprojectname && python -m orgtemp myprojectname\n```\n\n    \n\nThis behaviour is to protect (in case of user mistake) overwriting existing configurations from other org-template-builder projects, individual checking/versioning/uninstalling has not been implemented.\n\nThe template will attempt to initialize a git repo with the `subprocess` module and add submodules to it but it won&rsquo;t make any commits. It will attempt to create and checkout a branch named `main`, to avoid using the default `master` name.\n\n\n# Template Builder Arguments\n\n\n## Project Name\n\nWhenever `org-template-builder` installs all the parts, it will use whatever `=--project=` name was given to it to modify the default of a few files:\n\n1.  The first `.org` file&rsquo;s name.\n2.  The title and first header of the same file.\n3.  The `PROJECT_NAME` variable in the `Makefile`.\n4.  All references to `PROJECT_NAME` files in the `Makefile`.\n\nHowever, when copying the &ldquo;project named&rdquo; `.md` file to the root directory, `Makefile` will rename it to `README.md`.\n\nIf no project name is given, it will be set to readme.\n\n\n## Author Name\n\nThe author name argument is optional, defaults to `""` and it is only added to the header of the `.org` file with the name of the project.\n\n\n# Introduction\n\nThis is an org-mode template for literate programming. The HTML theme is a fork of <https://github.com/fniessen/org-html-themes>.\n\nThe Makefile options are:\n\n1.  `make update` will go over all submodules and pull any changes.\n2.  `make` should call `tangle.el` and `publish.el` without `force`, which renders all the HTML and Markdown and copies all the static files to `public`.\n3.  `make clean` should remove all directories in `public` before running a `force` version of `publish`.\n4.  `make commit` should run `publish` (non-forced) and then add and commit with automated timestamp.\n\n```shell\nmake update\n```\n\n```shell\nmake\n```\n\n```shell\nmake clean\n```\n\n    ..\n    ├── config\n    ├── docs\n    ├── public\n    │\xa0\xa0 ├── build\n    │\xa0\xa0 └── resources\n    │\xa0\xa0     ├── images\n    │\xa0\xa0     ├── installer\n    │\xa0\xa0     │\xa0\xa0 └── config\n    │\xa0\xa0     └── theme\n    │\xa0\xa0         ├── css\n    │\xa0\xa0         ├── js\n    │\xa0\xa0         └── lib\n    │\xa0\xa0             └── js\n    ├── resources\n    │\xa0\xa0 ├── data\n    │\xa0\xa0 ├── images\n    │\xa0\xa0 └── theme\n    │\xa0\xa0     ├── css\n    │\xa0\xa0     ├── js\n    │\xa0\xa0     └── lib\n    │\xa0\xa0         └── js\n    ├── src\n    └── tests\n    \n    23 directories\n\n1.  Public: HTML directory for web.\n    -   Resources: Copies of all files from root/resources specified on publish.el.\n    -   Build: This is the equivalent of the `src` directory but for the HTML renders.\n2.  Resources: All static files, plus the `theme` submodule from `org-theme` repository.\n3.  Docs: The equivalent of `src` but for Markdown renders.\n4.  Src: Where all org and tangled code files live.\n5.  Tests: Reserved for writing tests with our without org files.\n\nAll files in `resources` that match the types specified in `publish.el` will be copied to `/public/resources`.\n\nHaving the `src` and `build` folders at the same tree level helps when accessing the equivalent `resources` folder from either directory.\n\n![img](../resources/images/emacs.png "Emacs logo")\n\n\n# Code Examples\n\n\n## Shell Example\n\nShell source blocks don&rsquo;t tangle as they are normally one liners. This particular line just sets the local Python environment via `pyenv`, I don&rsquo;t need a `venv` for this demo.\n\nWe must make sure that `:dir` is set to the parent directory `..`.\n\n```shell\npyenv local 3.7.13 && cat .python-version\n```\n\n    3.7.13\n\nNow let&rsquo;s install a Python library with `pip`. Once ran, we are setting this block to `:eval no`.\n\nThis is where we would use `poetry` or activate or `venv`.\n\n```shell\npip install tabulate && pip list | grep tabulate\n```\n\n\n## SQL Example\n\nThis is an SQL query for the database specified in the `org-header.config` file, which is the pagila sample database. For changing the sql info it&rsquo;s always better to override the `header-args` in the current document while using the original configuration as reference.\n\n```sql\nSELECT\n\tCONCAT(customer.last_name, \', \', customer.first_name) AS customer,\n\taddress.phone,\n\tfilm.title\nFROM\n\trental\n\tINNER JOIN customer ON rental.customer_id = customer.customer_id\n\tINNER JOIN address ON customer.address_id = address.address_id\n\tINNER JOIN inventory ON rental.inventory_id = inventory.inventory_id\n\tINNER JOIN film ON inventory.film_id = film.film_id\nWHERE\n\trental.return_date IS NULL\n\tAND rental_date < CURRENT_DATE\nORDER BY\n\ttitle\nLIMIT 5;\n```\n\n    customer\tphone\ttitle\n    OLVERA, DWAYNE\t62127829280\tACADEMY DINOSAUR\n    HUEY, BRANDON\t99883471275\tACE GOLDFINGER\n    OWENS, CARMEN\t272234298332\tAFFAIR PREJUDICE\n    HANNON, SETH\t864392582257\tAFRICAN EGG\n    COLE, TRACY\t371490777743\tALI FOREVER\n\n\n## Elisp Example\n\nElisp blocks do not tangle by default either as they are mostly functions to evaluate on-the-go while using emacs.\n\n```elisp\n(run-python)\n```\n\n```elisp\n(emacs-version)\n```\n\n    GNU Emacs 28.1 (build 1, x86_64-apple-darwin18.7.0, NS appkit-1671.60 Version 10.14.6 (Build 18G95))\n     of 2022-05-11\n\n\n## Python Example\n\nPython uses a session, as specified in the `../config/org-header.config`, so there must be a `(run-python)` session running.\n\n```python\nprint("TODO: finish this part.")\n```\n\n    TODO: finish this part.\n\n\n# Admonitions\n\nSupport for HTML export admonitions. Four colors for a few options.\n\n<div class="note" id="orgf1b6be7">\n<p>\nThis is a note.\n</p>\n\n</div>\n\n<div class="hint" id="org6d50e2c">\n<p>\nThis is a hint.\n</p>\n\n</div>\n\n<div class="caution" id="org82d220f">\n<p>\nThis is a caution.\n</p>\n\n</div>\n\n<div class="warning" id="orgc6e0981">\n<p>\nThis is a warning.\n</p>\n\n</div>\n',
    'author': 'AlbertoV5',
    'author_email': '58243333+AlbertoV5@users.noreply.github.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
