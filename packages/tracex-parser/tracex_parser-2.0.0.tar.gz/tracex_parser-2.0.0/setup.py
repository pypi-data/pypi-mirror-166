# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['tracex_parser']

package_data = \
{'': ['*']}

setup_kwargs = {
    'name': 'tracex-parser',
    'version': '2.0.0',
    'description': "Parser for ThreadX RTOS's trace buffers (aka TraceX)",
    'long_description': "# TraceX Parser\nThis python package parses ThreadX trace buffers into both human and machine-readable formats.\nMore documentation about ThreadX trace buffers can be found [here](https://docs.microsoft.com/en-us/azure/rtos/tracex/chapter5).\n\n## Install\n`pip3 install tracex-parser`\n\n## Example trace buffers\nIn the repository source there are a couple example TraceX traces which can be used to verify that things are working correctly.\n### As a python module\n```pycon\n>>> from tracex_parser.file_parser import parse_tracex_buffer\n>>> events, obj_map = parse_tracex_buffer('./demo_threadx.trx')\n>>> events\n[4265846278:thread 7 threadResume(thread_ptr=thread 6,prev_state=0xd,stack_ptr=0x12980,next_thread=), 4265846441:thread 7 mtxPut(obj_id=mutex 0,owning_thread=0x6adc,own_cnt=0x1,stack_ptr=0x129a0), 4265846566:thread 7 mtxPut(obj_id=mutex 0,owning_thread=0x6adc,own_cnt=0x2,stack_ptr=0x129a0)]\n>>> obj_map[0xeea4]\n{'obj_reg_entry_obj_available **': '0x0', 'obj_reg_entry_obj_type **': '0x1', 'thread_reg_entry_obj_ptr': '0xeea4', 'obj_reg_entry_obj_parameter_1': '0xef4c', 'obj_reg_entry_obj_parameter_2': '0x3fc', 'thread_reg_entry_obj_name': b'System Timer Thread'}\n```\n\n### As a command line utility\nThe `file_parser` module can also be run as a script, which will provide simple statistics on the trace as well as dumping all the events in the trace:\n```console\n$ python3 -m tracex_parser.file_parser -vvv ./demo_threadx.trx\nParsing ./demo_threadx.trx\ntotal events: 974\nobject registry size: 16\ndelta ticks: 156206\nEvent Histogram:\nqueueSend           493\nqueueReceive        428\nthreadResume        19\nthreadSuspend       16\nmtxPut              4\nisrExit             3\nisrEnter            3\nsemGet              2\nsemPut              2\nthreadSleep         2\nmtxGet              2\nAll events:\n4265846278:thread 7 threadResume(thread_ptr=thread 6,prev_state=0xd,stack_ptr=0x12980,next_thread=)\n4265846441:thread 7 mtxPut(obj_id=mutex 0,owning_thread=0x6adc,own_cnt=0x1,stack_ptr=0x129a0)\n4265846566:thread 7 mtxPut(obj_id=mutex 0,owning_thread=0x6adc,own_cnt=0x2,stack_ptr=0x129a0)\n4265846825:thread 4 threadSuspend(thread_ptr=thread 4,new_state=0x6,stack_ptr=0x11d70,next_thread=thread 7)\n4265846953:thread 4 semGet(obj_id=semaphore 0,timeout=WaitForever,cur_cnt=0x0,stack_ptr=0x11d98)\n...\n```\n\n## Details\nThe main interface to this module is through the `parse_tracex_buffer()` function in the `file_parser` module.\n\n### Custom User Event Parsing\nThis module also allows you to specify the format of user events such that they can automatically be parsed from their raw form.\n\n#### Create the event with `events.tracex_event_factory()`\nArguments:\n- `class_name`: A unique name to represent the event (internally it is the name of the returned class)\n- `fn_name`: A nice name that will be shown in the trace output\n- `arg_map`: A list of exactly 4 argument names to apply to the event.\n  - Names prefixed with an underscore (`_`) will not be shown by default\n  - See [events.CommonArg](#events.CommonArg) for special handling of arguments\n- `class_name_is_fn_name`: If `True` you do not have to specify a `fn_name` and the `class_name` will be used instead\n\n##### `events.CommonArg`\nSome attributes under this class have special meaning to the parsing logic:\n- `events.CommonArg.timeout`: Will replace the raw number with:\n  - `0`&#8594;`'NoWait`\n  - `0xFFFFFFFF`&#8594;`'WaitForever`\n- `events.CommonArg.obj_id`: Will look in the object registry for an object with the same memory address and replace the raw number with that object's name\n- `events.CommonArg.thread_ptr`: Same as `events.CommonArg.obj_id`, but for thread names\n- `events.CommonArg.next_thread`: Same as `events.CommonArg.thread_ptr`\n\n#### Use custom events with `parse_tracex_buffer()`\nOnce the custom event is created with `events.tracex_event_factory()` you need to assign it to an event id.\nThis is done by creating a dictionary with the key corresponding to the event id and the value being the custom event.\nThen that dictionary is passed to the `custom_events_map` parameter of `parse_tracex_buffer()`\n\n#### Example\nIn this example we are going to parse event #5000, which I have compiled into my TraceX application using `tx_trace_user_event_insert()`.\nI've passed following arguments to event #5000:\n1. Line number\n2. Address of a semaphore object\n3. File descriptor number\n4. Always 0\n\nIn the C code it looks like the following:\n```C\ntx_trace_user_event_insert(5000, __LINE__, (TX_SEMAPHORE *) semPtr, fd, 0);\n```\nNow parsing it with the `tracex_parser` module:\n```python\nfrom tracex_parser.file_parser import parse_tracex_buffer\nfrom tracex_parser.events import tracex_event_factory, CommonArg\n\ncustomEvent = tracex_event_factory('SomeCustomEvent', 'custEvent', ['line_num', CommonArg.obj_id, 'fd', '_4'])\ncustom_events = {\n    5000: customEvent,\n}\nevents, obj_map = parse_tracex_buffer('./demo_threadx.trx', custom_events_map=custom_events)\n```\n\nThe parsed event is now shown as:\n```\n7821:myThread custEvent(line_num=1234,obj_id=fdSem,fd=5)\n```\n\nWithout the custom event it would be shown as:\n```\n7821:myThread <TX ID#5000>(arg1=0x4d2,arg2=0x82070000,arg3=0x5,arg4=0x0)\n```\n",
    'author': 'Julianne Swinoga',
    'author_email': 'julianneswinoga@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': None,
    'packages': packages,
    'package_data': package_data,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
