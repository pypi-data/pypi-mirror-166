# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _light
else:
    import _light

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Light(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _light.Light_swiginit(self, _light.new_Light(*args))
    __swig_destroy__ = _light.delete_Light

    def isValid(self) -> "bool":
        return _light.Light_isValid(self)
    TYPE_INVALID = _light.Light_TYPE_INVALID
    TYPE_AMBIENT = _light.Light_TYPE_AMBIENT
    TYPE_DIRECTIONAL = _light.Light_TYPE_DIRECTIONAL
    TYPE_POINT = _light.Light_TYPE_POINT
    TYPE_SPOT = _light.Light_TYPE_SPOT

    def getId(self) -> "cmzn_light_id":
        return _light.Light_getId(self)

    def isManaged(self) -> "bool":
        return _light.Light_isManaged(self)

    def setManaged(self, value: "bool") -> "int":
        return _light.Light_setManaged(self, value)

    def getType(self) -> "OpenCMISS::Zinc::Light::Type":
        return _light.Light_getType(self)

    def setType(self, type: "OpenCMISS::Zinc::Light::Type") -> "int":
        return _light.Light_setType(self, type)

    def getName(self) -> "char *":
        return _light.Light_getName(self)

    def setName(self, name: "char const *") -> "int":
        return _light.Light_setName(self, name)

    def getConstantAttenuation(self) -> "double":
        return _light.Light_getConstantAttenuation(self)

    def setConstantAttenuation(self, constantAttenuation: "double") -> "int":
        return _light.Light_setConstantAttenuation(self, constantAttenuation)

    def getLinearAttenuation(self) -> "double":
        return _light.Light_getLinearAttenuation(self)

    def setLinearAttenuation(self, linearAttenuation: "double") -> "int":
        return _light.Light_setLinearAttenuation(self, linearAttenuation)

    def getQuadraticAttenuation(self) -> "double":
        return _light.Light_getQuadraticAttenuation(self)

    def setQuadraticAttenuation(self, quadraticAttenuation: "double") -> "int":
        return _light.Light_setQuadraticAttenuation(self, quadraticAttenuation)

    def getColourRGB(self) -> "int":
        return _light.Light_getColourRGB(self)

    def setColourRGB(self, valuesIn3: "double const *") -> "int":
        return _light.Light_setColourRGB(self, valuesIn3)

    def getDirection(self) -> "int":
        return _light.Light_getDirection(self)

    def setDirection(self, valuesIn3: "double const *") -> "int":
        return _light.Light_setDirection(self, valuesIn3)

    def getPosition(self) -> "int":
        return _light.Light_getPosition(self)

    def setPosition(self, valuesIn3: "double const *") -> "int":
        return _light.Light_setPosition(self, valuesIn3)

    def getSpotCutoff(self) -> "double":
        return _light.Light_getSpotCutoff(self)

    def setSpotCutoff(self, cutoff: "double") -> "int":
        return _light.Light_setSpotCutoff(self, cutoff)

    def getSpotExponent(self) -> "double":
        return _light.Light_getSpotExponent(self)

    def setSpotExponent(self, exponent: "double") -> "int":
        return _light.Light_setSpotExponent(self, exponent)

    def __eq__(self, other: "Light") -> "bool":
        return _light.Light___eq__(self, other)

# Register Light in _light:
_light.Light_swigregister(Light)


def __eq__(a: "Light", b: "Light") -> "bool":
    return _light.__eq__(a, b)
class Lightiterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _light.Lightiterator_swiginit(self, _light.new_Lightiterator(*args))
    __swig_destroy__ = _light.delete_Lightiterator

    def isValid(self) -> "bool":
        return _light.Lightiterator_isValid(self)

    def next(self) -> "OpenCMISS::Zinc::Light":
        return _light.Lightiterator_next(self)

# Register Lightiterator in _light:
_light.Lightiterator_swigregister(Lightiterator)

class Lightmodule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _light.Lightmodule_swiginit(self, _light.new_Lightmodule(*args))
    __swig_destroy__ = _light.delete_Lightmodule

    def isValid(self) -> "bool":
        return _light.Lightmodule_isValid(self)

    def getId(self) -> "cmzn_lightmodule_id":
        return _light.Lightmodule_getId(self)

    def createLight(self) -> "OpenCMISS::Zinc::Light":
        return _light.Lightmodule_createLight(self)

    def createLightiterator(self) -> "OpenCMISS::Zinc::Lightiterator":
        return _light.Lightmodule_createLightiterator(self)

    def findLightByName(self, name: "char const *") -> "OpenCMISS::Zinc::Light":
        return _light.Lightmodule_findLightByName(self, name)

    def beginChange(self) -> "int":
        return _light.Lightmodule_beginChange(self)

    def endChange(self) -> "int":
        return _light.Lightmodule_endChange(self)

    def getDefaultLight(self) -> "OpenCMISS::Zinc::Light":
        return _light.Lightmodule_getDefaultLight(self)

    def setDefaultLight(self, light: "Light") -> "int":
        return _light.Lightmodule_setDefaultLight(self, light)

    def getDefaultAmbientLight(self) -> "OpenCMISS::Zinc::Light":
        return _light.Lightmodule_getDefaultAmbientLight(self)

    def setDefaultAmbientLight(self, light: "Light") -> "int":
        return _light.Lightmodule_setDefaultAmbientLight(self, light)

# Register Lightmodule in _light:
_light.Lightmodule_swigregister(Lightmodule)



