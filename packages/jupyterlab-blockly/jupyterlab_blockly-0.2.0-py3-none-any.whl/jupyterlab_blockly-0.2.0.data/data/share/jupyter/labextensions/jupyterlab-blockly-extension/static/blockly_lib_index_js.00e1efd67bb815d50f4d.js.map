{"version":3,"file":"blockly_lib_index_js.00e1efd67bb815d50f4d.js","mappings":";;;;;;;;;;;;;;;;;;AAA2D;AACJ;AACV;AACF;AAC3C;AACA;AACA;AACO,mCAAmC,qEAAgB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,sDAAe;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oDAAc;AAC1C,4BAA4B,iDAAY;AACxC,mBAAmB,kDAAa,GAAG,2BAA2B;AAC9D;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjC0B;AACD;AACC;AACC;AACH;AACA;AACC;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACN+B;AACI;AACM;AAChB;AACP;AACR;AACH;AAChC;AACA;AACA;AACO,4BAA4B,wDAAW;AAC9C;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU,uEAA0B,2BAA2B;AAC/E;AACA;AACA;AACA;AACA,yBAAyB,mDAAM;AAC/B;AACA;AACA,yBAAyB,uDAAQ;AACjC,uBAAuB,4DAAa,GAAG;AACvC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAqC;AACpD;AACA;AACA,4CAA4C,gBAAgB;AAC5D;AACA;AACA,QAAQ,kEAAqC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4DAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,2CAAc;AAC9B;AACA;AACA,+BAA+B,2CAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sEAAgB;AAC5B;AACA;AACA;AACA;AACA,YAAY,+DAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,2CAAc;AACxC;AACA,mBAAmB,yCAAK;AACxB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,QAAQ,8CAAiB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACtL2C;AAC3C;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qDAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0BAA0B;AAClD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,MAAM;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wDAAwD;AACpF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACnImC;AACI;AACI;AACN;AACL;AACE;AAClC;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,uCAAuC,2CAAO;AAC9C;AACA,uCAAuC,uDAAS;AAChD,2CAA2C,2DAAS;AACpD,oCAAoC,oDAAU;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAiC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wJAAwB;AACjD;AACA;AACA,yBAAyB,uMAAwB;AACjD;AACA;AACA,yBAAyB,uMAAwB;AACjD;AACA,yBAAyB,CAAI;AAC7B,yBAAyB,uMAAwB;AACjD;AACA;AACA,yBAAyB,uMAAwB;AACjD;AACA;AACA,yBAAyB,uMAAwB;AACjD;AACA;AACA,yBAAyB,uMAAwB;AACjD;AACA;AACA,yBAAyB,uMAAwB;AACjD;AACA;AACA,yBAAyB,uMAAwB;AACjD;AACA;AACA,yBAAyB,uMAAwB;AACjD;AACA;AACA,yBAAyB,uMAAwB;AACjD;AACA;AACA,yBAAyB,uMAAwB;AACjD;AACA;AACA,yBAAyB,uMAAwB;AACjD;AACA;AACA,yBAAyB,uMAAwB;AACjD;AACA;AACA,yBAAyB,uMAAwB;AACjD;AACA;AACA,yBAAyB,uMAAwB;AACjD;AACA;AACA,yBAAyB,uMAAwB;AACjD;AACA;AACA,yBAAyB,uMAAwB;AACjD;AACA;AACA,yBAAyB,uMAAwB;AACjD;AACA;AACA,yBAAyB,uMAAwB;AACjD;AACA;AACA,yBAAyB,uMAAwB;AACjD;AACA;AACA,yBAAyB,uMAAwB;AACjD;AACA;AACA,yBAAyB,uMAAwB;AACjD;AACA;AACA,yBAAyB,uMAAwB;AACjD;AACA;AACA,yBAAyB,uMAAwB;AACjD;AACA;AACA,yBAAyB,uMAAwB;AACjD;AACA;AACA,yBAAyB,uMAAwB;AACjD;AACA;AACA,yBAAyB,sNAA6B;AACtD;AACA;AACA,yBAAyB,sNAA6B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,uDAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8CAAiB;AAC7B,SAAS;AACT;AACA;AACA,CAAC,0BAA0B;;;;;;;;;;;;;;;;;ACzLe;AAC1C;AACA;AACA;AACO,6BAA6B,oDAAK;;;;;;;;;;;;;;;;;;;;ACJc;AAC7B;AACc;AACjC,8BAA8B,iDAAa;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wCAAwC;AACnE;AACA,gBAAgB,0DAAmB,CAAC,iEAAU,IAAI,4EAA4E;AAC9H;AACA;;;;;;;;;;;;;;;;;;;;ACxBuD;AAC7B;AACc;AACjC,4BAA4B,iDAAa;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAmB,CAAC,iEAAU,IAAI,wGAAwG;AAC1J;AACA;;;;;;;;;;;;;;;;;;;;ACpBqD;AACZ;AAClC,4BAA4B,+DAAa;AAChD;AACA;AACA;AACA;AACA;AACO,qBAAqB,mDAAM;AAClC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACbmC;AACnC;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,sDAAyB;AAClD,UAAU,mDAAsB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACM;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClVkD;AACL;AACP;AACF;AACF;AACyC;AAClF;AACA;AACA;AACO,4BAA4B,mEAAc;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mDAAa;AACxC;AACA,kBAAkB,8DAAO;AACzB;AACA;AACA;AACA,SAAS;AACT;AACA,2CAA2C,4CAAM;AACjD,4CAA4C,mDAAa;AACzD;AACA;AACA;AACA,SAAS;AACT,8CAA8C,qDAAe;AAC7D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,2BAA2B,uDAAU;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kDAAa;AACrC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://jupyterlab-blockly-extension/../blockly/lib/factory.js","webpack://jupyterlab-blockly-extension/../blockly/lib/index.js","webpack://jupyterlab-blockly-extension/../blockly/lib/layout.js","webpack://jupyterlab-blockly-extension/../blockly/lib/manager.js","webpack://jupyterlab-blockly-extension/../blockly/lib/registry.js","webpack://jupyterlab-blockly-extension/../blockly/lib/token.js","webpack://jupyterlab-blockly-extension/../blockly/lib/toolbar/generator.js","webpack://jupyterlab-blockly-extension/../blockly/lib/toolbar/toolbox.js","webpack://jupyterlab-blockly-extension/../blockly/lib/toolbar/utils.js","webpack://jupyterlab-blockly-extension/../blockly/lib/utils.js","webpack://jupyterlab-blockly-extension/../blockly/lib/widget.js"],"sourcesContent":["import { ABCWidgetFactory } from '@jupyterlab/docregistry';\nimport { BlocklyEditor, BlocklyPanel } from './widget';\nimport { BlocklyRegistry } from './registry';\nimport { BlocklyManager } from './manager';\n/**\n * A widget factory to create new instances of BlocklyEditor.\n */\nexport class BlocklyEditorFactory extends ABCWidgetFactory {\n    /**\n     * Constructor of BlocklyEditorFactory.\n     *\n     * @param options Constructor options\n     */\n    constructor(options) {\n        super(options);\n        this._registry = new BlocklyRegistry();\n        this._rendermime = options.rendermime;\n        this._mimetypeService = options.mimetypeService;\n    }\n    get registry() {\n        return this._registry;\n    }\n    /**\n     * Create a new widget given a context.\n     *\n     * @param context Contains the information of the file\n     * @returns The widget\n     */\n    createNewWidget(context) {\n        const manager = new BlocklyManager(this._registry, context.sessionContext, this._mimetypeService);\n        const content = new BlocklyPanel(context, manager, this._rendermime);\n        return new BlocklyEditor({ context, content, manager });\n    }\n}\n","export * from './factory';\nexport * from './layout';\nexport * from './manager';\nexport * from './registry';\nexport * from './token';\nexport * from './utils';\nexport * from './widget';\n","import { showErrorMessage } from '@jupyterlab/apputils';\nimport { CodeCell, CodeCellModel } from '@jupyterlab/cells';\nimport { SplitLayout, SplitPanel, Widget } from '@lumino/widgets';\nimport { ArrayIterator } from '@lumino/algorithm';\nimport { Signal } from '@lumino/signaling';\nimport * as Blockly from 'blockly';\nimport { THEME } from './utils';\n/**\n * A blockly layout to host the Blockly editor.\n */\nexport class BlocklyLayout extends SplitLayout {\n    /**\n     * Construct a `BlocklyLayout`.\n     *\n     */\n    constructor(manager, sessionContext, rendermime) {\n        super({ renderer: SplitPanel.defaultRenderer, orientation: 'vertical' });\n        this._manager = manager;\n        this._sessionContext = sessionContext;\n        // Creating the container for the Blockly editor\n        // and the output area to render the execution replies.\n        this._host = new Widget();\n        // Creating a CodeCell widget to render the code and\n        // outputs from the execution reply.\n        this._cell = new CodeCell({\n            model: new CodeCellModel({}),\n            rendermime\n        });\n        // Trust the outputs and set the mimeType for the code\n        this._cell.readOnly = true;\n        this._cell.model.trusted = true;\n        this._cell.model.mimeType = this._manager.mimeType;\n        this._manager.changed.connect(this._onManagerChanged, this);\n    }\n    get workspace() {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        return Blockly.serialization.workspaces.save(this._workspace);\n    }\n    set workspace(workspace) {\n        const data = workspace === null ? { variables: [] } : workspace;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        Blockly.serialization.workspaces.load(data, this._workspace);\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        this._manager.changed.disconnect(this._resizeWorkspace, this);\n        Signal.clearData(this);\n        this._workspace.dispose();\n        super.dispose();\n    }\n    /**\n     * Init the blockly layout\n     */\n    init() {\n        super.init();\n        // Add the blockly container into the DOM\n        this.addWidget(this._host);\n        this.addWidget(this._cell);\n    }\n    /**\n     * Create an iterator over the widgets in the layout.\n     */\n    iter() {\n        return new ArrayIterator([]);\n    }\n    /**\n     * Remove a widget from the layout.\n     *\n     * @param widget - The `widget` to remove.\n     */\n    removeWidget(widget) {\n        return;\n    }\n    /**\n     * Return the extra coded (if it exists), composed of the individual\n     * data from each block in the workspace, which are defined in the\n     * toplevel_init property. (e.g. : imports needed for the block)\n     *\n     * Add extra code example:\n     * Blockly.Blocks['block_name'].toplevel_init = `import numpy`\n     */\n    getBlocksToplevelInit() {\n        // Initalize string which will return the extra code provided\n        // by the blocks, in the toplevel_init property.\n        let finalToplevelInit = '';\n        // Get all the blocks in the workspace in order.\n        const ordered = true;\n        const used_blocks = this._workspace.getAllBlocks(ordered);\n        // For each block in the workspace, check if theres is a toplevel_init,\n        // if there is, add it to the final string.\n        for (const block in used_blocks) {\n            const current_block = used_blocks[block].type;\n            if (Blockly.Blocks[current_block].toplevel_init) {\n                // console.log(Blockly.Blocks[current_block].toplevel_init);\n                // Attach it to the final string\n                const string = Blockly.Blocks[current_block].toplevel_init;\n                finalToplevelInit = finalToplevelInit + string;\n            }\n        }\n        // console.log(finalToplevelInit);\n        return finalToplevelInit;\n    }\n    run() {\n        // Get extra code from the blocks in the workspace.\n        const extra_init = this.getBlocksToplevelInit();\n        // Serializing our workspace into the chosen language generator.\n        const code = extra_init + this._manager.generator.workspaceToCode(this._workspace);\n        this._cell.model.sharedModel.setSource(code);\n        // Execute the code using the kernel, by using a static method from the\n        // same class to make an execution request.\n        if (this._sessionContext.hasNoKernel) {\n            // Check whether there is a kernel\n            showErrorMessage('Select a valid kernel', `There is not a valid kernel selected, select one from the dropdown menu in the toolbar.\n        If there isn't a valid kernel please install 'xeus-python' from Pypi.org or using mamba.\n        `);\n        }\n        else {\n            CodeCell.execute(this._cell, this._sessionContext)\n                .then(() => this._resizeWorkspace())\n                .catch(e => console.error(e));\n        }\n    }\n    /**\n     * Handle `update-request` messages sent to the widget.\n     */\n    onUpdateRequest(msg) {\n        super.onUpdateRequest(msg);\n        this._resizeWorkspace();\n    }\n    /**\n     * Handle `resize-request` messages sent to the widget.\n     */\n    onResize(msg) {\n        super.onResize(msg);\n        this._resizeWorkspace();\n    }\n    /**\n     * Handle `fit-request` messages sent to the widget.\n     */\n    onFitRequest(msg) {\n        super.onFitRequest(msg);\n        this._resizeWorkspace();\n    }\n    /**\n     * Handle `after-attach` messages sent to the widget.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        //inject Blockly with appropiate JupyterLab theme.\n        this._workspace = Blockly.inject(this._host.node, {\n            toolbox: this._manager.toolbox,\n            theme: THEME\n        });\n        this._workspace.addChangeListener(() => {\n            // Get extra code from the blocks in the workspace.\n            const extra_init = this.getBlocksToplevelInit();\n            // Serializing our workspace into the chosen language generator.\n            const code = extra_init + this._manager.generator.workspaceToCode(this._workspace);\n            this._cell.model.sharedModel.setSource(code);\n        });\n    }\n    _resizeWorkspace() {\n        //Resize logic.\n        Blockly.svgResize(this._workspace);\n    }\n    _onManagerChanged(sender, change) {\n        if (change === 'kernel') {\n            // Get extra code from the blocks in the workspace.\n            const extra_init = this.getBlocksToplevelInit();\n            // Serializing our workspace into the chosen language generator.\n            const code = extra_init + this._manager.generator.workspaceToCode(this._workspace);\n            this._cell.model.sharedModel.setSource(code);\n            this._cell.model.mimeType = this._manager.mimeType;\n        }\n        if (change === 'toolbox') {\n            this._workspace.updateToolbox(this._manager.toolbox);\n        }\n    }\n}\n","import { Signal } from '@lumino/signaling';\n/**\n * BlocklyManager the manager for each document\n * to select the toolbox and the generator that the\n * user wants to use on a specific document.\n */\nexport class BlocklyManager {\n    /**\n     * Constructor of BlocklyManager.\n     */\n    constructor(registry, sessionContext, mimetypeService) {\n        this._registry = registry;\n        this._sessionContext = sessionContext;\n        this._mimetypeService = mimetypeService;\n        this._toolbox = 'default';\n        this._generator = this._registry.generators.get('python');\n        this._changed = new Signal(this);\n        this._sessionContext.kernelChanged.connect(this._onKernelChanged, this);\n    }\n    /**\n     * Returns the selected toolbox.\n     */\n    get toolbox() {\n        return this._registry.toolboxes.get(this._toolbox);\n    }\n    /**\n     * Returns the mimeType for the selected kernel.\n     *\n     * Note: We need the mimeType for the syntax highlighting\n     * when rendering the code.\n     */\n    get mimeType() {\n        if (this._selectedKernel) {\n            return this._mimetypeService.getMimeTypeByLanguage({\n                name: this._selectedKernel.language\n            });\n        }\n        else {\n            return 'text/plain';\n        }\n    }\n    /**\n     * Returns the name of the selected kernel.\n     */\n    get kernel() {\n        var _a;\n        return ((_a = this._selectedKernel) === null || _a === void 0 ? void 0 : _a.name) || 'No kernel';\n    }\n    /**\n     * Returns the selected generator.\n     */\n    get generator() {\n        return this._generator;\n    }\n    /**\n     * Signal triggered when the manager changes.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Dispose.\n     */\n    dispose() {\n        this._sessionContext.kernelChanged.disconnect(this._onKernelChanged, this);\n    }\n    /**\n     * Get the selected toolbox's name.\n     *\n     * @returns The name of the toolbox.\n     */\n    getToolbox() {\n        return this._toolbox;\n    }\n    /**\n     * Set the selected toolbox.\n     *\n     * @argument name The name of the toolbox.\n     */\n    setToolbox(name) {\n        if (this._toolbox !== name) {\n            const toolbox = this._registry.toolboxes.get(name);\n            this._toolbox = toolbox ? name : 'default';\n            this._changed.emit('toolbox');\n        }\n    }\n    /**\n     * List the available toolboxes.\n     *\n     * @returns the list of available toolboxes for Blockly\n     */\n    listToolboxes() {\n        const list = [];\n        this._registry.toolboxes.forEach((toolbox, name) => {\n            list.push({ label: name, value: name });\n        });\n        return list;\n    }\n    /**\n     * Set the selected kernel.\n     *\n     * @argument name The name of the kernel.\n     */\n    selectKernel(name) {\n        this._sessionContext.changeKernel({ name });\n    }\n    /**\n     * List the available kernels.\n     *\n     * @returns the list of available kernels for Blockly\n     */\n    listKernels() {\n        const specs = this._sessionContext.specsManager.specs.kernelspecs;\n        const list = [];\n        Object.keys(specs).forEach(key => {\n            const language = specs[key].language;\n            if (this._registry.generators.has(language)) {\n                list.push({ label: specs[key].display_name, value: specs[key].name });\n            }\n        });\n        return list;\n    }\n    _onKernelChanged(sender, args) {\n        const specs = this._sessionContext.specsManager.specs.kernelspecs;\n        if (args.newValue && specs[args.newValue.name] !== undefined) {\n            this._selectedKernel = specs[args.newValue.name];\n            const language = specs[args.newValue.name].language;\n            this._generator = this._registry.generators.get(language);\n            this._changed.emit('kernel');\n        }\n    }\n}\n","import * as Blockly from 'blockly';\nimport BlocklyPy from 'blockly/python';\nimport BlocklyJS from 'blockly/javascript';\nimport BlocklyLua from 'blockly/lua';\nimport En from 'blockly/msg/en';\nimport { TOOLBOX } from './utils';\n/**\n * BlocklyRegistry is the class that JupyterLab-Blockly exposes\n * to other plugins. This registry allows other plugins to register\n * new Toolboxes, Blocks and Generators that users can use in the\n * Blockly editor.\n */\nexport class BlocklyRegistry {\n    /**\n     * Constructor of BlocklyRegistry.\n     */\n    constructor() {\n        this._toolboxes = new Map();\n        this._toolboxes.set('default', TOOLBOX);\n        this._generators = new Map();\n        this._generators.set('python', BlocklyPy);\n        this._generators.set('javascript', BlocklyJS);\n        this._generators.set('lua', BlocklyLua);\n    }\n    /**\n     * Returns a map with all the toolboxes.\n     */\n    get toolboxes() {\n        return this._toolboxes;\n    }\n    /**\n     * Returns a map with all the generators.\n     */\n    get generators() {\n        return this._generators;\n    }\n    /**\n     * Register a toolbox for the editor.\n     *\n     * @argument name Name of the toolbox.\n     *\n     * @argument value Toolbox to register.\n     */\n    registerToolbox(name, value) {\n        this._toolboxes.set(name, value);\n    }\n    /**\n     * Register new blocks.\n     *\n     * @argument blocks Blocks to register.\n     */\n    registerBlocks(blocks) {\n        Blockly.defineBlocksWithJsonArray(blocks);\n    }\n    /**\n     * Register new generators.\n     *\n     * @argument name Name of the generator.\n     *\n     * @argument generator Generator to register.\n     *\n     * #### Notes\n     * When registering a generator, the name should correspond to the language\n     * used by a kernel.\n     *\n     * If you register a generator for an existing language this will be overwritten.\n     */\n    registerGenerator(name, generator) {\n        this._generators.set(name, generator);\n    }\n    setlanguage(language) {\n        Private.importLanguageModule(language);\n    }\n}\nvar Private;\n(function (Private) {\n    // Dynamically importing the language modules needed for each respective\n    // user, in order to change the Blockly language in accordance to the\n    // JL one.\n    async function importLanguageModule(language) {\n        let module;\n        switch (language) {\n            case 'En':\n                module = import('blockly/msg/en');\n                break;\n            case 'Es':\n                module = import('blockly/msg/es');\n                break;\n            case 'Fr':\n                module = import('blockly/msg/fr');\n                break;\n            case 'Sa' || 'Ar':\n                module = import('blockly/msg/ar');\n                break;\n            case 'Cz':\n                module = import('blockly/msg/cs');\n                break;\n            case 'Dk':\n                module = import('blockly/msg/da');\n                break;\n            case 'De':\n                module = import('blockly/msg/de');\n                break;\n            case 'Gr':\n                module = import('blockly/msg/el');\n                break;\n            case 'Ee':\n                module = import('blockly/msg/et');\n                break;\n            case 'Fi':\n                module = import('blockly/msg/fi');\n                break;\n            case 'Il':\n                module = import('blockly/msg/he');\n                break;\n            case 'Hu':\n                module = import('blockly/msg/hu');\n                break;\n            case 'Am':\n                module = import('blockly/msg/hy');\n                break;\n            case 'Id':\n                module = import('blockly/msg/id');\n                break;\n            case 'It':\n                module = import('blockly/msg/it');\n                break;\n            case 'Jp':\n                module = import('blockly/msg/ja');\n                break;\n            case 'Kr':\n                module = import('blockly/msg/ko');\n                break;\n            case 'Lt':\n                module = import('blockly/msg/lt');\n                break;\n            case 'Nl':\n                module = import('blockly/msg/nl');\n                break;\n            case 'Pl':\n                module = import('blockly/msg/pl');\n                break;\n            case 'Br':\n                module = import('blockly/msg/pt');\n                break;\n            case 'Ro':\n                module = import('blockly/msg/ro');\n                break;\n            case 'Ru':\n                module = import('blockly/msg/ru');\n                break;\n            case 'Lk':\n                module = import('blockly/msg/si');\n                break;\n            case 'Tr':\n                module = import('blockly/msg/tr');\n                break;\n            case 'Ua':\n                module = import('blockly/msg/uk');\n                break;\n            case 'Vn':\n                module = import('blockly/msg/vi');\n                break;\n            case 'Tw':\n                module = import('blockly/msg/zh-hant');\n                break;\n            case 'Cn':\n                module = import('blockly/msg/zh-hans');\n                break;\n            default:\n                // Complete with all the cases taken from: (last updates June 2022)\n                // List of languages in blockly: https://github.com/google/blockly/tree/master/msg/js\n                // List of languages in Lab: https://github.com/jupyterlab/language-packs/tree/master/language-packs\n                console.warn('Language not found. Loading english');\n                module = Promise.resolve(En);\n                break;\n        }\n        // Setting the current language in Blockly.\n        module.then(lang => {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            Blockly.setLocale(lang);\n        });\n    }\n    Private.importLanguageModule = importLanguageModule;\n})(Private || (Private = {}));\n","import { Token } from '@lumino/coreutils';\n/**\n * The registry token.\n */\nexport const IBlocklyRegistry = new Token('jupyterlab-blockly/registry');\n","import { HTMLSelect } from '@jupyterlab/ui-components';\nimport React from 'react';\nimport { BlocklyButton } from './utils';\nexport class SelectGenerator extends BlocklyButton {\n    constructor(props) {\n        super(props);\n        this.handleChange = (event) => {\n            this._manager.selectKernel(event.target.value);\n            this.update();\n        };\n        this._manager = props.manager;\n        this._manager.changed.connect(this.update, this);\n    }\n    dispose() {\n        super.dispose();\n        this._manager.changed.disconnect(this.update, this);\n    }\n    render() {\n        const kernels = this._manager.listKernels();\n        if (this._manager.kernel === 'No kernel') {\n            kernels.push({ label: 'No kernel', value: 'No kernel' });\n        }\n        return (React.createElement(HTMLSelect, { onChange: this.handleChange, value: this._manager.kernel, options: kernels }));\n    }\n}\n","import { HTMLSelect } from '@jupyterlab/ui-components';\nimport React from 'react';\nimport { BlocklyButton } from './utils';\nexport class SelectToolbox extends BlocklyButton {\n    constructor(props) {\n        super(props);\n        this.handleChange = (event) => {\n            this._manager.setToolbox(event.target.value);\n            this.update();\n        };\n        this._manager = props.manager;\n        this._manager.changed.connect(this.update, this);\n    }\n    dispose() {\n        super.dispose();\n        this._manager.changed.disconnect(this.update, this);\n    }\n    render() {\n        return (React.createElement(HTMLSelect, { onChange: this.handleChange, value: this._manager.getToolbox(), options: this._manager.listToolboxes() }));\n    }\n}\n","import { ToolbarButton } from '@jupyterlab/apputils';\nimport { Widget } from '@lumino/widgets';\nexport class BlocklyButton extends ToolbarButton {\n    constructor(props) {\n        super(props);\n        this.addClass('jp-blockly-button');\n    }\n}\nexport class Spacer extends Widget {\n    constructor() {\n        super();\n        this.addClass('jp-Toolbar-spacer');\n    }\n}\n","import * as Blockly from 'blockly';\n// Creating a toolbox containing all the main (default) blocks.\nexport const TOOLBOX = {\n    kind: 'categoryToolbox',\n    contents: [\n        {\n            kind: 'category',\n            name: 'Logic',\n            colour: '210',\n            contents: [\n                {\n                    kind: 'block',\n                    type: 'controls_if'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'logic_compare'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"logic_operation\"></block>',\n                    type: 'logic_operation'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"logic_negate\"></block>',\n                    type: 'logic_negate'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"logic_boolean\"></block>',\n                    type: 'logic_boolean'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"logic_null\"></block>',\n                    type: 'logic_null'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"logic_ternary\"></block>',\n                    type: 'logic_ternary'\n                }\n            ]\n        },\n        {\n            kind: 'category',\n            name: 'Loops',\n            colour: '120',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"controls_repeat_ext\">\\n          <value name=\"TIMES\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">10</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'controls_repeat_ext'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"controls_whileUntil\"></block>',\n                    type: 'controls_whileUntil'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"controls_for\">\\n          <value name=\"FROM\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">1</field>\\n            </shadow>\\n          </value>\\n          <value name=\"TO\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">10</field>\\n            </shadow>\\n          </value>\\n          <value name=\"BY\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">1</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'controls_for'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"controls_forEach\"></block>',\n                    type: 'controls_forEach'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"controls_flow_statements\"></block>',\n                    type: 'controls_flow_statements'\n                }\n            ]\n        },\n        {\n            kind: 'CATEGORY',\n            name: 'Math',\n            colour: '230',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_number\"></block>',\n                    type: 'math_number'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_arithmetic\">\\n          <value name=\"A\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">1</field>\\n            </shadow>\\n          </value>\\n          <value name=\"B\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">1</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_arithmetic'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_single\">\\n          <value name=\"NUM\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">9</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_single'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_trig\">\\n          <value name=\"NUM\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">45</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_trig'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_constant\"></block>',\n                    type: 'math_constant'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_number_property\">\\n          <value name=\"NUMBER_TO_CHECK\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">0</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_number_property'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_change\">\\n          <value name=\"DELTA\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">1</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_change'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_round\">\\n          <value name=\"NUM\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">3.1</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_round'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_on_list\"></block>',\n                    type: 'math_on_list'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_modulo\">\\n          <value name=\"DIVIDEND\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">64</field>\\n            </shadow>\\n          </value>\\n          <value name=\"DIVISOR\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">10</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_modulo'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_constrain\">\\n          <value name=\"VALUE\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">50</field>\\n            </shadow>\\n          </value>\\n          <value name=\"LOW\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">1</field>\\n            </shadow>\\n          </value>\\n          <value name=\"HIGH\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">100</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_constrain'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_random_int\">\\n          <value name=\"FROM\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">1</field>\\n            </shadow>\\n          </value>\\n          <value name=\"TO\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">100</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'math_random_int'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"math_random_float\"></block>',\n                    type: 'math_random_float'\n                }\n            ]\n        },\n        {\n            kind: 'CATEGORY',\n            name: 'Text',\n            colour: '160',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text\"></block>',\n                    type: 'text'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_join\"></block>',\n                    type: 'text_join'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_append\">\\n          <value name=\"TEXT\">\\n            <shadow type=\"text\"></shadow>\\n          </value>\\n        </block>',\n                    type: 'text_append'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_length\">\\n          <value name=\"VALUE\">\\n            <shadow type=\"text\">\\n              <field name=\"TEXT\">abc</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'text_length'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_isEmpty\">\\n          <value name=\"VALUE\">\\n            <shadow type=\"text\">\\n              <field name=\"TEXT\"></field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'text_isEmpty'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_indexOf\">\\n          <value name=\"VALUE\">\\n            <block type=\"variables_get\">\\n              <field name=\"VAR\">text</field>\\n            </block>\\n          </value>\\n          <value name=\"FIND\">\\n            <shadow type=\"text\">\\n              <field name=\"TEXT\">abc</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'text_indexOf'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_charAt\">\\n          <value name=\"VALUE\">\\n            <block type=\"variables_get\">\\n              <field name=\"VAR\">text</field>\\n            </block>\\n          </value>\\n        </block>',\n                    type: 'text_charAt'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_getSubstring\">\\n          <value name=\"STRING\">\\n            <block type=\"variables_get\">\\n              <field name=\"VAR\">text</field>\\n            </block>\\n          </value>\\n        </block>',\n                    type: 'text_getSubstring'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_changeCase\">\\n          <value name=\"TEXT\">\\n            <shadow type=\"text\">\\n              <field name=\"TEXT\">abc</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'text_changeCase'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_trim\">\\n          <value name=\"TEXT\">\\n            <shadow type=\"text\">\\n              <field name=\"TEXT\">abc</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'text_trim'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_print\">\\n          <value name=\"TEXT\">\\n            <shadow type=\"text\">\\n              <field name=\"TEXT\">abc</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'text_print'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"text_prompt_ext\">\\n          <value name=\"TEXT\">\\n            <shadow type=\"text\">\\n              <field name=\"TEXT\">abc</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'text_prompt_ext'\n                }\n            ]\n        },\n        {\n            kind: 'CATEGORY',\n            name: 'Lists',\n            colour: '260',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_create_with\">\\n          <mutation items=\"0\"></mutation>\\n        </block>',\n                    type: 'lists_create_with'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_create_with\"></block>',\n                    type: 'lists_create_with'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_repeat\">\\n          <value name=\"NUM\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">5</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'lists_repeat'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_length\"></block>',\n                    type: 'lists_length'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_isEmpty\"></block>',\n                    type: 'lists_isEmpty'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_indexOf\">\\n          <value name=\"VALUE\">\\n            <block type=\"variables_get\">\\n              <field name=\"VAR\">list</field>\\n            </block>\\n          </value>\\n        </block>',\n                    type: 'lists_indexOf'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_getIndex\">\\n          <value name=\"VALUE\">\\n            <block type=\"variables_get\">\\n              <field name=\"VAR\">list</field>\\n            </block>\\n          </value>\\n        </block>',\n                    type: 'lists_getIndex'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_setIndex\">\\n          <value name=\"LIST\">\\n            <block type=\"variables_get\">\\n              <field name=\"VAR\">list</field>\\n            </block>\\n          </value>\\n        </block>',\n                    type: 'lists_setIndex'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_getSublist\">\\n          <value name=\"LIST\">\\n            <block type=\"variables_get\">\\n              <field name=\"VAR\">list</field>\\n            </block>\\n          </value>\\n        </block>',\n                    type: 'lists_getSublist'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_split\">\\n          <value name=\"DELIM\">\\n            <shadow type=\"text\">\\n              <field name=\"TEXT\">,</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'lists_split'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"lists_sort\"></block>',\n                    type: 'lists_sort'\n                }\n            ]\n        },\n        {\n            kind: 'CATEGORY',\n            name: 'Color',\n            colour: '20',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"colour_picker\"></block>',\n                    type: 'colour_picker'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"colour_random\"></block>',\n                    type: 'colour_random'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"colour_rgb\">\\n          <value name=\"RED\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">100</field>\\n            </shadow>\\n          </value>\\n          <value name=\"GREEN\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">50</field>\\n            </shadow>\\n          </value>\\n          <value name=\"BLUE\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">0</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'colour_rgb'\n                },\n                {\n                    kind: 'BLOCK',\n                    blockxml: '<block type=\"colour_blend\">\\n          <value name=\"COLOUR1\">\\n            <shadow type=\"colour_picker\">\\n              <field name=\"COLOUR\">#ff0000</field>\\n            </shadow>\\n          </value>\\n          <value name=\"COLOUR2\">\\n            <shadow type=\"colour_picker\">\\n              <field name=\"COLOUR\">#3333ff</field>\\n            </shadow>\\n          </value>\\n          <value name=\"RATIO\">\\n            <shadow type=\"math_number\">\\n              <field name=\"NUM\">0.5</field>\\n            </shadow>\\n          </value>\\n        </block>',\n                    type: 'colour_blend'\n                }\n            ]\n        },\n        {\n            kind: 'SEP'\n        },\n        {\n            kind: 'CATEGORY',\n            colour: '330',\n            custom: 'VARIABLE',\n            name: 'Variables'\n        },\n        {\n            kind: 'CATEGORY',\n            colour: '290',\n            custom: 'PROCEDURE',\n            name: 'Functions'\n        }\n    ]\n};\n// Defining a Blockly Theme in accordance with the current JupyterLab Theme.\nconst jupyterlab_theme = Blockly.Theme.defineTheme('jupyterlab', {\n    base: Blockly.Themes.Classic,\n    componentStyles: {\n        workspaceBackgroundColour: 'var(--jp-layout-color0)',\n        toolboxBackgroundColour: 'var(--jp-layout-color2)',\n        toolboxForegroundColour: 'var(--jp-ui-font-color0)',\n        flyoutBackgroundColour: 'var(--jp-border-color2)',\n        flyoutForegroundColour: 'var(--jp-layout-color3)',\n        flyoutOpacity: 1,\n        scrollbarColour: 'var(--jp-border-color0)',\n        insertionMarkerOpacity: 0.3,\n        scrollbarOpacity: 0.4,\n        cursorColour: 'var(--jp-scrollbar-background-color)'\n    }\n});\nexport const THEME = jupyterlab_theme;\n","import { DocumentWidget } from '@jupyterlab/docregistry';\nimport { runIcon } from '@jupyterlab/ui-components';\nimport { SplitPanel } from '@lumino/widgets';\nimport { Signal } from '@lumino/signaling';\nimport { BlocklyLayout } from './layout';\nimport { BlocklyButton, SelectGenerator, SelectToolbox, Spacer } from './toolbar';\n/**\n * DocumentWidget: widget that represents the view or editor for a file type.\n */\nexport class BlocklyEditor extends DocumentWidget {\n    constructor(options) {\n        super(options);\n        // Loading the ITranslator\n        // const trans = this.translator.load('jupyterlab');\n        // Create and add a button to the toolbar to execute\n        // the code.\n        const button = new BlocklyButton({\n            label: '',\n            icon: runIcon,\n            className: 'jp-blockly-runButton',\n            onClick: () => this.content.layout.run(),\n            tooltip: 'Run Code'\n        });\n        this.toolbar.addItem('run', button);\n        this.toolbar.addItem('spacer', new Spacer());\n        this.toolbar.addItem('toolbox', new SelectToolbox({\n            label: 'Toolbox',\n            tooltip: 'Select tollbox',\n            manager: options.manager\n        }));\n        this.toolbar.addItem('generator', new SelectGenerator({\n            label: 'Kernel',\n            tooltip: 'Select kernel',\n            manager: options.manager\n        }));\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        this.content.dispose();\n        super.dispose();\n    }\n}\n/**\n * Widget that contains the main view of the DocumentWidget.\n */\nexport class BlocklyPanel extends SplitPanel {\n    /**\n     * Construct a `ExamplePanel`.\n     *\n     * @param context - The documents context.\n     */\n    constructor(context, manager, rendermime) {\n        super({\n            layout: new BlocklyLayout(manager, context.sessionContext, rendermime)\n        });\n        this.addClass('jp-BlocklyPanel');\n        this._context = context;\n        // Load the content of the file when the context is ready\n        this._context.ready.then(() => this._load());\n        // Connect to the save signal\n        this._context.saveState.connect(this._onSave, this);\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        Signal.clearData(this);\n        super.dispose();\n    }\n    _load() {\n        // Loading the content of the document into the workspace\n        const content = this._context.model.toJSON();\n        this.layout.workspace = content;\n    }\n    _onSave(sender, state) {\n        if (state === 'started') {\n            const workspace = this.layout.workspace;\n            this._context.model.fromJSON(workspace);\n        }\n    }\n}\n"],"names":[],"sourceRoot":""}