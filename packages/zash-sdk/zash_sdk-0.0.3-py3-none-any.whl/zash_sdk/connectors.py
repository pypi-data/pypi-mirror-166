# AUTOGENERATED! DO NOT EDIT! File to edit: ../00_connectors.ipynb.

# %% auto 0
__all__ = ['client', 'ci_client', 'BASE_URL', 'VERSION', 'DEFAULT_CHAIN', 'PERIODS', 'authenticate', 'RSConnector',
           'APIConnector']

# %% ../00_connectors.ipynb 3
import redshift_connector
import boto3
import requests
import uuid
import pandas as pd
from functools import cache
from redshift_connector import Connection
from botocore.exceptions import ClientError
from functools import cache
from urllib.parse import urljoin

# %% ../00_connectors.ipynb 4
client = boto3.client("cognito-idp")
ci_client = boto3.client("cognito-identity")

@cache
def _authenticate(username, api_key):
    auth_res = client.initiate_auth(
        ClientId="377phvhgdn23vsor2ndafu02ek",
        AuthFlow="USER_PASSWORD_AUTH",
        AuthParameters={
            "USERNAME": username,
            "PASSWORD": api_key,
        },
    )["AuthenticationResult"]

    _logins = {
        "cognito-idp.eu-west-1.amazonaws.com/eu-west-1_NVKhGLh75": auth_res["IdToken"]
    }

    identity_id = ci_client.get_id(
        IdentityPoolId="eu-west-1:1b1ee2fe-2476-414c-9b29-993a56efb136",
        Logins=_logins,
    )["IdentityId"]

    return ci_client.get_credentials_for_identity(
        IdentityId=identity_id,
        Logins=_logins,
    )["Credentials"]

def _connect_to_redshift(creds):
    return redshift_connector.connect(
        iam=True,
        database="prod",
        db_user="pete",
        cluster_identifier="redshift-cluster-1",
        access_key_id=creds["AccessKeyId"],
        secret_access_key=creds["SecretKey"],
        session_token=creds["SessionToken"],
        region="eu-west-1",
    )

def _connect_to_redshift_dev():
    return _connect_to_redshift({'AccessKeyId': None, "SecretKey": None, "SessionToken": None})

def authenticate(username: str, # username, usually your email
                 api_key: str # generated api_key, you can request one from zash.sh
                ) -> redshift_connector.Connection:
    """Authenticate and get Zash data warehouse connection"""
    try:
        if username == 'your_username' or api_key == 'your_api_key':
            return _connect_to_redshift_dev()
        return _connect_to_redshift(_authenticate(username, api_key))
    except ClientError as e:
        if not len(e.args):
            raise e
        if "ExpiredToken" in e.args[0]:
            _authenticate.cache_clear()
            return _connect_to_redshift(_authenticate(username, api_key))

# %% ../00_connectors.ipynb 5
class RSConnector:
    """Redshift connector"""
    def __init__(self, username: str, api_key:str):
        self._conn = authenticate(username, api_key)
    def refresh(self): self._conn = authenticate(usename, api_key)
    def _fetch(self, statement: str):
        with self._conn.cursor() as cur:
            cur.execute(statement)
            return cur.fetch_dataframe()
    def query(self, statement: str):
        try: return self._fetch(statement)
        except ClientError as e:
            if not len(e.args): raise e
            if "ExpiredToken" in e.args[0]:
                print('Session expired, reauthenticating...')
                self.refresh()
                return self._fetch(statement)
    def close(self): self._conn.close()

# %% ../00_connectors.ipynb 7
BASE_URL = "https://api.zash.sh"
VERSION = "v1"
DEFAULT_CHAIN = "eth"
PERIODS = {"1d", "1w", "1m", "all"}

class APIConnector:
    """Zash API connector. See [API docs](https://zashapi.readme.io) for more details."""
    def __init__(self, base_url: str = BASE_URL, api_key: str = "") -> None:
        self._session = requests.Session()
        self._session.headers.update({"X-API-Key": api_key})
        self.base_url = base_url
        self.product = "nft"
        self.base_path = urljoin(base_url, f"{VERSION}/{DEFAULT_CHAIN}/{self.product}")
    def get(self, path: str, *args, **kwargs):
        if not path.startswith('/'):
            path = '/' + path
        return self._session.get(self.base_path + path, *args, **kwargs)
    def update_chain(self, chain): self.base_path = urljoin(self.base_url, f"{VERSION}/{chain}/")
    def close(self): self._session.close()
