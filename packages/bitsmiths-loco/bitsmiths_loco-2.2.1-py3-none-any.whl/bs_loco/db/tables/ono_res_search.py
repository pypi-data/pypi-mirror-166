# This file was generated by mettle.genes.db.GenPy3 [ver 2.2] on Thu Sep  8 08:23:42 2022
#

import datetime
import uuid
import time
import dataclasses
import typing
import mettle.io
import mettle.db

@dataclasses.dataclass(slots=True)
class oNoResSearch(mettle.io.ISerializable):

    id: str = dataclasses.field(default='', compare=False)
    filename: str = dataclasses.field(default='', compare=False)
    mimetype: str = dataclasses.field(default='', compare=False)
    content: bytearray = dataclasses.field(default=b'', compare=False)

    def clear(self):
        """
        Clears all member variables for this database record.
        """
        self.id = ''
        self.filename = ''
        self.mimetype = ''
        self.content = b''

    def _name(self) -> str:
        """
        Name of the record.

        :return: The name.
        """
        return 'oNoResSearch'

    def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
        """
        Serialize record to a stream.

        :param _w:
        :param _oname:
        """
        if _oname == None:
            _oname = self._name()

        _w.write_start(_oname)
        _w.write_string("id", self.id)
        _w.write_string("filename", self.filename)
        _w.write_string("mimetype", self.mimetype)
        _w.write_bytearray("content", self.content)
        _w.write_end(_oname)

    def _deserialize(self, _r: mettle.io.IReader, _oname: str = None):
        """
        Deserialize record from a stream.

        :param _r:
        :param _oname:
        """
        if _oname == None:
            _oname = self._name()

        _r.read_start(_oname)
        self.id = _r.read_string("id")
        self.filename = _r.read_string("filename")
        self.mimetype = _r.read_string("mimetype")
        self.content = _r.read_bytearray("content")
        _r.read_end(_oname)

    def _copy_from(self, rec: "oNoResSearch"):
        """
        Copies the column from the rec into this record.

        :param rec: The source record.
        """
        self.id = rec.id
        self.filename = rec.filename
        self.mimetype = rec.mimetype
        self.content = rec.content


    class List(list, mettle.io.ISerializable):
        """
        List Class
        """

        def _name(self) -> str:
            """
            Name of the list.

            :return: The name
            """
            return 'oNoResSearch.List'

        def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
            """
            Serialize the list to a stream.

            :param _w:
            :param _oname:
            """
            if _oname == None:
                _oname = self._name()

            _w.write_start_list(_oname, len(self))

            for _rec in self:
                _rec._serialize(_w)

            _w.write_end(_oname)

        def _deserialize(self, _r: mettle.io.IReader, _oname: str = None):
            """
            Deserialize the list from a stream.

            :param _r:
            :param _oname:
            """
            if _oname == None:
                _oname = self._name()

            _cnt = _r.read_start_list(_oname)

            while _cnt >= 1:
                _rec  = oNoResSearch()
                _cnt -= 1
                _rec._deserialize(_r)
                self.append(_rec)

            _r.read_end(_oname)

