# This file was generated by mettle.genes.db.GenPy3 [ver 2.2] on Thu Sep  8 08:23:42 2022
#  Target Database = postgresql
#
import datetime
import uuid
import time
import mettle.lib
import mettle.io
import mettle.db

from bs_loco.db.tables.snap_msg_req_key import tSnapMsgReqKey
from bs_loco.db.tables.snap_msg_req import tSnapMsgReq

class dSnapMsgReqSelectOne:
    __slots__ = ("_dbcon", "_dbstmnt", "irec", "orec")

    def __init__(self, dbcon: mettle.db.IAConnect):
        """
        Constructor.

        :param dbcon: Mettle database connection object.
        """
        self._dbcon   = dbcon
        self._dbstmnt = None
        self.irec     = tSnapMsgReqKey()
        self.orec     = None

    async def __aenter__(self):
        """
        With statement enter.
        """
        return self

    async def __aexit__(self, type, value, traceback):
        """
        With statement exit.
        """
        await self._destroy()

    async def _destroy(self):
        if self._dbstmnt:
            await self._dbstmnt.destroy()
            self._dbstmnt = None

    async def exec_deft(self,
                        valuedate: datetime.date,
                        notype_id: str) -> "dSnapMsgReqSelectOne":
        """
        Execute the query by setting all the inputs.

        :param valuedate: datetime.date
        :param notype_id: str
        :return: Self for convenience.
        """
        self.irec.valuedate = valuedate
        self.irec.notype_id = notype_id

        return await self.exec()

    async def exec(self, irec: tSnapMsgReqKey = None) -> "dSnapMsgReqSelectOne":
        """
        Execute the query, optionally passing in the input rec.

        :param irec:
        :return: Self for convenience.
        """
        if irec:
            self.irec._copy_from(irec)

        await self._destroy()

        self._dbstmnt = await self._dbcon.statement("SnapMsgReqSelectOne", self._dbcon.STMNT_TYPE_READ)

        self._dbstmnt.sql("""select
  valuedate,
  notype_id,
  tot_req,
  tot_proc,
  tot_cancelled,
  tot_part_canc,
  tot_msgs,
  tot_msgs_sent,
  tot_msgs_failed,
  tot_msgs_retrys
from
  loco.SnapMsgReq
where
  valuedate = :valuedate and
  notype_id = :notype_id""")

        self._dbstmnt.bind_in("valuedate", self.irec.valuedate, datetime.date)
        self._dbstmnt.bind_in("notype_id", self.irec.notype_id, str, 64)

        self._dbstmnt.bind_out("valuedate", datetime.date)
        self._dbstmnt.bind_out("notype_id", str, 64)
        self._dbstmnt.bind_out("tot_req", int, 4)
        self._dbstmnt.bind_out("tot_proc", int, 4)
        self._dbstmnt.bind_out("tot_cancelled", int, 4)
        self._dbstmnt.bind_out("tot_part_canc", int, 4)
        self._dbstmnt.bind_out("tot_msgs", int, 4)
        self._dbstmnt.bind_out("tot_msgs_sent", int, 4)
        self._dbstmnt.bind_out("tot_msgs_failed", int, 4)
        self._dbstmnt.bind_out("tot_msgs_retrys", int, 4)

        await self._dbcon.execute(self._dbstmnt)

        if irec:
            irec._copy_from(self.irec)

        return self

    async def fetch(self, must_exist: bool = False) -> bool:
        """
        Fetches the next row from the executed query.

        :param must_exist:
        :return: True if a row was fetched, else False.
        """
        if not await self._dbcon.fetch(self._dbstmnt):
            if must_exist:
                raise mettle.lib.xMettle(f"Record not found: [table:SnapMsgReq, proc:SelectOne, row:{self.irec}]", err_code=mettle.lib.xMettle.eCode.DBNotFound)
            return False

        self.orec = tSnapMsgReq()

        self.orec.valuedate = self._dbstmnt.result[0]
        self.orec.notype_id = self._dbstmnt.result[1]
        self.orec.tot_req = self._dbstmnt.result[2]
        self.orec.tot_proc = self._dbstmnt.result[3]
        self.orec.tot_cancelled = self._dbstmnt.result[4]
        self.orec.tot_part_canc = self._dbstmnt.result[5]
        self.orec.tot_msgs = self._dbstmnt.result[6]
        self.orec.tot_msgs_sent = self._dbstmnt.result[7]
        self.orec.tot_msgs_failed = self._dbstmnt.result[8]
        self.orec.tot_msgs_retrys = self._dbstmnt.result[9]

        return True

    async def fetch_iter(self) -> tSnapMsgReq:
        """
        Yield all the rows one at a time.

        :return: Iterator for output rows
        """
        while await self.fetch():
            yield self.orec

    async def fetch_all(self, out_list: tSnapMsgReq.List, clear_list: bool = True) -> int:
        """
        Fetch all the rows into the specified list and return the list count.

        :param out_list:
        :param clear_list:
        :return: Number of rows fetched.
        """
        if clear_list:
            out_list.clear()

        while await self.fetch():
            out_list.append(self.orec)

        return len(out_list)

