# This file was generated by mettle.genes.db.GenPy3 [ver 2.2] on Thu Sep  8 08:23:42 2022
#  Target Database = postgresql
#
import datetime
import uuid
import time
import mettle.lib
import mettle.io
import mettle.db

from bs_loco.db.tables.imsg_req_pending_changed import iMsgReqPendingChanged
from bs_loco.db.tables.omsg_req_pending_changed import oMsgReqPendingChanged

class dMsgReqPendingChanged:
    __slots__ = ("_dbcon", "_dbstmnt", "irec", "orec")

    def __init__(self, dbcon: mettle.db.IAConnect):
        """
        Constructor.

        :param dbcon: Mettle database connection object.
        """
        self._dbcon   = dbcon
        self._dbstmnt = None
        self.irec     = iMsgReqPendingChanged()
        self.orec     = None

    async def __aenter__(self):
        """
        With statement enter.
        """
        return self

    async def __aexit__(self, type, value, traceback):
        """
        With statement exit.
        """
        await self._destroy()

    async def _destroy(self):
        if self._dbstmnt:
            await self._dbstmnt.destroy()
            self._dbstmnt = None

    async def exec_deft(self,
                        limit_crit: str) -> "dMsgReqPendingChanged":
        """
        Execute the query by setting all the inputs.

        :param limit_crit: str
        :return: Self for convenience.
        """
        self.irec.limit_crit = limit_crit

        return await self.exec()

    async def exec(self, irec: iMsgReqPendingChanged = None) -> "dMsgReqPendingChanged":
        """
        Execute the query, optionally passing in the input rec.

        :param irec:
        :return: Self for convenience.
        """
        if irec:
            self.irec._copy_from(irec)

        await self._destroy()

        self._dbstmnt = await self._dbcon.statement("MsgReqPendingChanged", self._dbcon.STMNT_TYPE_READ)

        self._dbstmnt.sql("""select
  r.id,
  m.status,
  max(m.time_sent) as msgTime
from
  (
    select xr.id
    from loco.msgreq xr join loco.msg xm on xr.id = xm.msgreq_id
    where xr.status = 'P' and xm.status != 'P'
    group by xr.id
  ) r
    join
  loco.msg m
    on m.msgreq_id = r.id
group by
  r.id,
  m.status
order by
  1,
  3
[limitCrit]""")

        self._dbstmnt.dynamic("[limitCrit]", self.irec.limit_crit)

        self._dbstmnt.bind_out("msgReqId", int, 8)
        self._dbstmnt.bind_out("msgStatus", str, 1)
        self._dbstmnt.bind_out("msgTime", datetime.datetime)

        await self._dbcon.execute(self._dbstmnt)

        if irec:
            irec._copy_from(self.irec)

        return self

    async def fetch(self, must_exist: bool = False) -> bool:
        """
        Fetches the next row from the executed query.

        :param must_exist:
        :return: True if a row was fetched, else False.
        """
        if not await self._dbcon.fetch(self._dbstmnt):
            if must_exist:
                raise mettle.lib.xMettle(f"Record not found: [table:MsgReq, proc:PendingChanged, row:{self.irec}]", err_code=mettle.lib.xMettle.eCode.DBNotFound)
            return False

        self.orec = oMsgReqPendingChanged()

        self.orec.msg_req_id = self._dbstmnt.result[0]
        self.orec.msg_status = self._dbstmnt.result[1]
        self.orec.msg_time = self._dbstmnt.result[2]

        return True

    async def fetch_iter(self) -> oMsgReqPendingChanged:
        """
        Yield all the rows one at a time.

        :return: Iterator for output rows
        """
        while await self.fetch():
            yield self.orec

    async def fetch_all(self, out_list: oMsgReqPendingChanged.List, clear_list: bool = True) -> int:
        """
        Fetch all the rows into the specified list and return the list count.

        :param out_list:
        :param clear_list:
        :return: Number of rows fetched.
        """
        if clear_list:
            out_list.clear()

        while await self.fetch():
            out_list.append(self.orec)

        return len(out_list)

