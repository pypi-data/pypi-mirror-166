#!/bin/bash -x
# Generate a list of Python files to analyze
find ${{SOURCE_DIR}} -type f -name '*.py' > ${{TOOL_ANALYSIS_DIR}}/codesonar_file_list.txt

# Perform CodeSonar analysis
${{CODESONAR_PATH}}/codesonar analyze ${{TOOL_ANALYSIS_DIR}}/SCRUBAnalysis -project ${{CODESONAR_PROJ_NAME}} ${{CODESONAR_ANALYZE_FLAGS}} -foreground -auth certificate -hubcert ${{CODESONAR_CERT}} -hubkey ${{CODESONAR_KEY}} ${{CODESONAR_HUB}} ${{CODESONAR_PATH}}/cspython ${{CODESONAR_PATH}}/../../third-party/pylint-sarif/pylint2cso.py --inputsfile ${{TOOL_ANALYSIS_DIR}}/codesonar_file_list.txt

# Get the analysis ID from the analysis artifacts
aid=`cat ${{TOOL_ANALYSIS_DIR}}/*/aid.txt`

# Change to the analysis directory
cd ${{TOOL_ANALYSIS_DIR}}

# Get the results
results_template='${{CODESONAR_RESULTS_TEMPLATE}}'
re='^[0-9]+$'
if [[ $results_template =~ $re ]] ; then
    # Get the results from the CodeSonar Hub
    ${{CODESONAR_PATH}}/codesonar get ${{CODESONAR_GET_FLAGS}} -auth certificate -hubcert ${{CODESONAR_CERT}} -hubkey ${{CODESONAR_KEY}} ${{CODESONAR_HUB}}/report/aid-$aid-$results_template.xml

    # Parse the results into SCRUB format
    python3 -m scrub.tools.parsers.get_codesonar_warnings ${{TOOL_ANALYSIS_DIR}}/*.xml ${{RAW_RESULTS_DIR}}/codesonar_raw.scrub
else
    # Get the results from the CodeSonar Hub
    ${{CODESONAR_PATH}}/codesonar get ${{CODESONAR_GET_FLAGS}} -auth certificate -hubcert ${{CODESONAR_CERT}} -hubkey ${{CODESONAR_KEY}} ${{CODESONAR_HUB}}/analysis/$aid-allwarnings.sarif

    # Parse the results into SCRUB format
    python3 -m scrub.tools.parsers.translate_results ${{TOOL_ANALYSIS_DIR}}/*.sarif ${{RAW_RESULTS_DIR}}/codesonar_raw.scrub ${{SOURCE_DIR}} scrub
fi