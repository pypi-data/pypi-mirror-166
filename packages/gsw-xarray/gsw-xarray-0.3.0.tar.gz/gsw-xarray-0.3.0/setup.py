# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['gsw_xarray', 'gsw_xarray.tests']

package_data = \
{'': ['*']}

install_requires = \
['gsw>=3.4.0', 'xarray>=0.20.2']

extras_require = \
{'docs': ['Sphinx>=4.4.0', 'furo>=2022.1.2'],
 'pint': ['pint-xarray>=0.2.1,<0.3.0', 'Pint>=0.18']}

setup_kwargs = {
    'name': 'gsw-xarray',
    'version': '0.3.0',
    'description': 'Drop in wrapper for gsw which adds CF standard name and units attributes to xarray results',
    'long_description': '.. |CI Status| image:: https://github.com/docotak/gsw-xarray/actions/workflows/ci.yml/badge.svg\n  :target: https://github.com/DocOtak/gsw-xarray/actions/workflows/ci.yml\n  :alt: CI Status\n.. |Documentation Status| image:: https://readthedocs.org/projects/gsw-xarray/badge/?version=latest\n  :target: https://gsw-xarray.readthedocs.io/en/latest/?badge=latest\n  :alt: Documentation Status\n.. |pypi| image:: https://badge.fury.io/py/gsw-xarray.svg\n   :target: https://badge.fury.io/py/gsw-xarray\n   :alt: pypi package\n.. |conda forge| image:: https://img.shields.io/conda/vn/conda-forge/gsw-xarray\n   :target: https://anaconda.org/conda-forge/gsw-xarray\n\ngsw-xarray: Wrapper for gsw that adds CF attributes\n===================================================\n|CI Status| |Documentation Status| |pypi| |conda forge|\n\ngsw-xarray is a wrapper for `gsw python <https://github.com/TEOS-10/GSW-python>`_\nthat will add CF attributes to xarray.DataArray outputs.\nIt is meant to be a drop in wrapper for the upstream GSW-Python library and will only add these attributes if one argument to a function is an xarray.DataArray.\n\nYou can find the documentation on `gsw-xarray.readthedocs.io <https://gsw-xarray.readthedocs.io/>`_.\n\nUsage\n-----\n\n.. code:: python\n\n   import gsw_xarray as gsw\n\n   # Create a xarray.Dataset\n   import numpy as np\n   import xarray as xr\n   ds = xr.Dataset()\n   id = np.arange(3)\n   ds[\'id\'] = xr.DataArray(id, coords={\'id\':id})\n   ds[\'CT\'] = ds[\'id\'] * 10\n   ds[\'CT\'].attrs = {\'standard_name\':\'sea_water_conservative_temperature\'}\n   ds[\'SA\'] = ds[\'id\'] * 0.1 + 34\n   ds[\'SA\'].attrs = {\'standard_name\':\'sea_water_absolute_salinity\'}\n\n   # Apply gsw functions\n   sigma0 = gsw.sigma0(SA=ds[\'SA\'], CT=ds[\'CT\'])\n   print(sigma0.attrs)\n\nOutputs\n\n::\n\n   {\'standard_name\': \'sea_water_sigma_t\', \'units\': \'kg/m^3\'}\n\nDon\'t worry about usage with non xarray array objects, just use in all places you would the upstream library:\n\n.. code:: python\n\n   sigma0 = gsw.sigma0(id * 10, id * 0.1 + 34)\n   print(type(sigma0), sigma0)\n\nOutputs\n\n::\n\n   <class \'numpy.ndarray\'> [-5.08964499  2.1101098   9.28348219]\n\n\nWe support (and convert the unit if necessary) the usage of pint.Quantities and the usage of xarray wrapped Quantities.\nSupport for pint requires the installation of two optional dependencies: ``pint`` and ``pint-xarray``.\nIf all the inputs to a gsw function are Quantities, the returned object will also be a Quantity belonging to the same UnitRegistry.\n\n.. warning::\n\n   Quantities must all belong to the same pint.UnitRegistry, a ValueError will be thrown if there are mixed registries.\n\n.. warning::\n\n   If one input is a Quantity, all inputs must be Quantities (and/or xarray wrapped Quantities), except for the `axis` and `interp_method` arguments.\n   For mixed usage of Quantities and non Quantities, a ValueError will be thrown.\n\n.. code:: python\n\n   import pint_xarray\n   import gsw_xarray as gsw\n\n   # Create a xarray.Dataset\n   import numpy as np\n   import xarray as xr\n   ds = xr.Dataset()\n   id = np.arange(3)\n   ds[\'id\'] = xr.DataArray(id, coords={\'id\':id})\n   ds[\'CT\'] = ds[\'id\'] * 10\n   # make sure there are unit attrs this time\n   ds[\'CT\'].attrs = {\'standard_name\':\'sea_water_conservative_temperature\', \'units\': \'degC\'}\n   ds[\'SA\'] = ds[\'id\'] * 0.1 + 34\n   ds[\'SA\'].attrs = {\'standard_name\':\'sea_water_absolute_salinity\', \'units\': \'g/kg\'}\n\n   # use the pint accessor to quantify things\n   ds = ds.pint.quantify()\n\n   # Apply gsw functions\n   sigma0 = gsw.sigma0(SA=ds[\'SA\'], CT=ds[\'CT\'])\n   # outputs are now quantities!\n   print(sigma0)\n\nOutputs\n\n::\n\n   <xarray.DataArray \'sigma0\' (id: 3)>\n   <Quantity([27.17191038 26.12820162 24.03930887], \'kilogram / meter ** 3\')>\n   Coordinates:\n     * id       (id) int64 0 1 2\n   Attributes:\n       standard_name:  sea_water_sigma_t\n\nThe usage of xarray wrapped Quantities is not required, you can use pint directly (though the ``pint-xarray`` dep still needs to be installed).\n\n.. code:: python\n\n   import gsw_xarray as gsw\n   import pint\n   ureg = pint.UnitRegistry()\n   SA = ureg.Quantity(35, ureg("g/kg"))\n   CT = ureg.Quantity(10, ureg.degC)\n   sigma0 = gsw.sigma0(SA=SA, CT=CT)\n   print(sigma0)\n\nOutputs\n\n::\n\n   26.824644457868317 kilogram / meter ** 3\n\nAs gsw-xarray converts arguments to the proper unit when Quantities are used, we can e.g. use the temperature in Kelvin:\n\n.. code:: python\n\n   CT = ureg.Quantity(10, ureg.degC).to(\'kelvin\')\n   sigma0 = gsw.sigma0(SA=SA, CT=CT)\n   print(sigma0)\n\nOutputs\n\n::\n\n   26.824644457868317 kilogram / meter ** 3\n\n.. note::\n   If you do not wish to use the unit conversion ability, you need to pass dequantified Quantities\n   (e.g. `da.pint.dequantify()` for pint-xarray or `arg.magnitude` for pint.Quantity).\n\n.. warning::\n   On the opposite, gsw-xarray will not check the units if non Quantity arguments are used.\n   If you wish to use unit conversion, please pass quantified arguments (if your xarray.Dataset /\n   xarray.DataArray has the \'units\' attribute, you can use `da.pint.quantify()`)\n\n.. note::\n   We recommend that you use the `cf-xarray <https://cf-xarray.readthedocs.io/en/latest/units.html>`_ registry for units,\n   as it implements geophysical units as `degree_north`, `degrees_north`, etc.\n   gsw-xarray internally uses `degree_north` and `degree_east` for latitude and longitude unit names.\n   If they are not found in the unit registry, they will be replaced by `degree`.\n\n   The function `gsw.SP_from_SK` uses part per thousand for SK. \'ppt\' is already used for picopint,\n   so the expected unit is replaced by \'1\'.\n\n\nInstallation\n------------\nPip\n...\n\n.. code:: bash\n\n    pip install gsw-xarray\n\n\nConda\n.....\n\nInside a conda environment:  ``conda install -c conda-forge gsw-xarray``.\n\nPipenv\n......\n\nInside a pipenv environment: ``pipenv install gsw-xarray``.\n\n\nContributor guide\n-----------------\n\nAll contributions, bug reports, bug fixes, documentation improvements,\nenhancements, and ideas are welcome.\nIf you notice a bug or are missing a feature, fell free\nto open an issue in the `GitHub issues page <https://github.com/DocOtak/gsw-xarray/issues>`_.\n\nIn order to contribute to gsw-xarray, please fork the repository and\nsubmit a pull request. A good step by step tutorial for starting with git can be found in the\n`xarray contributor guide <https://xarray.pydata.org/en/stable/contributing.html#working-with-the-code>`_.\nA main difference is that we do not use conda as python environment, but poetry.\n\nSet up the environment\n......................\n\nYou will first need to `install poetry <https://python-poetry.org/docs/#installation>`_.\nThen go to your local clone of gsw-xarray and launch installation:\n\n.. code:: bash\n\n   cd /path/to/your/gsw-xarray\n   poetry install\n\nYou can then activate the environment by launching a shell\nwithin the virtual environment:\n\n.. code:: bash\n\n   poetry shell\n\nYou can check that the tests pass locally:\n\n.. code:: bash\n\n   pytest gsw_xarray/tests\n\nRelease (for maintainers only)\n..............................\n\nTODO...\n',
    'author': 'Andrew Barna',
    'author_email': 'abarna@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/DocOtak/gsw-xarray',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'python_requires': '>=3.8',
}


setup(**setup_kwargs)
