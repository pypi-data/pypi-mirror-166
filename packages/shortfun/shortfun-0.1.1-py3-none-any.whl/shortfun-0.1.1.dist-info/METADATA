Metadata-Version: 2.1
Name: shortfun
Version: 0.1.1
Summary: Short lambda functions for functional built in operations
Home-page: https://www.github.com/alrudolph/shortfun
License: MIT
Author: Alex Rudolph
Author-email: alex3rudolph@gmail.com
Requires-Python: >=3.8,<4.0
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Requires-Dist: pytest (>=7.1.3,<8.0.0)
Project-URL: Repository, https://www.github.com/alrudolph/shortfun
Description-Content-Type: text/markdown

# `shortfun`

This package provides a functional way to use python operators. Using this package would prevent the need to do something such as:

```py
lambda x: x + 10
```

where we use a lambda function to pass in arguments to a function (in this case +) one at a time.

## Examples:

```py
>>> from shortfun import sf

>>> filtered = filter(sf.gt(10), [1, 20, 10, 8, 30])  # Greater-than function
>>> list(filtered)
[20, 30]
```

```py
>>> from shortfun import sf

>>> mapped = map(sf.add(10), [1, 20, 10, 8, 30])  # Addition function
>>> list(mapped)
[11, 30, 20, 18, 40]
```

The majority of python dunder methods are implemented in `shortfun` where it makes sense.

## Even Shorter Functions

This API is more limited, but in certain situations you can use the underscore variable provided by this package as a replacement for `lambda x: x ...`

```py
>>> from shortfun import _

>>> filtered = filter(_ > 10, [1, 20, 10, 8, 30])  # instead of: lambda x: x > 10
>>> list(filtered)
[20, 30]
```

```py
>>> from shortfun import _

>>> mapped = map(_ + 10, [1, 20, 10, 8, 30]) # instead of: lambda x: x + 10
>>> list(mapped)
[11, 30, 20, 18, 40]
```

