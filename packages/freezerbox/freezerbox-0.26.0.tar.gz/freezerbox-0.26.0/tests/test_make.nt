
test_make:
  -
    id: solo
    db:
      x1:
        > MockReagent(
        >         synthesis=Fields(['a'], {'protocol': ['1']}),
        >         cleanups=[
        >             Fields(['b'], {'protocol': ['2']}),
        >             Fields(['c'], {'protocol': ['3']}),
        >         ],
        > )
    expected:
      - 1
      - Label the product: x1
      - 2
      - 3
  -
    id: combo
    db:
      x1:
        > MockReagent(
        >         synthesis=Fields(['a'], {'protocol': ['1']}),
        >         cleanups=[
        >             Fields(['b'], {'protocol': ['2']}),
        >             Fields(['c'], {'protocol': ['3']}),
        >         ],
        > )
      x2:
        > MockReagent(
        >         synthesis=Fields(['a'], {'protocol': ['4']}),
        >         cleanups=[
        >             Fields(['b'], {'protocol': ['5']}),
        >             Fields(['c'], {'protocol': ['6']}),
        >         ],
        > )
    expected:
      - 1
      - Label the product: x1
      - 4
      - Label the product: x2
      - 2
      - 5
      - 3
      - 6
  -
    id: combo
    db:
      x1:
        > MockReagent(
        >         synthesis=Fields(['a'], {'protocol': ['1'], 'merge': True}),
        >         cleanups=[
        >             Fields(['b'], {'protocol': ['2']}),
        >             Fields(['c'], {'protocol': ['3']}),
        >         ],
        > )
      x2:
        > MockReagent(
        >         synthesis=Fields(['a'], {'protocol': ['4'], 'merge': True}),
        >         cleanups=[
        >             Fields(['b'], {'protocol': ['5']}),
        >             Fields(['c'], {'protocol': ['6']}),
        >         ],
        > )
    expected:
      - 1
      - 4
      - Label the products: x1, x2
      - 2
      - 5
      - 3
      - 6
  -
    id: combo
    db:
      x1:
        > MockReagent(
        >         synthesis=Fields(['a'], {'protocol': ['1']}),
        >         cleanups=[
        >             Fields(['b'], {'protocol': ['2']}),
        >             Fields(['c'], {'protocol': ['3']}),
        >         ],
        > )
      x2:
        > MockReagent(
        >         synthesis=Fields(['a'], {'protocol': ['4'], 'deps': ['x1']}),
        >         cleanups=[
        >             Fields(['b'], {'protocol': ['5']}),
        >             Fields(['c'], {'protocol': ['6']}),
        >         ],
        > )
    expected:
      - 1
      - Label the product: x1
      - 2
      - 3
      - 4
      - Label the product: x2
      - 5
      - 6
  -
    id: ready
    db:
      x1:
        > MockReagent(
        >         synthesis=Fields(['a'], {'protocol': ['1']}),
        >         ready=False,
        > )
      x2:
        > MockReagent(
        >         synthesis=Fields(['b'], {'protocol': ['2']}),
        >         ready=True,
        > )
      x3:
        > MockReagent(
        >         synthesis=Fields(['c'], {'protocol': ['3'], 'deps': ['x1', 'x2']}),
        > )
    tags:
      - x3
    expected:
      - 1
      - Label the product: x1
      - 3
      - Label the product: x3

  -
    id: order-cli
    db:
      x1:
        > MockReagent(
        >         synthesis=Fields(['a'], {'protocol': ['1'], 'merge': True}),
        >         cleanups=[
        >             Fields(['b'], {'protocol': ['2']}),
        >             Fields(['c'], {'protocol': ['3']}),
        >         ],
        > )
      x2:
        > MockReagent(
        >         synthesis=Fields(['a'], {'protocol': ['4'], 'merge': True}),
        >         cleanups=[
        >             Fields(['b'], {'protocol': ['5']}),
        >             Fields(['c'], {'protocol': ['6']}),
        >         ],
        > )
    tags:
      - x2
      - x1
    expected:
      - 4
      - 1
      - Label the products: x2, x1
      - 5
      - 2
      - 6
      - 3
  -
    id: order-deps
    db:
      # Specify x2 before x1, to make sure that the resulting output is 
      # actually natsorted and not just somehow copying the order in this 
      # dictionary.
      x2:
        > MockReagent(
        >         synthesis=Fields(['a'], {'protocol': ['4'], 'merge': True}),
        >         cleanups=[
        >             Fields(['b'], {'protocol': ['5']}),
        >             Fields(['c'], {'protocol': ['6']}),
        >         ],
        >         ready=False,
        > )
      x1:
        > MockReagent(
        >         synthesis=Fields(['a'], {'protocol': ['1'], 'merge': True}),
        >         cleanups=[
        >             Fields(['b'], {'protocol': ['2']}),
        >             Fields(['c'], {'protocol': ['3']}),
        >         ],
        >         ready=False,
        > )
      x3:
        > MockReagent(
        >         synthesis=Fields(['a'], {'protocol': ['7'], 'deps': ['x1', 'x2']}),
        >         cleanups=[
        >             Fields(['b'], {'protocol': ['8']}),
        >             Fields(['c'], {'protocol': ['9']}),
        >         ],
        > )
    tags:
      - x3
    expected:
      - 1
      - 4
      - Label the products: x1, x2
      - 2
      - 5
      - 3
      - 6
      - 7
      - Label the product: x3
      - 8
      - 9
  -
    id: order-deps
    db:
      # Specify x2 before x1, to make sure that the resulting output is 
      # actually natsorted and not just somehow copying the order in this 
      # dictionary.
      x2:
        > MockReagent(
        >         synthesis=Fields(['d'], {'protocol': ['4']}),
        >         cleanups=[
        >             Fields(['e'], {'protocol': ['5']}),
        >             Fields(['f'], {'protocol': ['6']}),
        >         ],
        >         ready=False,
        > )
      x1:
        > MockReagent(
        >         synthesis=Fields(['a'], {'protocol': ['1']}),
        >         cleanups=[
        >             Fields(['b'], {'protocol': ['2']}),
        >             Fields(['c'], {'protocol': ['3']}),
        >         ],
        >         ready=False,
        > )
      x3:
        > MockReagent(
        >         synthesis=Fields(['a'], {'protocol': ['7'], 'deps': ['x1', 'x2']}),
        >         cleanups=[
        >             Fields(['b'], {'protocol': ['8']}),
        >             Fields(['c'], {'protocol': ['9']}),
        >         ],
        > )
    tags:
      - x3
    expected:
      - 1
      - Label the product: x1
      - 2
      - 3
      - 4
      - Label the product: x2
      - 5
      - 6
      - 7
      - Label the product: x3
      - 8
      - 9

  -
    id: sw
    db:
      x1:
        > MockReagent(
        >         synthesis=parse_fields('sw step A'),
        >         cleanups=parse_fields_list('sw step B; sw step C'),
        > )
    expected:
      - A
      - Label the product: x1
      - B
      - C
  -
    id: sw
    db:
      x1:
        > MockReagent(
        >         synthesis=parse_fields('sw step A'),
        >         cleanups=parse_fields_list('sw step B; sw step C'),
        > )
      x2:
        > MockReagent(
        >         synthesis=parse_fields('sw step A'),
        >         cleanups=parse_fields_list('sw step B; sw step C'),
        > )
    expected:
      - A
      - Label the products: x1, x2
      - B
      - C
  -
    id: sw-quoted-arg
    db:
      x1:
        > MockReagent(
        >         synthesis=parse_fields('sw step "A B"'),
        >         cleanups=parse_fields_list('sw step "C D"; sw step "E F"'),
        > )
    expected:
      - A B
      - Label the product: x1
      - C D
      - E F
  -
    id: sw-cwd
    db:
      x1:
        > MockReagent(
        >         synthesis=parse_fields(f'sw mock_protocol.sh cwd={TEST_DIR}/mock_project/notebook/mock_experiment_1'),
        > )
    expected:
      - A
      - Label the product: x1
  -
    id: sw-cwd
    # Make sure the cwd is set individually for each maker.  This actually 
    # checks for a bug in stepwise, where the current working directory was 
    # calculated only the first time the library singleton was instantiated.
    db:
      x1:
        > MockReagent(
        >         synthesis=parse_fields(f'sw mock_protocol.sh cwd={TEST_DIR}/mock_project/notebook/mock_experiment_1'),
        >         cleanups=parse_fields_list(f'sw mock_protocol.sh cwd={TEST_DIR}/mock_project/notebook/mock_experiment_2'),
        > )
    expected:
      - A
      - Label the product: x1
      - B
  -
    id: sw-exmemo
    db:
      x1:
        > MockReagent(
        >         synthesis=parse_fields(f'sw mock_protocol.sh expt=1 project={TEST_DIR}/mock_project'),
        > )
    expected:
      - A
      - Label the product: x1

  -
    id: order
    db:
      x1:
        > MockReagent(
        >         synthesis=parse_fields('order vendor=IDT'),
        > )
    expected:
      - Order x1 from IDT.

test_builtin_maker_attrs:
  -
    id: sw-seq
    maker: sw step A seq=GATTACA
    maker_attrs:
      0.product_seq: 'GATTACA'
    reagent_attrs:
      seq: 'GATTACA'
  -
    id: sw-deps
    maker: sw step A
    maker_attrs:
      0.dependencies: set()
  -
    id: sw-deps
    maker: sw step A deps=x2
    maker_attrs:
      0.dependencies: {'x2'}
  -
    id: sw-deps
    maker: sw step A deps=x2,x3
    maker_attrs:
      0.dependencies: {'x2', 'x3'}
  -
    id: sw-deps
    maker: sw step A deps='x2, x3'
    maker_attrs:
      0.dependencies: {'x2', 'x3'}
  -
    id: sw-deps
    maker: sw step A deps=x2,x2
    maker_attrs:
      0.dependencies: {'x2'}
  -
    id: sw-conc
    maker: sw step A conc=75nM
    maker_attrs:
      0.product_conc: Quantity(75, 'nM')
    reagent_attrs:
      conc: Quantity(75, 'nM')
  -
    id: sw-conc
    maker: sw step A conc='75 nM'
    maker_attrs:
      0.product_conc: Quantity(75, 'nM')
    reagent_attrs:
      conc: Quantity(75, 'nM')
  -
    id: sw-conc-shadow
    db:
      x1:
        > MockMolecule(
        >         synthesis=parse_fields('sw step A conc=75nM'),
        >         cleanups=parse_fields_list('sw step B'),
        > )
    maker_attrs:
      0.product_conc: Quantity(75, 'nM')
    reagent_attrs:
      conc: Quantity(75, 'nM')
  -
    id: sw-volume
    maker: sw step A volume=10µL
    maker_attrs:
      0.product_volume: Quantity(10, 'µL')
    reagent_attrs:
      volume: Quantity(10, 'µL')
  -
    id: sw-volume
    maker: sw step A volume='10 µL'
    maker_attrs:
      0.product_volume: Quantity(10, 'µL')
    reagent_attrs:
      volume: Quantity(10, 'µL')
  -
    id: sw-volume-shadow
    db:
      x1:
        > MockMolecule(
        >         synthesis=parse_fields('sw step A volume=10µL'),
        >         cleanups=parse_fields_list('sw step B'),
        > )
    maker_attrs:
      0.product_volume: Quantity(10, 'µL')
    reagent_attrs:
      volume: Quantity(10, 'µL')
  -
    id: sw-molecule
    db:
      x1:
        > MockNucleicAcid(
        >         synthesis=parse_fields('sw step A molecule=dsDNA'),
        > )
    maker_attrs:
      0.product_molecule: 'dsDNA'
    reagent_attrs:
      molecule: 'DNA'
      is_double_stranded: True
  -
    id: sw-molecule-shadow
    db:
      x1:
        > MockNucleicAcid(
        >         synthesis=parse_fields('sw step A molecule=dsDNA'),
        >         cleanups=parse_fields_list('sw step B'),
        > )
    reagent_attrs:
      molecule: 'DNA'
      is_double_stranded: True
  -
    id: order
    maker: order vendor=IDT
    maker_attrs:
      0.vendor: 'IDT'
      0.dependencies: set()
      0.label_products: False
  -
    id: order-seq
    maker: order vendor=IDT seq=GATTACA
    maker_attrs:
      0.product_seq: 'GATTACA'
  -
    id: order-conc
    maker: order vendor=IDT conc=75nM
    maker_attrs:
      0.product_conc: Quantity(75, 'nM')
  -
    id: order-conc
    maker: order vendor=IDT conc='75 nM'
    maker_attrs:
      0.product_conc: Quantity(75, 'nM')
  -
    id: order-volume
    maker: order vendor=IDT volume=10µL
    maker_attrs:
      0.product_volume: Quantity(10, 'µL')
  -
    id: order-volume
    maker: order vendor=IDT volume='10 µL'
    maker_attrs:
      0.product_volume: Quantity(10, 'µL')
  -
    id: order-molecule
    maker: order vendor=IDT molecule=dsDNA
    maker_attrs:
      0.product_molecule: 'dsDNA'

test_collect_targets:
  -
    id: indep
    db:
      x1: MockReagent()
      x2: MockReagent()
    tags:
      - x1
    expected:
      - x1
  -
    id: indep
    db:
      x1: MockReagent()
      x2: MockReagent()
    tags:
      - x2
    expected:
      - x2
  -
    id: indep
    db:
      x1: MockReagent()
      x2: MockReagent()
    tags:
      - x1
      - x2
    expected:
      - x1
      - x2
  -
    id: recurse
    db:
      x1:
        > MockReagent(
        >         ready=False,
        > )
      x2:
        > MockReagent(
        >         synthesis=Fields(['b'], {'deps': ['x1']}),
        > )
    tags:
      - x2
    kwargs:
      recurse_deps: False
    expected:
      - x2
  -
    id: recurse
    db:
      x1:
        > MockReagent(
        >         ready=True,
        > )
      x2:
        > MockReagent(
        >         synthesis=Fields(['b'], {'deps': ['x1']}),
        > )
    tags:
      - x2
    kwargs:
      recurse_deps: True
    expected:
      - x2
  -
    id: recurse
    db:
      x1:
        > MockReagent(
        >         ready=False,
        > )
      x2:
        > MockReagent(
        >         synthesis=Fields(['b'], {'deps': ['x1']}),
        > )
    tags:
      - x2
    kwargs:
      recurse_deps: True
    expected:
      - x1
      - x2
  -
    id: recurse
    db:
      x1:
        > MockReagent(
        >         ready=False,
        > )
      x2:
        > MockReagent(
        >         synthesis=Fields(['b'], {'deps': ['x1']}),
        >         ready=False,
        > )
      x3:
        > MockReagent(
        >         synthesis=Fields(['c'], {'deps': ['x2']}),
        > )
    tags:
      - x3
    kwargs:
      recurse_deps: True
    expected:
      - x1
      - x2
      - x3
  -
    id: exclude
    db:
      x1:
        > MockReagent(
        >         ready=False,
        > )
      x2:
        > MockReagent(
        >         synthesis=Fields(['b'], {'deps': ['x1']}),
        >         ready=False,
        > )
      x3:
        > MockReagent(
        >         synthesis=Fields(['c'], {'deps': ['x2']}),
        > )
    tags:
      - x3
    kwargs:
      exclude_deps: []
    expected:
      - x1
      - x2
      - x3
  -
    id: exclude
    db:
      x1:
        > MockReagent(
        >         ready=False,
        > )
      x2:
        > MockReagent(
        >         synthesis=Fields(['b'], {'deps': ['x1']}),
        >         ready=False,
        > )
      x3:
        > MockReagent(
        >         synthesis=Fields(['c'], {'deps': ['x2']}),
        > )
    tags:
      - x3
    kwargs:
      exclude_deps: ['x1']
    expected:
      - x2
      - x3
  -
    id: exclude
    db:
      x1:
        > MockReagent(
        >         ready=False,
        > )
      x2:
        > MockReagent(
        >         synthesis=Fields(['b'], {'deps': ['x1']}),
        >         ready=False,
        > )
      x3:
        > MockReagent(
        >         synthesis=Fields(['c'], {'deps': ['x2']}),
        > )
    tags:
      - x3
    kwargs:
      exclude_deps: ['x2']
    expected:
      - x3
  -
    id: ignore-unknown-tag
    db:
      x1:
        > MockReagent(
        >         synthesis=Fields(['b'], {'deps': ['z1']}),
        > )
    tags:
      - x1
    expected:
      - x1
