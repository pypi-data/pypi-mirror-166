Metadata-Version: 2.1
Name: de-ecovisio
Version: 0.1.0
Summary: Eco-Counter: Eco-Visio-API
Home-page: https://github.com/bundesAPI/eco-visio-api
License: Apache-2.0
Keywords: OpenAPI,OpenAPI-Generator,EcoVisio,App,API
Author: BundesAPI
Author-email: kontakt@bund.dev
Requires-Python: >=3.6
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Requires-Dist: python-dateutil
Requires-Dist: urllib3 (>=1.25.3)
Project-URL: Bug Tracker, https://github.com/bundesAPI/eco-visio-api/issues
Description-Content-Type: text/markdown

# EcoVisio
API zum [Eco-Visio-Dashboard](https://data.eco-counter.com/ParcPublic/?id=4586) von Eco-Counter. Eco-Counter ist ein Technologieunternehmen mit Hauptsitz in Lannion, in der Bretagne. Zum Unternehmen zählen Filialen in Montreal (Kanada) und in Köln. Das Untenehmen betreibt u.a. Fahrrad- und Fußgängerzähler in unterschiedlichen Ländern, die in zahlreichen deutschen Städten z.B. Angaben wie \"Radfahrende heute\" oder \"Radfahrende dieses Jahr\" ausweisen. Teilweise sind die Zähler auch vollständig unterirdisch verlegt worden (z.B. zahlreiche Fahrradzählstellen in Hessen, vgl. https://data.eco-counter.com/ParcPublic/?id=8080). 

Generell findet man in Deutschland überwiegend Fahrradzähler. In Rostock gibt es daneben auch Fußgängerzähler (https://data.eco-counter.com/ParcPublic/?id=888), ebenso in Schwerin (https://data.eco-counter.com/ParcPublic/?id=6116), in Greifswald (https://data.eco-counter.com/ParcPublic/?id=6997) oder in Böblingen (https://data.eco-counter.com/ParcPublic/?id=6811). In Ludwigsburg gibt es sogar separat ausgewiesene Autozähler von Eco-Counter (https://data.eco-counter.com/ParcPublic/?id=6011). 

Eco-Visio ist ein Analysetool zur Auswertung der Daten. Auf dem Dashboard können die Zahlen unterschiedlicher Zähler eingesehen und verglichen werden.


This Python package is automatically generated by the [OpenAPI Generator](https://openapi-generator.tech) project:

- API version: 1.0.0
- Package version: 0.1.0
- Build package: org.openapitools.codegen.languages.PythonClientCodegen

## Requirements.

Python >= 3.6

## Installation & Usage
### pip install

```sh
pip install deutschland[EcoVisio]
```

### poetry install

```sh
poetry add deutschland -E EcoVisio
```

### Setuptools

Install via [Setuptools](http://pypi.python.org/pypi/setuptools).

```sh
python setup.py install --user
```
(or `sudo python setup.py install` to install the package for all users)

## Usage

Import the package:
```python
from deutschland import EcoVisio
```

## Getting Started

Please follow the [installation procedure](#installation--usage) and then run the following:

```python

import time
from deutschland import EcoVisio
from pprint import pprint
from deutschland.EcoVisio.api import default_api
from deutschland.EcoVisio.model.all_counter import AllCounter
# Defining the host is optional and defaults to https://www.eco-visio.net/api/aladdin/1.0.0
# See configuration.py for a list of all supported configuration parameters.
configuration = EcoVisio.Configuration(
    host = "https://www.eco-visio.net/api/aladdin/1.0.0"
)



# Enter a context with an instance of the API client
with EcoVisio.ApiClient(configuration) as api_client:
    # Create an instance of the API class
    api_instance = default_api.DefaultApi(api_client)
    id_organisme = 4586 # int | Träger ID (default to 4586)
    with_null = True # bool | Parameter ohne bekannten/dokumentierten Effekt. (optional)
    end = "26/05/2022" # str | Spätestes interessierendes Datum (z.B. 26/05/2022). (optional)
    begin = "01/01/2021" # str | Frühestes interessierendes Datum (z.B. 01/01/2021). (optional)
    pratique = 1 # int | pratique i.S.v. interessierende Zählerart (z.B. 1=Fußgänger,2=Fahrräder, oder 12=Sternchen) (optional)

    try:
        # Zähler
        api_response = api_instance.zaehler(id_organisme, with_null=with_null, end=end, begin=begin, pratique=pratique)
        pprint(api_response)
    except EcoVisio.ApiException as e:
        print("Exception when calling DefaultApi->zaehler: %s\n" % e)
```

## Documentation for API Endpoints

All URIs are relative to *https://www.eco-visio.net/api/aladdin/1.0.0*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
*DefaultApi* | [**zaehler**](docs/DefaultApi.md#zaehler) | **GET** /pbl/publicwebpageplus/{idOrganisme} | Zähler
*DefaultApi* | [**zaehlerdaten**](docs/DefaultApi.md#zaehlerdaten) | **GET** /pbl/publicwebpageplus/data/1 | Zählerdaten


## Documentation For Models

 - [AllCounter](docs/AllCounter.md)
 - [AllCounterInner](docs/AllCounterInner.md)
 - [AllCounterInnerPhotoInner](docs/AllCounterInnerPhotoInner.md)
 - [AllCounterInnerPratiqueInner](docs/AllCounterInnerPratiqueInner.md)
 - [Date](docs/Date.md)


## Documentation For Authorization

 All endpoints do not require authorization.

## Author

kontakt@bund.dev


## Notes for Large OpenAPI documents
If the OpenAPI document is large, imports in EcoVisio.apis and EcoVisio.models may fail with a
RecursionError indicating the maximum recursion limit has been exceeded. In that case, there are a couple of solutions:

Solution 1:
Use specific imports for apis and models like:
- `from deutschland.EcoVisio.api.default_api import DefaultApi`
- `from deutschland.EcoVisio.model.pet import Pet`

Solution 2:
Before importing the package, adjust the maximum recursion limit as shown below:
```
import sys
sys.setrecursionlimit(1500)
from deutschland import EcoVisio
from deutschland.EcoVisio.apis import *
from deutschland.EcoVisio.models import *
```


