
project:
  version : 0.5.0

# You can use substitutions

fragment1: |
  #include <stdio.h>
  int main()
  {
    printf("test\n");
    return 0;
  }

# Or you can use YAML anchors and aliases to emulate variables

code2: &fragment2 |
  #include <iostream>
  int main()
  {
    std::cout << "test" << std::endl;
    return 0;
  }

tasks:
  util:
    features : cshlib
    source   : 'shlib/**/*.c'
    configure :
      - do: parallel
        actions:
          - { do: check-headers, names: stdio.h }
          - { do: check-headers, names: stdlib.h, defname: WE_HAVE_STDLIB }
      - { do: check-code, text: $fragment1 }
  testprg:
    features : cxxprogram
    source   : 'prog/**/*.cpp'
    configure :
      - do: parallel
        actions:
          - { do: check-headers, names: cstdio iostream }
          - { do: check-code, text: $fragment1, label: fragment1 }
          - { do: check-code, text: *fragment2, label: fragment2, execute: true }
          - { do: check-code, file: 'cfgtests/cfgtest3.cpp',
              label: fragment3, defname: MYDEFINE, defines: 'VAR1=1 VAR2=2' }
      - { do: write-config-header, remove-defines: false }
    use: util

buildtypes:
  debug:
    toolchain.select:
      default: g++
      darwin: clang++
      windows: msvc
    cflags.select:
      default : -O0 -g
      msvc    : /Od
    cxxflags.select:
      default : -O0 -g
      msvc    : /Od /EHsc
    linkflags.select:
      g++: -Wl,--as-needed
      gcc: -Wl,--as-needed

  release:
    toolchain.select:
      default: g++
      darwin: clang++
      windows: msvc
    cflags.select:
      default : -O2
      msvc    : /O2
    cxxflags.select:
      default : -O2
      msvc    : /O2 /EHsc
    linkflags.select:
      g++: -Wl,--as-needed
      gcc: -Wl,--as-needed

  default: debug

byfilter:
  - if: task == 'util'
    set :
      toolchain.select:
        default: gcc
        darwin:  clang
        windows: msvc
