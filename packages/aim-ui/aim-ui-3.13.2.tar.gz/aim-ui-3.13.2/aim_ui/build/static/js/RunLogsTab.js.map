{"version":3,"sources":["pages/RunDetail/RunLogsTab/LogRow.tsx","pages/RunDetail/RunLogsTab/RunLogsTab.d.ts","pages/RunDetail/RunLogsTab/RunLogsTab.tsx","pages/RunDetail/RunLogsTab/index.tsx"],"names":["LogRow","index","style","data","className","logsList","value","displayName","React","LogsLastRequestEnum","memo","RunLogsTab","isRunLogsLoading","runHash","runLogs","inProgress","updatedLogsCount","liveUpdate","useRef","logsContainerRef","listRef","runsBatchRequestRef","useState","DEFAULT","lastRequestType","setLastRequestType","rangeRef","parentHeight","setParentHeight","parentWidth","setParentWidth","dataRef","scrollOffsetRef","keysList","setKeyList","visibleItemsRange","startLiveUpdate","intervalId","setInterval","LIVE_UPDATE","current","runDetailAppModel","getRunLogs","record_range","isLiveUpdate","call","useEffect","analytics","ANALYTICS_EVENT_KEYS","runDetails","tabs","logs","tabView","abort","clearInterval","values","_","sortBy","Object","keys","map","arrayWithEmptyStrings","Array","fill","length","concat","LOAD_MORE","scrollToItem","isEmpty","useResizeObserver","offsetHeight","offsetWidth","ErrorBoundary","BusyLoaderWrapper","isLoading","height","IllustrationBlock","size","title","ref","itemCount","itemSize","width","overscanCount","initialScrollOffset","onItemsRendered","props","visibleStartIndex","visibleStopIndex","itemData","onScroll","scrollOffset","scrollDirection","isLoadMore","classNames","loading","CircularProgress","thickness","color"],"mappings":"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","file":"static/js/RunLogsTab.js?version=1d8eb0ee3e4c577555fc","sourcesContent":["import React from 'react';\n\nfunction LogRow({\n  index,\n  style,\n  data,\n}: {\n  index: number;\n  style: React.CSSProperties;\n  data: {\n    logsList: Array<{ index: string; value: string }>;\n  };\n}) {\n  return (\n    <div style={style}>\n      <pre className={'LogRow__line'}>{data.logsList?.[index - 1]?.value}</pre>\n    </div>\n  );\n}\n\nLogRow.displayName = 'RunLogsTab';\n\nexport default React.memo(LogRow);\n","export interface IRunLogsTabProps {\n  isRunLogsLoading: boolean;\n  runHash: string;\n  runLogs: { [key: string]: any };\n  inProgress: boolean;\n  updatedLogsCount: number;\n}\n\nexport enum LogsLastRequestEnum {\n  DEFAULT = 'default',\n  LIVE_UPDATE = 'live-update',\n  LOAD_MORE = 'load-more',\n}\n","import React from 'react';\nimport _ from 'lodash-es';\nimport { ListOnScrollProps, VariableSizeList as List } from 'react-window';\nimport classNames from 'classnames';\nimport { useResizeObserver } from 'hooks';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport BusyLoaderWrapper from 'components/BusyLoaderWrapper/BusyLoaderWrapper';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport IllustrationBlock from 'components/IllustrationBlock/IllustrationBlock';\n\nimport { ANALYTICS_EVENT_KEYS } from 'config/analytics/analyticsKeysMap';\n\nimport runDetailAppModel from 'services/models/runs/runDetailAppModel';\nimport * as analytics from 'services/analytics';\n\nimport LogRow from './LogRow';\nimport { IRunLogsTabProps, LogsLastRequestEnum } from './RunLogsTab.d';\n\nimport './RunLogsTab.scss';\n\nconst SINGLE_LINE_HEIGHT = 15;\nconst LOAD_MORE_LOGS_COUNT = 500;\n\nfunction RunLogsTab({\n  isRunLogsLoading,\n  runHash,\n  runLogs,\n  inProgress,\n  updatedLogsCount,\n}: IRunLogsTabProps) {\n  const liveUpdate = React.useRef<any>(null);\n  const logsContainerRef = React.useRef<any>(null);\n  const listRef = React.useRef<any>({});\n  const runsBatchRequestRef = React.useRef<any>({});\n  const [lastRequestType, setLastRequestType] =\n    React.useState<LogsLastRequestEnum>(LogsLastRequestEnum.DEFAULT);\n  const rangeRef = React.useRef<any>(null);\n  const [parentHeight, setParentHeight] = React.useState<any>(0);\n  const [parentWidth, setParentWidth] = React.useState<any>(0);\n  const dataRef = React.useRef<any>(null);\n  const scrollOffsetRef = React.useRef<any>(null);\n  const [keysList, setKeyList] = React.useState<any>(null);\n  const visibleItemsRange = React.useRef<any>(null);\n\n  React.useEffect(() => {\n    runsBatchRequestRef.current = runDetailAppModel.getRunLogs({ runHash });\n    runsBatchRequestRef.current.call();\n\n    analytics.pageView(ANALYTICS_EVENT_KEYS.runDetails.tabs.logs.tabView);\n    startLiveUpdate();\n\n    return () => {\n      runsBatchRequestRef.current.abort();\n      if (liveUpdate.current?.intervalId) {\n        clearInterval(liveUpdate.current.intervalId);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  function liveUpdateCallBack() {\n    return function () {\n      setLastRequestType(LogsLastRequestEnum.LIVE_UPDATE);\n      runsBatchRequestRef.current = runDetailAppModel.getRunLogs({\n        runHash,\n        record_range: dataRef.current\n          ? `${+rangeRef.current?.[1] > 5 ? +rangeRef.current?.[1] - 5 : 0}:`\n          : '',\n        isLiveUpdate: true,\n      });\n      runsBatchRequestRef.current.call();\n    };\n  }\n\n  function startLiveUpdate() {\n    if (inProgress) {\n      const intervalId = setInterval(liveUpdateCallBack(), 3000);\n      liveUpdate.current = {\n        intervalId,\n      };\n    }\n  }\n\n  function onScroll(props: ListOnScrollProps) {\n    scrollOffsetRef.current = props.scrollOffset;\n    if (\n      props.scrollOffset <= 15 &&\n      +keysList?.[0] !== 0 &&\n      props.scrollDirection === 'backward'\n    ) {\n      if (liveUpdate.current?.intervalId) {\n        clearInterval(liveUpdate.current.intervalId);\n        runsBatchRequestRef.current.abort();\n      }\n      setLastRequestType(LogsLastRequestEnum.LOAD_MORE);\n      runsBatchRequestRef.current = runDetailAppModel.getRunLogs({\n        runHash,\n        record_range: `${\n          +rangeRef.current?.[0] > LOAD_MORE_LOGS_COUNT\n            ? +rangeRef.current?.[0] - LOAD_MORE_LOGS_COUNT\n            : 0\n        }:${rangeRef.current?.[0]}`,\n        isLoadMore: true,\n      });\n      runsBatchRequestRef.current.call();\n      startLiveUpdate();\n    }\n  }\n\n  React.useEffect(() => {\n    if (!inProgress && liveUpdate.current?.intervalId) {\n      clearInterval(liveUpdate.current.intervalId);\n      runsBatchRequestRef.current.abort();\n    }\n  }, [inProgress]);\n\n  React.useEffect(() => {\n    const values = _.sortBy(Object.values(runLogs ?? {}), 'index');\n    const keys = _.sortBy(values.map((value) => value.index));\n    const arrayWithEmptyStrings = Array(3).fill('');\n    rangeRef.current = [keys[0], keys[keys.length - 1]];\n    setKeyList(keys);\n    dataRef.current = values.concat(arrayWithEmptyStrings);\n  }, [runLogs]);\n\n  React.useEffect(() => {\n    if (\n      lastRequestType === LogsLastRequestEnum.LOAD_MORE &&\n      visibleItemsRange.current\n    ) {\n      listRef.current?.scrollToItem?.(\n        visibleItemsRange.current?.[0] + updatedLogsCount,\n        'start',\n      );\n      setLastRequestType(LogsLastRequestEnum.DEFAULT);\n    } else if (\n      lastRequestType === LogsLastRequestEnum.LIVE_UPDATE &&\n      visibleItemsRange.current?.[1] + updatedLogsCount >=\n        dataRef.current?.length - 1\n    ) {\n      if (!_.isEmpty(keysList)) {\n        listRef.current?.scrollToItem?.(dataRef.current?.length, 'end');\n      }\n    } else if (lastRequestType === LogsLastRequestEnum.DEFAULT) {\n      if (!_.isEmpty(keysList)) {\n        listRef.current?.scrollToItem?.(dataRef.current?.length, 'end');\n      }\n    } else {\n      listRef.current?.scrollToItem?.(\n        visibleItemsRange.current?.[0] ?? 0,\n        'start',\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dataRef.current?.length, keysList]);\n\n  React.useEffect(() => {\n    if (\n      lastRequestType === LogsLastRequestEnum.DEFAULT &&\n      parentHeight &&\n      parentWidth\n    ) {\n      if (!_.isEmpty(keysList)) {\n        listRef.current?.scrollToItem?.(visibleItemsRange.current[0], 'start');\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [parentHeight, parentWidth]);\n\n  useResizeObserver(() => {\n    if (logsContainerRef.current) {\n      setParentHeight(logsContainerRef.current.offsetHeight);\n      setParentWidth(logsContainerRef.current.offsetWidth);\n    }\n  }, logsContainerRef);\n\n  return (\n    <ErrorBoundary>\n      <BusyLoaderWrapper\n        isLoading={\n          isRunLogsLoading && lastRequestType === LogsLastRequestEnum.DEFAULT\n        }\n        className='runDetailParamsTabLoader'\n        height='100%'\n      >\n        {!_.isEmpty(runLogs) && !_.isEmpty(keysList) ? (\n          <div className='RunDetailLogsTabWrapper'>\n            <div className='RunDetailLogsTab'>\n              <div className='Logs' ref={logsContainerRef}>\n                <div className='Logs__wrapper'>\n                  <List\n                    ref={listRef}\n                    key={`${parentHeight}${parentWidth}`}\n                    height={logsContainerRef.current?.offsetHeight || 100}\n                    itemCount={dataRef.current?.length + 1}\n                    itemSize={() => SINGLE_LINE_HEIGHT}\n                    width={'100%'}\n                    overscanCount={1000}\n                    initialScrollOffset={\n                      scrollOffsetRef.current ?? dataRef.current?.length * 15\n                    }\n                    onItemsRendered={(props) => {\n                      visibleItemsRange.current = [\n                        props.visibleStartIndex,\n                        props.visibleStopIndex,\n                      ];\n                    }}\n                    itemData={{\n                      logsList: dataRef.current,\n                    }}\n                    onScroll={onScroll}\n                  >\n                    {LogRow}\n                  </List>\n                  <div\n                    className={classNames('overlay', {\n                      loading:\n                        isRunLogsLoading &&\n                        lastRequestType === LogsLastRequestEnum.LOAD_MORE,\n                    })}\n                  >\n                    <CircularProgress\n                      size={24}\n                      value={75}\n                      thickness={4}\n                      color='primary'\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <IllustrationBlock\n            size='xLarge'\n            className='runDetailParamsTabLoader'\n            title='No Logs'\n          />\n        )}\n      </BusyLoaderWrapper>\n    </ErrorBoundary>\n  );\n}\n\nRunLogsTab.displayName = 'RunLogsTab';\n\nexport default React.memo(RunLogsTab);\n","import RunLogsTab from './RunLogsTab';\n\nexport default RunLogsTab;\n"],"sourceRoot":""}