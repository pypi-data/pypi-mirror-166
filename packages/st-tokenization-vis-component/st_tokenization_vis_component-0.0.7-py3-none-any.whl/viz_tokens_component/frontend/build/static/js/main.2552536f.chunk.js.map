{"version":3,"sources":["TokenisationVisComponent.tsx","index.tsx"],"names":["TokenisationVisComponent","render","data","props","args","isPOS","common","items","theme","Object","keys","Card","text","Header","ListGroup","variant","map","item","Item","key","sentenceID","Row","Col","md","Button","size","className","disabled","Badge","length","token","index","includes","tuple","Stack","gap","bg","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"iUAuBMA,E,4MACGC,OAAS,WAGd,IAAMC,EAAO,EAAKC,MAAMC,KAAX,KACPC,EAAQ,EAAKF,MAAMC,KAAX,QACRE,EAAS,EAAKH,MAAMC,KAAX,OAGTG,GAFY,EAAKJ,MAAfK,MAEMC,OAAOC,KAAKR,IAI1B,OAAOG,EACL,kBAACM,EAAA,EAAD,CAAMC,KAAK,QACT,kBAACD,EAAA,EAAKE,OAAN,KACE,6CAEF,kBAACC,EAAA,EAAD,CAAWC,QAAQ,SAChBR,EAAMS,KAAI,SAACC,GAAD,OACT,kBAACH,EAAA,EAAUI,KAAX,CAAgBC,IAAKF,GACnB,4BAAKA,EAAL,MACCR,OAAOC,KAAKR,EAAKe,IAAOD,KAAI,SAACI,GAAD,OAC3B,kBAACC,EAAA,EAAD,CAAKF,IAAKC,GACR,kBAACE,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAD,CAAQC,KAAM,KAAMV,QAAQ,OAAOW,UAAU,MAAMC,UAAQ,GACxDP,EADH,KACgB,qCACd,qCACA,kBAACQ,EAAA,EAAD,KAAQ1B,EAAKe,GAAMG,GAAYS,UAGnC,kBAACP,EAAA,EAAD,KACGpB,EAAKe,GAAMG,GAAYJ,KAAI,SAACc,EAAaC,GAAd,OAC1B,kBAACP,EAAA,EAAD,CAAQC,KAAM,KAAMV,QAAST,EAAOc,GAAYY,SAASF,GAAO,OAAO,SAAUJ,UAAU,MAAMP,IAAKY,GACnGD,iBAWnB,kBAACnB,EAAA,EAAD,CAAMC,KAAK,QACT,kBAACD,EAAA,EAAKE,OAAN,KACE,uDAEF,kBAACC,EAAA,EAAD,CAAWC,QAAQ,SAChBR,EAAMS,KAAI,SAACC,GAAD,OACT,kBAACH,EAAA,EAAUI,KAAX,CAAgBC,IAAKF,GACnB,4BAAKA,EAAL,MACCR,OAAOC,KAAKR,EAAKe,IAAOD,KAAI,SAACI,GAAD,OAC3B,kBAACC,EAAA,EAAD,CAAKF,IAAOC,GACV,kBAACE,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAD,CAAQT,QAAQ,OAAOW,UAAU,MAAMC,UAAQ,GAC5CP,EADH,KACgB,qCACd,qCACA,kBAACQ,EAAA,EAAD,KAAQ1B,EAAKe,GAAMG,GAAYS,UAGnC,kBAACP,EAAA,EAAD,KACCpB,EAAKe,GAAMG,GAAYJ,KAAI,SAACiB,EAAwBF,GAAzB,OAC9B,kBAACP,EAAA,EAAD,CAAQC,KAAM,KAAMV,QAAQ,OAAOW,UAAU,MAAMP,IAAKY,GACtD,kBAACG,EAAA,EAAD,CAAOC,IAAK,GACV,6BAAMF,EAAM,IACZ,kBAACL,EAAA,EAAD,CAAOF,UAAU,SAASU,GAAG,UAC1BH,EAAM,qB,yBApEUI,KA0FxBC,cAAwBtC,GC7GvCuC,IAAStC,OACP,kBAAC,IAAMuC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.2552536f.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport Button from \"react-bootstrap/Button\"\n\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Card from \"react-bootstrap/Card\"\nimport ListGroup from \"react-bootstrap/ListGroup\"\nimport Badge from \"react-bootstrap/Badge\"\nimport Stack from \"react-bootstrap/Stack\"\n\ninterface stringArrayDict{\n  [index: string]: Array<string>\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass TokenisationVisComponent extends StreamlitComponentBase<stringArrayDict> {\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const data = this.props.args[\"data\"]\n    const isPOS = this.props.args[\"isToken\"]\n    const common = this.props.args[\"common\"]\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n    const items = Object.keys(data)\n  \n    // getting unique tokens\n    \n    return isPOS ? (\n      <Card text=\"dark\">\n        <Card.Header>\n          <h5>Tokenization</h5>\n        </Card.Header>\n        <ListGroup variant=\"flush\">\n          {items.map((item: string) => (\n            <ListGroup.Item key={item}>\n              <h5>{item} :</h5>\n              {Object.keys(data[item]).map((sentenceID: string) => (\n                <Row key={sentenceID}>\n                  <Col md={1}>\n                    <Button size={\"sm\"} variant=\"dark\" className=\"m-1\" disabled>\n                      {sentenceID}. <></>\n                      <></>\n                      <Badge>{data[item][sentenceID].length}</Badge>\n                    </Button>\n                  </Col>\n                  <Col>\n                    {data[item][sentenceID].map((token:string,index:number) => (\n                      <Button size={\"sm\"} variant={common[sentenceID].includes(token)?\"info\":\"danger\"} className=\"m-1\" key={index}>\n                        {token}\n                      </Button>\n                    ))}\n                  </Col>\n                </Row>\n              ))}\n            </ListGroup.Item>\n          ))}\n        </ListGroup>\n      </Card>\n    ) : (\n      <Card text=\"dark\">\n        <Card.Header>\n          <h4>Part-Of-Speech Tagging</h4>\n        </Card.Header>\n        <ListGroup variant=\"flush\">\n          {items.map((item: string) => (\n            <ListGroup.Item key={item} >\n              <h5>{item} :</h5>\n              {Object.keys(data[item]).map((sentenceID: string) => (\n                <Row key = {sentenceID}>\n                  <Col md={1}>\n                    <Button variant=\"dark\" className=\"m-1\" disabled>\n                      {sentenceID}. <></>\n                      <></>\n                      <Badge>{data[item][sentenceID].length}</Badge>\n                    </Button>\n                  </Col>\n                  <Col>\n                  {data[item][sentenceID].map((tuple: [string, string],index:number) => (\n                <Button size={\"sm\"} variant=\"info\" className=\"m-1\" key={index}>\n                  <Stack gap={1}>\n                    <div>{tuple[0]}</div>\n                    <Badge className=\"border\" bg=\"danger\">\n                      {tuple[1]}\n                    </Badge>\n                  </Stack>\n                </Button>\n              ))}\n                  </Col>\n                </Row>\n              ))}\n\n            </ListGroup.Item>\n          ))}\n        </ListGroup>\n      </Card>\n    )\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(TokenisationVisComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport TokenisationVisComponent from \"./TokenisationVisComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <TokenisationVisComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}