{"version":3,"sources":["MyComponent.tsx","index.tsx"],"names":["MyRoughNotation","props","_onMouseClick","index","onMouseClick","setState","is_selected","state","is_hovering","this","value","index_is_selected","onMouseEnter","onMouseLeave","rest","_index_is_selected","type","onClick","show","React","Component","MyComponent","numClicks","isFocused","get_is_selected","render","name","args","theme","style","borderStyling","primaryColor","border","outline","values","animate","strokeWidth","iterations","onClicked","map","i","prevState","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"6WAeMA,E,kDACJ,WAAYC,GAAY,IAAD,8BACrB,cAAMA,IAGAC,cAAgB,SAACC,EAAYC,GAEnC,EAAKC,SAAS,CAAEC,aAAa,IAC7BF,EAAaD,IALb,EAAKI,MAAQ,CAAEC,aAAa,EAAOF,aAAc,GAF5B,E,0CASvB,WAAU,IAAD,OACDL,EAAYQ,KAAKR,MACjBO,EAAcC,KAAKF,MAAMC,YAEtBE,EAOLT,EAPFS,MACOP,EAMLF,EANFE,MACmBQ,EAKjBV,EALFU,kBAGcP,GAEZH,EAJFW,aAIEX,EAHFY,aAGEZ,EAFFG,cACGU,EAPL,YAQIb,EARJ,GAUMc,EAAqBJ,KAAqBR,EAChD,OAAQ,8BACN,kBAAC,IAAD,iBAAmBW,EAAnB,CAAyBE,KAAK,YAC5BJ,aAAc,kBAAM,EAAKP,SAAS,CAAEG,aAAa,KACjDK,aAAc,kBAAM,EAAKR,SAAS,CAAEG,aAAa,KACjDS,QAAS,kBAAM,EAAKf,cAAcC,EAAOC,IACzCc,KAAMH,GAAsBP,IAC3BE,GANG,c,GAxBkBS,IAAMC,WAqC9BC,E,4MACGd,MAAQ,CAAEe,UAAW,EAAGC,WAAW,EAAOf,aAAc,EAAIF,aAAc,G,EACzEkB,gBAAkB,WACxB,OAAO,EAAKjB,MAAMD,a,EAEbmB,OAAS,WAEd,IAAMC,EAAO,EAAKzB,MAAM0B,KAAX,KAKLC,EAAU,EAAK3B,MAAf2B,MACFC,EAA6B,GAInC,GAAID,EAAO,CAGT,IAAME,EAAa,oBACjB,EAAKvB,MAAMgB,UAAYK,EAAMG,aAAe,QAE9CF,EAAMG,OAASF,EACfD,EAAMI,QAAUH,EAIlB,IAAMI,EAAcR,EACdzB,EAAQ,CACZkC,SAAS,EACTC,YAAa,GACbC,WAAW,EACXjC,aAAc,EAAKkC,WAYrB,OAAOJ,EAAOK,KARD,SAAC7B,EAAeP,GAE3B,IAAMW,EAAI,aACRJ,MAAOA,EAAOP,MAAOA,EAAOQ,kBAAmB,kBAAM,EAAKa,oBAAuBvB,GAEnF,OACE,kBAAC,EAAoBa,O,EAKnBwB,UAAY,SAACE,GACnB,EAAKnC,UACH,SAAAoC,GAAS,MAAK,CAAEnC,YAAakC,MAC7B,kBAAME,IAAUC,kBAAkB,EAAKpC,MAAMD,iB,yBAnDzBsC,KA6DXC,cAAwBxB,GC7GvCyB,IAASrB,OACP,kBAAC,IAAMsB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.f894e524.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport { RoughNotation } from \"react-rough-notation\";\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n  is_hovering: number\n  is_selected: number\n}\n\nclass MyRoughNotation extends React.Component<{}, { is_hovering: boolean, is_selected: boolean}> {\n  constructor(props:any) {\n    super(props);\n    this.state = { is_hovering: false, is_selected : false };\n  }\n  private _onMouseClick = (index: any, onMouseClick: any) => {\n\n    this.setState({ is_selected: true });\n    onMouseClick(index);\n  }\n  render() {\n    const props:any = this.props;\n    const is_hovering = this.state.is_hovering;\n    const {\n      value: value,\n      index: index,\n      index_is_selected: index_is_selected,\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave,\n      onMouseClick: onMouseClick,\n      ...rest\n    } = props;\n    \n    const _index_is_selected = index_is_selected()==index;\n    return (<span>\n      <RoughNotation {...rest} type='underline'\n        onMouseEnter={() => this.setState({ is_hovering: true })}\n        onMouseLeave={() => this.setState({ is_hovering: false })}\n        onClick={() => this._onMouseClick(index, onMouseClick)}\n        show={_index_is_selected || is_hovering} >\n        {value}\n      </RoughNotation> &nbsp; </span>\n    )   \n  }    \n}\n\n\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false, is_hovering: -1 , is_selected: -1 }; \n  private get_is_selected = () => {\n    return this.state.is_selected;\n  }\n  public render = (): ReactNode => {\n\n    const name = this.props.args[\"name\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n    \n    \n    const values: any = name;\n    const props = {\n      animate: false,\n      strokeWidth: 10,\n      iterations:5,\n      onMouseClick: this.onClicked,\n      \n\n    };\n    const func = (value: string, index: any) => \n    {\n      const rest = {\n        value: value, index: index, index_is_selected: () => this.get_is_selected() , ...props \n      };\n      return (\n        <MyRoughNotation {...rest} />\n    )}\n    return values.map(func);\n  }\n\n  private onClicked = (i: any) => {\n    this.setState(\n      prevState => ({ is_selected: i }),\n      () => Streamlit.setComponentValue(this.state.is_selected)\n    )\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}