{"version":3,"file":"lib_index_js.5a2c501d9df5bca573cc.js","mappings":";;;;;;;;;;;;;;;;;AAA+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AClCiD;AACc;AACD;AACR;AACf;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yEAAgB,EAAE,2DAAS,EAAE,wEAAmB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,qDAAqD,iBAAiB;AACtE,qDAAqD,sDAAsD;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,oDAAU;AACxC,2CAA2C,+CAA+C;AAC1F;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,kBAAkB,gEAAS;AAC3B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,QAAQ,oDAAU;AAClB;AACA;AACA,SAAS;AACT;AACA,qFAAqF,OAAO;AAC5F,SAAS;AACT;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://wooty_woot/./lib/handler.js","webpack://wooty_woot/./lib/index.js"],"sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'wooty-woot', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { ILauncher } from '@jupyterlab/launcher';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { imageIcon } from '@jupyterlab/ui-components';\nimport { requestAPI } from './handler';\n/**\n * Initialization data for the wooty_woot extension.\n */\nconst plugin = {\n    id: 'wooty_woot:plugin',\n    autoStart: true,\n    optional: [ISettingRegistry, ILauncher, IFileBrowserFactory],\n    activate: (app, settingRegistry, launcher, fileBrowser) => {\n        console.log('JupyterLab extension wooty_woot is activated!');\n        // Load the settings from schema/plugin.json\n        // This can include adding commands to a context menu\n        // or to the main or other menu\n        if (settingRegistry) {\n            settingRegistry\n                .load(plugin.id)\n                .then(settings => {\n                console.log('wooty_woot settings loaded:', settings.composite);\n            })\n                .catch(reason => {\n                console.error('Failed to load settings for wooty_woot.', reason);\n            });\n        }\n        app.commands.addCommand('wooty_woot:open', {\n            // code to run when this command is executed\n            execute: () => {\n                // const widget = new TutorialWidget();\n                // const main = new MainAreaWidget({ content: widget });\n                // const button = new ToolbarButton({icon: refreshIcon, onClick: () => widget.load_image()});\n                // main.title.label = 'Tutorial Widget';\n                // main.title.icon = imageIcon;\n                // main.title.caption = widget.title.label;\n                // // TODO: add a button to refresh image\n                // main.toolbar.addItem('Refresh', button);\n                // app.shell.add(main, 'main');\n                const reply = requestAPI('viewer', {\n                    body: JSON.stringify({ 'path': fileBrowser.defaultBrowser.model.path }),\n                    method: 'POST'\n                });\n                console.log(\"Aaaand I'm back\", reply);\n                // widget.make_a_file(fileBrowser.defaultBrowser.model.path);\n            },\n            icon: imageIcon,\n            label: 'Open Tutorial Widget'\n        });\n        // Add item to launcher\n        if (launcher) {\n            launcher.add({\n                command: 'wooty_woot:open',\n                category: 'Moo'\n            });\n        }\n        requestAPI('viewer')\n            .then(data => {\n            console.log(data);\n        })\n            .catch(reason => {\n            console.error(`The wooty_woot server extension appears to be missing.\\n${reason}`);\n        });\n    }\n};\nexport default plugin;\n"],"names":[],"sourceRoot":""}