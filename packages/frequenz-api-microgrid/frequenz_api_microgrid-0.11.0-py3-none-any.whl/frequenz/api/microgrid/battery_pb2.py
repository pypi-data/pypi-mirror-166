# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: frequenz/api/microgrid/battery.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from frequenz.api.microgrid import common_pb2 as frequenz_dot_api_dot_microgrid_dot_common__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n$frequenz/api/microgrid/battery.proto\x12\x1e\x66requenz.api.microgrid.battery\x1a#frequenz/api/microgrid/common.proto\"\x91\x01\n\x05State\x12G\n\x0f\x63omponent_state\x18\x01 \x01(\x0e\x32..frequenz.api.microgrid.battery.ComponentState\x12?\n\x0brelay_state\x18\x02 \x01(\x0e\x32*.frequenz.api.microgrid.battery.RelayState\"\x87\x01\n\x05\x45rror\x12\x37\n\x04\x63ode\x18\x01 \x01(\x0e\x32).frequenz.api.microgrid.battery.ErrorCode\x12\x38\n\x05level\x18\x02 \x01(\x0e\x32).frequenz.api.microgrid.common.ErrorLevel\x12\x0b\n\x03msg\x18\x03 \x01(\t\"\xff\x01\n\x04\x44\x61ta\x12-\n\x02\x64\x63\x18\x01 \x01(\x0b\x32!.frequenz.api.microgrid.common.DC\x12=\n\x03soc\x18\x02 \x01(\x0b\x32\x30.frequenz.api.microgrid.common.MetricAggregation\x12\x45\n\x0btemperature\x18\x03 \x01(\x0b\x32\x30.frequenz.api.microgrid.common.MetricAggregation\x12\x42\n\x08humidity\x18\x04 \x01(\x0b\x32\x30.frequenz.api.microgrid.common.MetricAggregation\"4\n\nProperties\x12\x14\n\x0c\x66irmware_ver\x18\x01 \x01(\t\x12\x10\n\x08\x63\x61pacity\x18\x02 \x01(\x02\"\xea\x01\n\x07\x42\x61ttery\x12>\n\nproperties\x18\x01 \x01(\x0b\x32*.frequenz.api.microgrid.battery.Properties\x12\x34\n\x05state\x18\x02 \x01(\x0b\x32%.frequenz.api.microgrid.battery.State\x12\x35\n\x06\x65rrors\x18\x03 \x03(\x0b\x32%.frequenz.api.microgrid.battery.Error\x12\x32\n\x04\x64\x61ta\x18\x04 \x01(\x0b\x32$.frequenz.api.microgrid.battery.Data*Q\n\x04Type\x12\x14\n\x10TYPE_UNSPECIFIED\x10\x00\x12\x0f\n\x0bTYPE_LI_ION\x10\x01\x12\x11\n\rTYPE_LI_FE_PO\x10\x02\x12\x0f\n\x0bTYPE_NA_ION\x10\x03*\xda\x01\n\x0e\x43omponentState\x12\x1f\n\x1b\x43OMPONENT_STATE_UNSPECIFIED\x10\x00\x12\x17\n\x13\x43OMPONENT_STATE_OFF\x10\x01\x12\x18\n\x14\x43OMPONENT_STATE_IDLE\x10\x02\x12\x1c\n\x18\x43OMPONENT_STATE_CHARGING\x10\x03\x12\x1f\n\x1b\x43OMPONENT_STATE_DISCHARGING\x10\x04\x12\x19\n\x15\x43OMPONENT_STATE_ERROR\x10\x05\x12\x1a\n\x16\x43OMPONENT_STATE_LOCKED\x10\x06*\xa5\x01\n\nRelayState\x12\x1b\n\x17RELAY_STATE_UNSPECIFIED\x10\x00\x12\x16\n\x12RELAY_STATE_OPENED\x10\x01\x12\x1b\n\x17RELAY_STATE_PRECHARGING\x10\x02\x12\x16\n\x12RELAY_STATE_CLOSED\x10\x03\x12\x15\n\x11RELAY_STATE_ERROR\x10\x04\x12\x16\n\x12RELAY_STATE_LOCKED\x10\x05*\xf2\x05\n\tErrorCode\x12\x1a\n\x16\x45RROR_CODE_UNSPECIFIED\x10\x00\x12\"\n\x1e\x45RROR_CODE_HIGH_CURRENT_CHARGE\x10\x01\x12%\n!ERROR_CODE_HIGH_CURRENT_DISCHARGE\x10\x02\x12\x1b\n\x17\x45RROR_CODE_HIGH_VOLTAGE\x10\x03\x12\x1a\n\x16\x45RROR_CODE_LOW_VOLTAGE\x10\x04\x12\x1f\n\x1b\x45RROR_CODE_HIGH_TEMPERATURE\x10\x05\x12\x1e\n\x1a\x45RROR_CODE_LOW_TEMPERATURE\x10\x06\x12\x1c\n\x18\x45RROR_CODE_HIGH_HUMIDITY\x10\x07\x12\"\n\x1e\x45RROR_CODE_EXCEEDED_SOP_CHARGE\x10\x08\x12%\n!ERROR_CODE_EXCEEDED_SOP_DISCHARGE\x10\t\x12\x1f\n\x1b\x45RROR_CODE_SYSTEM_IMBALANCE\x10\n\x12\x16\n\x12\x45RROR_CODE_LOW_SOH\x10\x0b\x12\x1a\n\x16\x45RROR_CODE_BLOCK_ERROR\x10\x0c\x12\x1f\n\x1b\x45RROR_CODE_CONTROLLER_ERROR\x10\r\x12\x1a\n\x16\x45RROR_CODE_RELAY_ERROR\x10\x0e\x12(\n$ERROR_CODE_RELAY_CYCLE_LIMIT_REACHED\x10\x0f\x12\x19\n\x15\x45RROR_CODE_FUSE_ERROR\x10\x10\x12*\n&ERROR_CODE_EXTERNAL_POWER_SWITCH_ERROR\x10\x11\x12\x1e\n\x1a\x45RROR_CODE_PRECHARGE_ERROR\x10\x12\x12(\n$ERROR_CODE_SYSTEM_PLAUSIBILITY_ERROR\x10\x13\x12+\n\'ERROR_CODE_SYSTEM_UNDERVOLTAGE_SHUTDOWN\x10\x14\x12!\n\x1d\x45RROR_CODE_CALIBRATION_NEEDED\x10\x15\x62\x06proto3')

_TYPE = DESCRIPTOR.enum_types_by_name['Type']
Type = enum_type_wrapper.EnumTypeWrapper(_TYPE)
_COMPONENTSTATE = DESCRIPTOR.enum_types_by_name['ComponentState']
ComponentState = enum_type_wrapper.EnumTypeWrapper(_COMPONENTSTATE)
_RELAYSTATE = DESCRIPTOR.enum_types_by_name['RelayState']
RelayState = enum_type_wrapper.EnumTypeWrapper(_RELAYSTATE)
_ERRORCODE = DESCRIPTOR.enum_types_by_name['ErrorCode']
ErrorCode = enum_type_wrapper.EnumTypeWrapper(_ERRORCODE)
TYPE_UNSPECIFIED = 0
TYPE_LI_ION = 1
TYPE_LI_FE_PO = 2
TYPE_NA_ION = 3
COMPONENT_STATE_UNSPECIFIED = 0
COMPONENT_STATE_OFF = 1
COMPONENT_STATE_IDLE = 2
COMPONENT_STATE_CHARGING = 3
COMPONENT_STATE_DISCHARGING = 4
COMPONENT_STATE_ERROR = 5
COMPONENT_STATE_LOCKED = 6
RELAY_STATE_UNSPECIFIED = 0
RELAY_STATE_OPENED = 1
RELAY_STATE_PRECHARGING = 2
RELAY_STATE_CLOSED = 3
RELAY_STATE_ERROR = 4
RELAY_STATE_LOCKED = 5
ERROR_CODE_UNSPECIFIED = 0
ERROR_CODE_HIGH_CURRENT_CHARGE = 1
ERROR_CODE_HIGH_CURRENT_DISCHARGE = 2
ERROR_CODE_HIGH_VOLTAGE = 3
ERROR_CODE_LOW_VOLTAGE = 4
ERROR_CODE_HIGH_TEMPERATURE = 5
ERROR_CODE_LOW_TEMPERATURE = 6
ERROR_CODE_HIGH_HUMIDITY = 7
ERROR_CODE_EXCEEDED_SOP_CHARGE = 8
ERROR_CODE_EXCEEDED_SOP_DISCHARGE = 9
ERROR_CODE_SYSTEM_IMBALANCE = 10
ERROR_CODE_LOW_SOH = 11
ERROR_CODE_BLOCK_ERROR = 12
ERROR_CODE_CONTROLLER_ERROR = 13
ERROR_CODE_RELAY_ERROR = 14
ERROR_CODE_RELAY_CYCLE_LIMIT_REACHED = 15
ERROR_CODE_FUSE_ERROR = 16
ERROR_CODE_EXTERNAL_POWER_SWITCH_ERROR = 17
ERROR_CODE_PRECHARGE_ERROR = 18
ERROR_CODE_SYSTEM_PLAUSIBILITY_ERROR = 19
ERROR_CODE_SYSTEM_UNDERVOLTAGE_SHUTDOWN = 20
ERROR_CODE_CALIBRATION_NEEDED = 21


_STATE = DESCRIPTOR.message_types_by_name['State']
_ERROR = DESCRIPTOR.message_types_by_name['Error']
_DATA = DESCRIPTOR.message_types_by_name['Data']
_PROPERTIES = DESCRIPTOR.message_types_by_name['Properties']
_BATTERY = DESCRIPTOR.message_types_by_name['Battery']
State = _reflection.GeneratedProtocolMessageType('State', (_message.Message,), {
  'DESCRIPTOR' : _STATE,
  '__module__' : 'frequenz.api.microgrid.battery_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.battery.State)
  })
_sym_db.RegisterMessage(State)

Error = _reflection.GeneratedProtocolMessageType('Error', (_message.Message,), {
  'DESCRIPTOR' : _ERROR,
  '__module__' : 'frequenz.api.microgrid.battery_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.battery.Error)
  })
_sym_db.RegisterMessage(Error)

Data = _reflection.GeneratedProtocolMessageType('Data', (_message.Message,), {
  'DESCRIPTOR' : _DATA,
  '__module__' : 'frequenz.api.microgrid.battery_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.battery.Data)
  })
_sym_db.RegisterMessage(Data)

Properties = _reflection.GeneratedProtocolMessageType('Properties', (_message.Message,), {
  'DESCRIPTOR' : _PROPERTIES,
  '__module__' : 'frequenz.api.microgrid.battery_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.battery.Properties)
  })
_sym_db.RegisterMessage(Properties)

Battery = _reflection.GeneratedProtocolMessageType('Battery', (_message.Message,), {
  'DESCRIPTOR' : _BATTERY,
  '__module__' : 'frequenz.api.microgrid.battery_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.battery.Battery)
  })
_sym_db.RegisterMessage(Battery)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _TYPE._serialized_start=944
  _TYPE._serialized_end=1025
  _COMPONENTSTATE._serialized_start=1028
  _COMPONENTSTATE._serialized_end=1246
  _RELAYSTATE._serialized_start=1249
  _RELAYSTATE._serialized_end=1414
  _ERRORCODE._serialized_start=1417
  _ERRORCODE._serialized_end=2171
  _STATE._serialized_start=110
  _STATE._serialized_end=255
  _ERROR._serialized_start=258
  _ERROR._serialized_end=393
  _DATA._serialized_start=396
  _DATA._serialized_end=651
  _PROPERTIES._serialized_start=653
  _PROPERTIES._serialized_end=705
  _BATTERY._serialized_start=708
  _BATTERY._serialized_end=942
# @@protoc_insertion_point(module_scope)
