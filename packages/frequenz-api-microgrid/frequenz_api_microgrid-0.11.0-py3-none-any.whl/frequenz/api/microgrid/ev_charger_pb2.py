# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: frequenz/api/microgrid/ev_charger.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from frequenz.api.microgrid import common_pb2 as frequenz_dot_api_dot_microgrid_dot_common__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\'frequenz/api/microgrid/ev_charger.proto\x12!frequenz.api.microgrid.ev_charger\x1a#frequenz/api/microgrid/common.proto\"\x97\x01\n\x05State\x12J\n\x0f\x63omponent_state\x18\x01 \x01(\x0e\x32\x31.frequenz.api.microgrid.ev_charger.ComponentState\x12\x42\n\x0b\x63\x61\x62le_state\x18\x02 \x01(\x0e\x32-.frequenz.api.microgrid.ev_charger.CableState\"\x8a\x01\n\x05\x45rror\x12:\n\x04\x63ode\x18\x01 \x01(\x0e\x32,.frequenz.api.microgrid.ev_charger.ErrorCode\x12\x38\n\x05level\x18\x02 \x01(\x0e\x32).frequenz.api.microgrid.common.ErrorLevel\x12\x0b\n\x03msg\x18\x03 \x01(\t\"\xa0\x01\n\x04\x44\x61ta\x12-\n\x02\x64\x63\x18\x01 \x01(\x0b\x32!.frequenz.api.microgrid.common.DC\x12-\n\x02\x61\x63\x18\x02 \x01(\x0b\x32!.frequenz.api.microgrid.common.AC\x12:\n\x0btemperature\x18\x03 \x01(\x0b\x32%.frequenz.api.microgrid.common.Metric\"\"\n\nProperties\x12\x14\n\x0c\x66irmware_ver\x18\x01 \x01(\t\"\xf8\x01\n\tEVCharger\x12\x41\n\nproperties\x18\x01 \x01(\x0b\x32-.frequenz.api.microgrid.ev_charger.Properties\x12\x37\n\x05state\x18\x02 \x01(\x0b\x32(.frequenz.api.microgrid.ev_charger.State\x12\x38\n\x06\x65rrors\x18\x03 \x03(\x0b\x32(.frequenz.api.microgrid.ev_charger.Error\x12\x35\n\x04\x64\x61ta\x18\x04 \x01(\x0b\x32\'.frequenz.api.microgrid.ev_charger.Data*G\n\x04Type\x12\x14\n\x10TYPE_UNSPECIFIED\x10\x00\x12\x0b\n\x07TYPE_AC\x10\x01\x12\x0b\n\x07TYPE_DC\x10\x02\x12\x0f\n\x0bTYPE_HYBRID\x10\x03*\xb0\x02\n\x0e\x43omponentState\x12\x1f\n\x1b\x43OMPONENT_STATE_UNSPECIFIED\x10\x00\x12\x1c\n\x18\x43OMPONENT_STATE_STARTING\x10\x01\x12\x1d\n\x19\x43OMPONENT_STATE_NOT_READY\x10\x02\x12\x19\n\x15\x43OMPONENT_STATE_READY\x10\x03\x12\x1c\n\x18\x43OMPONENT_STATE_CHARGING\x10\x04\x12\x1f\n\x1b\x43OMPONENT_STATE_DISCHARGING\x10\x05\x12\x19\n\x15\x43OMPONENT_STATE_ERROR\x10\x06\x12*\n&COMPONENT_STATE_AUTHORIZATION_REJECTED\x10\x07\x12\x1f\n\x1b\x43OMPONENT_STATE_INTERRUPTED\x10\x08*\xce\x01\n\nCableState\x12\x1b\n\x17\x43\x41\x42LE_STATE_UNSPECIFIED\x10\x00\x12\x19\n\x15\x43\x41\x42LE_STATE_UNPLUGGED\x10\x01\x12(\n$CABLE_STATE_CHARGING_STATION_PLUGGED\x10\x02\x12\'\n#CABLE_STATE_CHARGING_STATION_LOCKED\x10\x03\x12\x1a\n\x16\x43\x41\x42LE_STATE_EV_PLUGGED\x10\x04\x12\x19\n\x15\x43\x41\x42LE_STATE_EV_LOCKED\x10\x05*\xcd\x04\n\tErrorCode\x12\x1a\n\x16\x45RROR_CODE_UNSPECIFIED\x10\x00\x12\x1e\n\x1a\x45RROR_CODE_SWITCH_ON_FAULT\x10\x01\x12\x1b\n\x17\x45RROR_CODE_UNDERVOLTAGE\x10\x02\x12\x1a\n\x16\x45RROR_CODE_OVERVOLTAGE\x10\x03\x12\x1a\n\x16\x45RROR_CODE_OVERCURRENT\x10\x04\x12\x1e\n\x1a\x45RROR_CODE_OVERTEMPERATURE\x10\x05\x12\'\n#ERROR_CODE_UNEXPECTED_PILOT_FAILURE\x10\x06\x12\x1c\n\x18\x45RROR_CODE_FAULT_CURRENT\x10\x07\x12\x1c\n\x18\x45RROR_CODE_SHORT_CIRCUIT\x10\x08\x12\x1b\n\x17\x45RROR_CODE_CONFIG_ERROR\x10\t\x12\x30\n,ERROR_CODE_ILLEGAL_COMPONENT_STATE_REQUESTED\x10\n\x12$\n ERROR_CODE_HARDWARE_INACCESSIBLE\x10\x0b\x12\x17\n\x13\x45RROR_CODE_INTERNAL\x10\x0c\x12\x19\n\x15\x45RROR_CODE_CABLE_LOST\x10\r\x12 \n\x1c\x45RROR_CODE_CABLE_LOCK_FAILED\x10\x0e\x12\x1c\n\x18\x45RROR_CODE_CABLE_INVALID\x10\x0f\x12\x1b\n\x17\x45RROR_CODE_PLUG_UNKNOWN\x10\x10\x12$\n ERROR_CODE_CONSUMER_NON_STANDARD\x10\x11\x62\x06proto3')

_TYPE = DESCRIPTOR.enum_types_by_name['Type']
Type = enum_type_wrapper.EnumTypeWrapper(_TYPE)
_COMPONENTSTATE = DESCRIPTOR.enum_types_by_name['ComponentState']
ComponentState = enum_type_wrapper.EnumTypeWrapper(_COMPONENTSTATE)
_CABLESTATE = DESCRIPTOR.enum_types_by_name['CableState']
CableState = enum_type_wrapper.EnumTypeWrapper(_CABLESTATE)
_ERRORCODE = DESCRIPTOR.enum_types_by_name['ErrorCode']
ErrorCode = enum_type_wrapper.EnumTypeWrapper(_ERRORCODE)
TYPE_UNSPECIFIED = 0
TYPE_AC = 1
TYPE_DC = 2
TYPE_HYBRID = 3
COMPONENT_STATE_UNSPECIFIED = 0
COMPONENT_STATE_STARTING = 1
COMPONENT_STATE_NOT_READY = 2
COMPONENT_STATE_READY = 3
COMPONENT_STATE_CHARGING = 4
COMPONENT_STATE_DISCHARGING = 5
COMPONENT_STATE_ERROR = 6
COMPONENT_STATE_AUTHORIZATION_REJECTED = 7
COMPONENT_STATE_INTERRUPTED = 8
CABLE_STATE_UNSPECIFIED = 0
CABLE_STATE_UNPLUGGED = 1
CABLE_STATE_CHARGING_STATION_PLUGGED = 2
CABLE_STATE_CHARGING_STATION_LOCKED = 3
CABLE_STATE_EV_PLUGGED = 4
CABLE_STATE_EV_LOCKED = 5
ERROR_CODE_UNSPECIFIED = 0
ERROR_CODE_SWITCH_ON_FAULT = 1
ERROR_CODE_UNDERVOLTAGE = 2
ERROR_CODE_OVERVOLTAGE = 3
ERROR_CODE_OVERCURRENT = 4
ERROR_CODE_OVERTEMPERATURE = 5
ERROR_CODE_UNEXPECTED_PILOT_FAILURE = 6
ERROR_CODE_FAULT_CURRENT = 7
ERROR_CODE_SHORT_CIRCUIT = 8
ERROR_CODE_CONFIG_ERROR = 9
ERROR_CODE_ILLEGAL_COMPONENT_STATE_REQUESTED = 10
ERROR_CODE_HARDWARE_INACCESSIBLE = 11
ERROR_CODE_INTERNAL = 12
ERROR_CODE_CABLE_LOST = 13
ERROR_CODE_CABLE_LOCK_FAILED = 14
ERROR_CODE_CABLE_INVALID = 15
ERROR_CODE_PLUG_UNKNOWN = 16
ERROR_CODE_CONSUMER_NON_STANDARD = 17


_STATE = DESCRIPTOR.message_types_by_name['State']
_ERROR = DESCRIPTOR.message_types_by_name['Error']
_DATA = DESCRIPTOR.message_types_by_name['Data']
_PROPERTIES = DESCRIPTOR.message_types_by_name['Properties']
_EVCHARGER = DESCRIPTOR.message_types_by_name['EVCharger']
State = _reflection.GeneratedProtocolMessageType('State', (_message.Message,), {
  'DESCRIPTOR' : _STATE,
  '__module__' : 'frequenz.api.microgrid.ev_charger_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.ev_charger.State)
  })
_sym_db.RegisterMessage(State)

Error = _reflection.GeneratedProtocolMessageType('Error', (_message.Message,), {
  'DESCRIPTOR' : _ERROR,
  '__module__' : 'frequenz.api.microgrid.ev_charger_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.ev_charger.Error)
  })
_sym_db.RegisterMessage(Error)

Data = _reflection.GeneratedProtocolMessageType('Data', (_message.Message,), {
  'DESCRIPTOR' : _DATA,
  '__module__' : 'frequenz.api.microgrid.ev_charger_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.ev_charger.Data)
  })
_sym_db.RegisterMessage(Data)

Properties = _reflection.GeneratedProtocolMessageType('Properties', (_message.Message,), {
  'DESCRIPTOR' : _PROPERTIES,
  '__module__' : 'frequenz.api.microgrid.ev_charger_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.ev_charger.Properties)
  })
_sym_db.RegisterMessage(Properties)

EVCharger = _reflection.GeneratedProtocolMessageType('EVCharger', (_message.Message,), {
  'DESCRIPTOR' : _EVCHARGER,
  '__module__' : 'frequenz.api.microgrid.ev_charger_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.ev_charger.EVCharger)
  })
_sym_db.RegisterMessage(EVCharger)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _TYPE._serialized_start=860
  _TYPE._serialized_end=931
  _COMPONENTSTATE._serialized_start=934
  _COMPONENTSTATE._serialized_end=1238
  _CABLESTATE._serialized_start=1241
  _CABLESTATE._serialized_end=1447
  _ERRORCODE._serialized_start=1450
  _ERRORCODE._serialized_end=2039
  _STATE._serialized_start=116
  _STATE._serialized_end=267
  _ERROR._serialized_start=270
  _ERROR._serialized_end=408
  _DATA._serialized_start=411
  _DATA._serialized_end=571
  _PROPERTIES._serialized_start=573
  _PROPERTIES._serialized_end=607
  _EVCHARGER._serialized_start=610
  _EVCHARGER._serialized_end=858
# @@protoc_insertion_point(module_scope)
