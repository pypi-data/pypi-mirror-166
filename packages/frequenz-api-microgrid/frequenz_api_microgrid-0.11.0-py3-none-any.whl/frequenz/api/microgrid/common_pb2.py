# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: frequenz/api/microgrid/common.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n#frequenz/api/microgrid/common.proto\x12\x1d\x66requenz.api.microgrid.common\"&\n\x06\x42ounds\x12\r\n\x05lower\x18\x01 \x01(\x02\x12\r\n\x05upper\x18\x02 \x01(\x02\"\xd3\x01\n\x06Metric\x12\r\n\x05value\x18\x01 \x01(\x02\x12;\n\x0crated_bounds\x18\x02 \x01(\x0b\x32%.frequenz.api.microgrid.common.Bounds\x12<\n\rsystem_bounds\x18\x03 \x01(\x0b\x32%.frequenz.api.microgrid.common.Bounds\x12?\n\x10\x63omponent_bounds\x18\x04 \x01(\x0b\x32%.frequenz.api.microgrid.common.Bounds\"\xa4\x02\n\x11MetricAggregation\x12\x0b\n\x03\x61vg\x18\x01 \x01(\x02\x12\x10\n\x03min\x18\x02 \x01(\x02H\x00\x88\x01\x01\x12\x10\n\x03max\x18\x03 \x01(\x02H\x01\x88\x01\x01\x12\x12\n\nraw_values\x18\x0c \x03(\x02\x12<\n\rsystem_bounds\x18\r \x01(\x0b\x32%.frequenz.api.microgrid.common.Bounds\x12?\n\x10\x63omponent_bounds\x18\x0e \x01(\x0b\x32%.frequenz.api.microgrid.common.Bounds\x12;\n\x0crated_bounds\x18\x0f \x01(\x0b\x32%.frequenz.api.microgrid.common.BoundsB\x06\n\x04_minB\x06\n\x04_max\"\xaa\x01\n\x02\x44\x43\x12\x36\n\x07voltage\x18\x01 \x01(\x0b\x32%.frequenz.api.microgrid.common.Metric\x12\x36\n\x07\x63urrent\x18\x02 \x01(\x0b\x32%.frequenz.api.microgrid.common.Metric\x12\x34\n\x05power\x18\x03 \x01(\x0b\x32%.frequenz.api.microgrid.common.Metric\"\xd1\x0f\n\x02\x41\x43\x12\x38\n\tfrequency\x18\x01 \x01(\x0b\x32%.frequenz.api.microgrid.common.Metric\x12\x36\n\x07\x63urrent\x18\x02 \x01(\x0b\x32%.frequenz.api.microgrid.common.Metric\x12=\n\x0epower_apparent\x18\x03 \x01(\x0b\x32%.frequenz.api.microgrid.common.Metric\x12;\n\x0cpower_active\x18\x04 \x01(\x0b\x32%.frequenz.api.microgrid.common.Metric\x12=\n\x0epower_reactive\x18\x05 \x01(\x0b\x32%.frequenz.api.microgrid.common.Metric\x12>\n\x0f\x65nergy_apparent\x18\x06 \x01(\x0b\x32%.frequenz.api.microgrid.common.Metric\x12\x45\n\renergy_active\x18\x07 \x01(\x0b\x32..frequenz.api.microgrid.common.AC.ActiveEnergy\x12I\n\x0f\x65nergy_reactive\x18\x08 \x01(\x0b\x32\x30.frequenz.api.microgrid.common.AC.ReactiveEnergy\x12K\n\x16harmonics_power_active\x18\t \x01(\x0b\x32+.frequenz.api.microgrid.common.AC.Harmonics\x12\x18\n\x10thd_power_active\x18\n \x01(\x02\x12:\n\x07phase_1\x18\x0b \x01(\x0b\x32).frequenz.api.microgrid.common.AC.ACPhase\x12:\n\x07phase_2\x18\x0c \x01(\x0b\x32).frequenz.api.microgrid.common.AC.ACPhase\x12:\n\x07phase_3\x18\r \x01(\x0b\x32).frequenz.api.microgrid.common.AC.ACPhase\x1a\xc6\x01\n\x0c\x41\x63tiveEnergy\x12\x35\n\x06\x65nergy\x18\x01 \x01(\x0b\x32%.frequenz.api.microgrid.common.Metric\x12>\n\x0f\x65nergy_consumed\x18\x02 \x01(\x0b\x32%.frequenz.api.microgrid.common.Metric\x12?\n\x10\x65nergy_delivered\x18\x03 \x01(\x0b\x32%.frequenz.api.microgrid.common.Metric\x1a\xca\x01\n\x0eReactiveEnergy\x12\x35\n\x06\x65nergy\x18\x01 \x01(\x0b\x32%.frequenz.api.microgrid.common.Metric\x12@\n\x11\x65nergy_capacitive\x18\x02 \x01(\x0b\x32%.frequenz.api.microgrid.common.Metric\x12?\n\x10\x65nergy_inductive\x18\x03 \x01(\x0b\x32%.frequenz.api.microgrid.common.Metric\x1a\xe9\x01\n\tHarmonics\x12\x12\n\nharmonic_1\x18\x01 \x01(\x02\x12\x12\n\nharmonic_2\x18\x02 \x01(\x02\x12\x12\n\nharmonic_3\x18\x03 \x01(\x02\x12\x12\n\nharmonic_4\x18\x04 \x01(\x02\x12\x12\n\nharmonic_5\x18\x05 \x01(\x02\x12\x12\n\nharmonic_6\x18\x06 \x01(\x02\x12\x12\n\nharmonic_7\x18\x07 \x01(\x02\x12\x12\n\nharmonic_8\x18\x08 \x01(\x02\x12\x12\n\nharmonic_9\x18\t \x01(\x02\x12\x13\n\x0bharmonic_10\x18\n \x01(\x02\x12\x13\n\x0bharmonic_11\x18\x0b \x01(\x02\x1a\xae\x04\n\x07\x41\x43Phase\x12\x36\n\x07voltage\x18\x01 \x01(\x0b\x32%.frequenz.api.microgrid.common.Metric\x12\x36\n\x07\x63urrent\x18\x02 \x01(\x0b\x32%.frequenz.api.microgrid.common.Metric\x12;\n\x0cpower_active\x18\x03 \x01(\x0b\x32%.frequenz.api.microgrid.common.Metric\x12=\n\x0epower_reactive\x18\x04 \x01(\x0b\x32%.frequenz.api.microgrid.common.Metric\x12>\n\x0f\x65nergy_apparent\x18\x05 \x01(\x0b\x32%.frequenz.api.microgrid.common.Metric\x12\x45\n\renergy_active\x18\x06 \x01(\x0b\x32..frequenz.api.microgrid.common.AC.ActiveEnergy\x12I\n\x0f\x65nergy_reactive\x18\x07 \x01(\x0b\x32\x30.frequenz.api.microgrid.common.AC.ReactiveEnergy\x12K\n\x16harmonics_power_active\x18\x08 \x01(\x0b\x32+.frequenz.api.microgrid.common.AC.Harmonics\x12\x18\n\x10thd_power_active\x18\t \x01(\x02*Y\n\nErrorLevel\x12\x1b\n\x17\x45RROR_LEVEL_UNSPECIFIED\x10\x00\x12\x14\n\x10\x45RROR_LEVEL_WARN\x10\x01\x12\x18\n\x14\x45RROR_LEVEL_CRITICAL\x10\x02\x62\x06proto3')

_ERRORLEVEL = DESCRIPTOR.enum_types_by_name['ErrorLevel']
ErrorLevel = enum_type_wrapper.EnumTypeWrapper(_ERRORLEVEL)
ERROR_LEVEL_UNSPECIFIED = 0
ERROR_LEVEL_WARN = 1
ERROR_LEVEL_CRITICAL = 2


_BOUNDS = DESCRIPTOR.message_types_by_name['Bounds']
_METRIC = DESCRIPTOR.message_types_by_name['Metric']
_METRICAGGREGATION = DESCRIPTOR.message_types_by_name['MetricAggregation']
_DC = DESCRIPTOR.message_types_by_name['DC']
_AC = DESCRIPTOR.message_types_by_name['AC']
_AC_ACTIVEENERGY = _AC.nested_types_by_name['ActiveEnergy']
_AC_REACTIVEENERGY = _AC.nested_types_by_name['ReactiveEnergy']
_AC_HARMONICS = _AC.nested_types_by_name['Harmonics']
_AC_ACPHASE = _AC.nested_types_by_name['ACPhase']
Bounds = _reflection.GeneratedProtocolMessageType('Bounds', (_message.Message,), {
  'DESCRIPTOR' : _BOUNDS,
  '__module__' : 'frequenz.api.microgrid.common_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.common.Bounds)
  })
_sym_db.RegisterMessage(Bounds)

Metric = _reflection.GeneratedProtocolMessageType('Metric', (_message.Message,), {
  'DESCRIPTOR' : _METRIC,
  '__module__' : 'frequenz.api.microgrid.common_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.common.Metric)
  })
_sym_db.RegisterMessage(Metric)

MetricAggregation = _reflection.GeneratedProtocolMessageType('MetricAggregation', (_message.Message,), {
  'DESCRIPTOR' : _METRICAGGREGATION,
  '__module__' : 'frequenz.api.microgrid.common_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.common.MetricAggregation)
  })
_sym_db.RegisterMessage(MetricAggregation)

DC = _reflection.GeneratedProtocolMessageType('DC', (_message.Message,), {
  'DESCRIPTOR' : _DC,
  '__module__' : 'frequenz.api.microgrid.common_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.common.DC)
  })
_sym_db.RegisterMessage(DC)

AC = _reflection.GeneratedProtocolMessageType('AC', (_message.Message,), {

  'ActiveEnergy' : _reflection.GeneratedProtocolMessageType('ActiveEnergy', (_message.Message,), {
    'DESCRIPTOR' : _AC_ACTIVEENERGY,
    '__module__' : 'frequenz.api.microgrid.common_pb2'
    # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.common.AC.ActiveEnergy)
    })
  ,

  'ReactiveEnergy' : _reflection.GeneratedProtocolMessageType('ReactiveEnergy', (_message.Message,), {
    'DESCRIPTOR' : _AC_REACTIVEENERGY,
    '__module__' : 'frequenz.api.microgrid.common_pb2'
    # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.common.AC.ReactiveEnergy)
    })
  ,

  'Harmonics' : _reflection.GeneratedProtocolMessageType('Harmonics', (_message.Message,), {
    'DESCRIPTOR' : _AC_HARMONICS,
    '__module__' : 'frequenz.api.microgrid.common_pb2'
    # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.common.AC.Harmonics)
    })
  ,

  'ACPhase' : _reflection.GeneratedProtocolMessageType('ACPhase', (_message.Message,), {
    'DESCRIPTOR' : _AC_ACPHASE,
    '__module__' : 'frequenz.api.microgrid.common_pb2'
    # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.common.AC.ACPhase)
    })
  ,
  'DESCRIPTOR' : _AC,
  '__module__' : 'frequenz.api.microgrid.common_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.common.AC)
  })
_sym_db.RegisterMessage(AC)
_sym_db.RegisterMessage(AC.ActiveEnergy)
_sym_db.RegisterMessage(AC.ReactiveEnergy)
_sym_db.RegisterMessage(AC.Harmonics)
_sym_db.RegisterMessage(AC.ACPhase)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _ERRORLEVEL._serialized_start=2796
  _ERRORLEVEL._serialized_end=2885
  _BOUNDS._serialized_start=70
  _BOUNDS._serialized_end=108
  _METRIC._serialized_start=111
  _METRIC._serialized_end=322
  _METRICAGGREGATION._serialized_start=325
  _METRICAGGREGATION._serialized_end=617
  _DC._serialized_start=620
  _DC._serialized_end=790
  _AC._serialized_start=793
  _AC._serialized_end=2794
  _AC_ACTIVEENERGY._serialized_start=1594
  _AC_ACTIVEENERGY._serialized_end=1792
  _AC_REACTIVEENERGY._serialized_start=1795
  _AC_REACTIVEENERGY._serialized_end=1997
  _AC_HARMONICS._serialized_start=2000
  _AC_HARMONICS._serialized_end=2233
  _AC_ACPHASE._serialized_start=2236
  _AC_ACPHASE._serialized_end=2794
# @@protoc_insertion_point(module_scope)
