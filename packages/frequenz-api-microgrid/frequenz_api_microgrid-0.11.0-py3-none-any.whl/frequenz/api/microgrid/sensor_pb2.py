# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: frequenz/api/microgrid/sensor.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from frequenz.api.microgrid import common_pb2 as frequenz_dot_api_dot_microgrid_dot_common__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n#frequenz/api/microgrid/sensor.proto\x12\x1d\x66requenz.api.microgrid.sensor\x1a#frequenz/api/microgrid/common.proto\"O\n\x05State\x12\x46\n\x0f\x63omponent_state\x18\x01 \x01(\x0e\x32-.frequenz.api.microgrid.sensor.ComponentState\"\x86\x01\n\x05\x45rror\x12\x36\n\x04\x63ode\x18\x01 \x01(\x0e\x32(.frequenz.api.microgrid.sensor.ErrorCode\x12\x38\n\x05level\x18\x02 \x01(\x0e\x32).frequenz.api.microgrid.common.ErrorLevel\x12\x0b\n\x03msg\x18\x03 \x01(\t\"_\n\nSensorData\x12\r\n\x05value\x18\x01 \x01(\x02\x12\x42\n\rsensor_metric\x18\x02 \x01(\x0e\x32+.frequenz.api.microgrid.sensor.SensorMetric\"F\n\x04\x44\x61ta\x12>\n\x0bsensor_data\x18\x01 \x03(\x0b\x32).frequenz.api.microgrid.sensor.SensorData\"\"\n\nProperties\x12\x14\n\x0c\x66irmware_ver\x18\x01 \x01(\t\"\xe5\x01\n\x06Sensor\x12=\n\nproperties\x18\x01 \x01(\x0b\x32).frequenz.api.microgrid.sensor.Properties\x12\x33\n\x05state\x18\x02 \x01(\x0b\x32$.frequenz.api.microgrid.sensor.State\x12\x34\n\x06\x65rrors\x18\x03 \x03(\x0b\x32$.frequenz.api.microgrid.sensor.Error\x12\x31\n\x04\x64\x61ta\x18\x04 \x01(\x0b\x32#.frequenz.api.microgrid.sensor.Data*\x9e\x01\n\x04Type\x12\x14\n\x10TYPE_UNSPECIFIED\x10\x00\x12\x14\n\x10TYPE_THERMOMETER\x10\x01\x12\x13\n\x0fTYPE_HYGROMETER\x10\x02\x12\x12\n\x0eTYPE_BAROMETER\x10\x03\x12\x14\n\x10TYPE_PYRANOMETER\x10\x04\x12\x13\n\x0fTYPE_ANEMOMETER\x10\x05\x12\x16\n\x12TYPE_ACCELEROMETER\x10\x06*d\n\x0e\x43omponentState\x12\x1f\n\x1b\x43OMPONENT_STATE_UNSPECIFIED\x10\x00\x12\x16\n\x12\x43OMPONENT_STATE_OK\x10\x01\x12\x19\n\x15\x43OMPONENT_STATE_ERROR\x10\x02*\'\n\tErrorCode\x12\x1a\n\x16\x45RROR_CODE_UNSPECIFIED\x10\x00*\xf7\x01\n\x0cSensorMetric\x12\x1d\n\x19SENSOR_METRIC_UNSPECIFIED\x10\x00\x12\x1d\n\x19SENSOR_METRIC_TEMPERATURE\x10\x01\x12\x1a\n\x16SENSOR_METRIC_HUMIDITY\x10\x02\x12\x1a\n\x16SENSOR_METRIC_PRESSURE\x10\x03\x12\x1c\n\x18SENSOR_METRIC_IRRADIANCE\x10\x04\x12\x1a\n\x16SENSOR_METRIC_VELOCITY\x10\x05\x12\x1e\n\x1aSENSOR_METRIC_ACCELERATION\x10\x06\x12\x17\n\x13SENSOR_METRIC_ANGLE\x10\x07\x62\x06proto3')

_TYPE = DESCRIPTOR.enum_types_by_name['Type']
Type = enum_type_wrapper.EnumTypeWrapper(_TYPE)
_COMPONENTSTATE = DESCRIPTOR.enum_types_by_name['ComponentState']
ComponentState = enum_type_wrapper.EnumTypeWrapper(_COMPONENTSTATE)
_ERRORCODE = DESCRIPTOR.enum_types_by_name['ErrorCode']
ErrorCode = enum_type_wrapper.EnumTypeWrapper(_ERRORCODE)
_SENSORMETRIC = DESCRIPTOR.enum_types_by_name['SensorMetric']
SensorMetric = enum_type_wrapper.EnumTypeWrapper(_SENSORMETRIC)
TYPE_UNSPECIFIED = 0
TYPE_THERMOMETER = 1
TYPE_HYGROMETER = 2
TYPE_BAROMETER = 3
TYPE_PYRANOMETER = 4
TYPE_ANEMOMETER = 5
TYPE_ACCELEROMETER = 6
COMPONENT_STATE_UNSPECIFIED = 0
COMPONENT_STATE_OK = 1
COMPONENT_STATE_ERROR = 2
ERROR_CODE_UNSPECIFIED = 0
SENSOR_METRIC_UNSPECIFIED = 0
SENSOR_METRIC_TEMPERATURE = 1
SENSOR_METRIC_HUMIDITY = 2
SENSOR_METRIC_PRESSURE = 3
SENSOR_METRIC_IRRADIANCE = 4
SENSOR_METRIC_VELOCITY = 5
SENSOR_METRIC_ACCELERATION = 6
SENSOR_METRIC_ANGLE = 7


_STATE = DESCRIPTOR.message_types_by_name['State']
_ERROR = DESCRIPTOR.message_types_by_name['Error']
_SENSORDATA = DESCRIPTOR.message_types_by_name['SensorData']
_DATA = DESCRIPTOR.message_types_by_name['Data']
_PROPERTIES = DESCRIPTOR.message_types_by_name['Properties']
_SENSOR = DESCRIPTOR.message_types_by_name['Sensor']
State = _reflection.GeneratedProtocolMessageType('State', (_message.Message,), {
  'DESCRIPTOR' : _STATE,
  '__module__' : 'frequenz.api.microgrid.sensor_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.sensor.State)
  })
_sym_db.RegisterMessage(State)

Error = _reflection.GeneratedProtocolMessageType('Error', (_message.Message,), {
  'DESCRIPTOR' : _ERROR,
  '__module__' : 'frequenz.api.microgrid.sensor_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.sensor.Error)
  })
_sym_db.RegisterMessage(Error)

SensorData = _reflection.GeneratedProtocolMessageType('SensorData', (_message.Message,), {
  'DESCRIPTOR' : _SENSORDATA,
  '__module__' : 'frequenz.api.microgrid.sensor_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.sensor.SensorData)
  })
_sym_db.RegisterMessage(SensorData)

Data = _reflection.GeneratedProtocolMessageType('Data', (_message.Message,), {
  'DESCRIPTOR' : _DATA,
  '__module__' : 'frequenz.api.microgrid.sensor_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.sensor.Data)
  })
_sym_db.RegisterMessage(Data)

Properties = _reflection.GeneratedProtocolMessageType('Properties', (_message.Message,), {
  'DESCRIPTOR' : _PROPERTIES,
  '__module__' : 'frequenz.api.microgrid.sensor_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.sensor.Properties)
  })
_sym_db.RegisterMessage(Properties)

Sensor = _reflection.GeneratedProtocolMessageType('Sensor', (_message.Message,), {
  'DESCRIPTOR' : _SENSOR,
  '__module__' : 'frequenz.api.microgrid.sensor_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.sensor.Sensor)
  })
_sym_db.RegisterMessage(Sensor)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _TYPE._serialized_start=763
  _TYPE._serialized_end=921
  _COMPONENTSTATE._serialized_start=923
  _COMPONENTSTATE._serialized_end=1023
  _ERRORCODE._serialized_start=1025
  _ERRORCODE._serialized_end=1064
  _SENSORMETRIC._serialized_start=1067
  _SENSORMETRIC._serialized_end=1314
  _STATE._serialized_start=107
  _STATE._serialized_end=186
  _ERROR._serialized_start=189
  _ERROR._serialized_end=323
  _SENSORDATA._serialized_start=325
  _SENSORDATA._serialized_end=420
  _DATA._serialized_start=422
  _DATA._serialized_end=492
  _PROPERTIES._serialized_start=494
  _PROPERTIES._serialized_end=528
  _SENSOR._serialized_start=531
  _SENSOR._serialized_end=760
# @@protoc_insertion_point(module_scope)
