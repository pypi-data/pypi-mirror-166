"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Contains the definitions for Microgrid gRPC API.

Copyright:
Copyright 2022 Frequenz Energy-as-a-Service GmbH

License:
MIT
"""
import abc
import collections.abc
import frequenz.api.microgrid.microgrid_pb2
import google.protobuf.empty_pb2
import google.protobuf.wrappers_pb2
import grpc

class MicrogridStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    ListComponents: grpc.UnaryUnaryMultiCallable[
        frequenz.api.microgrid.microgrid_pb2.ComponentFilter,
        frequenz.api.microgrid.microgrid_pb2.ComponentList,
    ]
    """List components in the local microgrid, optionally filtered by a given list
    of component IDs and component categories.

    If provided, the filters for component IDs and categories have an `AND`
    relationship with one another, meaning that they are applied serially,
    but the elements within a single filter list have an `OR` relationship with
    each other.
    E.g., if `ids` = [1, 2, 3], and `categories` = [
     `ComponentCategory::COMPONENT_CATEGORY_INVERTER`,
     `ComponentCategory::COMPONENT_CATEGORY_BATTERY`],
    then the results will consist of elements that
    have the IDs 1, OR 2, OR 3,
    AND
    are of the categories `ComponentCategory::COMPONENT_CATEGORY_INVERTER` OR
    `ComponentCategory::COMPONENT_CATEGORY_BATTERY`.

    If a filter list is empty, then that filter is not applied.
    """
    ListConnections: grpc.UnaryUnaryMultiCallable[
        frequenz.api.microgrid.microgrid_pb2.ConnectionFilter,
        frequenz.api.microgrid.microgrid_pb2.ConnectionList,
    ]
    """Returns a list of the connections between components as `(start, end)`
    pairs of connection IDs, where the direction of individual connections
    is always away from the grid endpoint, i.e. aligned with the direction
    of positive current according to the passive sign convention:
    https://en.wikipedia.org/wiki/Passive_sign_convention

    The request may be filtered by `start`/`end` component(s) of individual
    connections.  If provided, the `start` and `end` filters have an `AND`
    relationship between each other, meaning that they are applied serially,
    but an `OR` relationship with other elements in the same list.
    For example, if `start` = `[1, 2, 3]`, and `end` = `[4, 5, 6]`, then the
    result should have all the connections where
    * each `start` component ID is either `1`, `2`, OR `3`,
     AND
    * each `end` component ID is either `4`, `5`, OR `6`.
    """
    GetComponentData: grpc.UnaryStreamMultiCallable[
        frequenz.api.microgrid.microgrid_pb2.ComponentIdParam,
        frequenz.api.microgrid.microgrid_pb2.ComponentData,
    ]
    """Returns a stream containing data from a component with a given ID."""
    CanStreamData: grpc.UnaryUnaryMultiCallable[
        frequenz.api.microgrid.microgrid_pb2.ComponentIdParam,
        google.protobuf.wrappers_pb2.BoolValue,
    ]
    """Returns whether the component with given ID can stream data."""
    SetBounds: grpc.StreamUnaryMultiCallable[
        frequenz.api.microgrid.microgrid_pb2.SetBoundsParam,
        google.protobuf.empty_pb2.Empty,
    ]
    """Sets the bounds for a given bounded metric of a given component."""
    Charge: grpc.UnaryUnaryMultiCallable[
        frequenz.api.microgrid.microgrid_pb2.PowerLevelParam,
        google.protobuf.empty_pb2.Empty,
    ]
    """Sets the charge power of a component with a given ID, provided the
    component supports it.

    Performs the following sequence actions for the following component
    categories:

    * Inverter: Sends the charge command to the inverter, making it consume AC
     power.
    """
    Discharge: grpc.UnaryUnaryMultiCallable[
        frequenz.api.microgrid.microgrid_pb2.PowerLevelParam,
        google.protobuf.empty_pb2.Empty,
    ]
    """Sets the discharge power of a component with a given ID, provided the
    component supports it.

    Performs the following sequence actions for the following component
    categories:

    * Inverter: Sends the discharge command to the inverter, making it deliver
     AC power.
    """
    Start: grpc.UnaryUnaryMultiCallable[
        frequenz.api.microgrid.microgrid_pb2.ComponentIdParam,
        google.protobuf.empty_pb2.Empty,
    ]
    """Starts the component, and brings it into a state where it is immediately
    operational.

    Performs the following sequence of actions for the following component
    categories:

    * Inverter:
     * closes DC relays, if the feature is available
     * closes AC relays
     * sets power output to 0

    * Battery: Checks if DC relays are open, then
     * closes DC relays

    If any of the above mentioned actions for a given component has already
    been performed, then this method call effectively skips that action.

    If a feature required to perform an action is missing, then that action is
    skipped.
    """
    HotStandby: grpc.UnaryUnaryMultiCallable[
        frequenz.api.microgrid.microgrid_pb2.ComponentIdParam,
        google.protobuf.empty_pb2.Empty,
    ]
    """Sets the given component into a hot-standby state, from which it can return
    into an operational state within at most 5 seconds.

    Performs the following sequence actions for the following component
    categories:

    * Inverter: Checks if AC and DC relays are closed, then
     * sets power to 0

    If any of the checks mentioned above fails, then the method call returns an
    error.

    If any of the above mentioned actions for a given component has already
    been performed, then this method call effectively skips that action.
    """
    ColdStandby: grpc.UnaryUnaryMultiCallable[
        frequenz.api.microgrid.microgrid_pb2.ComponentIdParam,
        google.protobuf.empty_pb2.Empty,
    ]
    """Sets the given component into a cold-standby state, from which it can
    return into an operational state within at most 2 minutes.

    Performs the following sequence actions for the following component
    categories:

    * Inverter: Checks if AC and DC relays are closed, then
     * sets power to 0, and
     * opens AC relays

    If any of the checks mentioned above fails, then the method call returns an
    error.

    If any of the above mentioned actions for a given component has already
    been performed, then this method call efffectively skips that action.
    """
    Stop: grpc.UnaryUnaryMultiCallable[
        frequenz.api.microgrid.microgrid_pb2.ComponentIdParam,
        google.protobuf.empty_pb2.Empty,
    ]
    """Stops the component completely, potentially disengaging its power
    electronics controller(s).

    Performs the following sequence actions for the following component
    categories:

    * Inverter:
     * Brings component to the cold-standby state
     * opens DC relays

    * Battery: Checks if the power output is 0, then
     * opens DC relays

    If any of the checks mentioned above fails, then the method call returns an
    error.

    If any of the above mentioned actions for a given component has already
    been performed, then this method call effectively skips that action.

    If a feature required to perform an action is missing, then that action is
    skipped.
    """
    ErrorAck: grpc.UnaryUnaryMultiCallable[
        frequenz.api.microgrid.microgrid_pb2.ComponentIdParam,
        google.protobuf.empty_pb2.Empty,
    ]
    """Acknowledges any recoverable error reported by the component, and brings it
    back to the stopped or cold-standby state.
    """

class MicrogridServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def ListComponents(
        self,
        request: frequenz.api.microgrid.microgrid_pb2.ComponentFilter,
        context: grpc.ServicerContext,
    ) -> frequenz.api.microgrid.microgrid_pb2.ComponentList:
        """List components in the local microgrid, optionally filtered by a given list
        of component IDs and component categories.

        If provided, the filters for component IDs and categories have an `AND`
        relationship with one another, meaning that they are applied serially,
        but the elements within a single filter list have an `OR` relationship with
        each other.
        E.g., if `ids` = [1, 2, 3], and `categories` = [
         `ComponentCategory::COMPONENT_CATEGORY_INVERTER`,
         `ComponentCategory::COMPONENT_CATEGORY_BATTERY`],
        then the results will consist of elements that
        have the IDs 1, OR 2, OR 3,
        AND
        are of the categories `ComponentCategory::COMPONENT_CATEGORY_INVERTER` OR
        `ComponentCategory::COMPONENT_CATEGORY_BATTERY`.

        If a filter list is empty, then that filter is not applied.
        """
    @abc.abstractmethod
    def ListConnections(
        self,
        request: frequenz.api.microgrid.microgrid_pb2.ConnectionFilter,
        context: grpc.ServicerContext,
    ) -> frequenz.api.microgrid.microgrid_pb2.ConnectionList:
        """Returns a list of the connections between components as `(start, end)`
        pairs of connection IDs, where the direction of individual connections
        is always away from the grid endpoint, i.e. aligned with the direction
        of positive current according to the passive sign convention:
        https://en.wikipedia.org/wiki/Passive_sign_convention

        The request may be filtered by `start`/`end` component(s) of individual
        connections.  If provided, the `start` and `end` filters have an `AND`
        relationship between each other, meaning that they are applied serially,
        but an `OR` relationship with other elements in the same list.
        For example, if `start` = `[1, 2, 3]`, and `end` = `[4, 5, 6]`, then the
        result should have all the connections where
        * each `start` component ID is either `1`, `2`, OR `3`,
         AND
        * each `end` component ID is either `4`, `5`, OR `6`.
        """
    @abc.abstractmethod
    def GetComponentData(
        self,
        request: frequenz.api.microgrid.microgrid_pb2.ComponentIdParam,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[frequenz.api.microgrid.microgrid_pb2.ComponentData]:
        """Returns a stream containing data from a component with a given ID."""
    @abc.abstractmethod
    def CanStreamData(
        self,
        request: frequenz.api.microgrid.microgrid_pb2.ComponentIdParam,
        context: grpc.ServicerContext,
    ) -> google.protobuf.wrappers_pb2.BoolValue:
        """Returns whether the component with given ID can stream data."""
    @abc.abstractmethod
    def SetBounds(
        self,
        request_iterator: collections.abc.Iterator[frequenz.api.microgrid.microgrid_pb2.SetBoundsParam],
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Sets the bounds for a given bounded metric of a given component."""
    @abc.abstractmethod
    def Charge(
        self,
        request: frequenz.api.microgrid.microgrid_pb2.PowerLevelParam,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Sets the charge power of a component with a given ID, provided the
        component supports it.

        Performs the following sequence actions for the following component
        categories:

        * Inverter: Sends the charge command to the inverter, making it consume AC
         power.
        """
    @abc.abstractmethod
    def Discharge(
        self,
        request: frequenz.api.microgrid.microgrid_pb2.PowerLevelParam,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Sets the discharge power of a component with a given ID, provided the
        component supports it.

        Performs the following sequence actions for the following component
        categories:

        * Inverter: Sends the discharge command to the inverter, making it deliver
         AC power.
        """
    @abc.abstractmethod
    def Start(
        self,
        request: frequenz.api.microgrid.microgrid_pb2.ComponentIdParam,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Starts the component, and brings it into a state where it is immediately
        operational.

        Performs the following sequence of actions for the following component
        categories:

        * Inverter:
         * closes DC relays, if the feature is available
         * closes AC relays
         * sets power output to 0

        * Battery: Checks if DC relays are open, then
         * closes DC relays

        If any of the above mentioned actions for a given component has already
        been performed, then this method call effectively skips that action.

        If a feature required to perform an action is missing, then that action is
        skipped.
        """
    @abc.abstractmethod
    def HotStandby(
        self,
        request: frequenz.api.microgrid.microgrid_pb2.ComponentIdParam,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Sets the given component into a hot-standby state, from which it can return
        into an operational state within at most 5 seconds.

        Performs the following sequence actions for the following component
        categories:

        * Inverter: Checks if AC and DC relays are closed, then
         * sets power to 0

        If any of the checks mentioned above fails, then the method call returns an
        error.

        If any of the above mentioned actions for a given component has already
        been performed, then this method call effectively skips that action.
        """
    @abc.abstractmethod
    def ColdStandby(
        self,
        request: frequenz.api.microgrid.microgrid_pb2.ComponentIdParam,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Sets the given component into a cold-standby state, from which it can
        return into an operational state within at most 2 minutes.

        Performs the following sequence actions for the following component
        categories:

        * Inverter: Checks if AC and DC relays are closed, then
         * sets power to 0, and
         * opens AC relays

        If any of the checks mentioned above fails, then the method call returns an
        error.

        If any of the above mentioned actions for a given component has already
        been performed, then this method call efffectively skips that action.
        """
    @abc.abstractmethod
    def Stop(
        self,
        request: frequenz.api.microgrid.microgrid_pb2.ComponentIdParam,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Stops the component completely, potentially disengaging its power
        electronics controller(s).

        Performs the following sequence actions for the following component
        categories:

        * Inverter:
         * Brings component to the cold-standby state
         * opens DC relays

        * Battery: Checks if the power output is 0, then
         * opens DC relays

        If any of the checks mentioned above fails, then the method call returns an
        error.

        If any of the above mentioned actions for a given component has already
        been performed, then this method call effectively skips that action.

        If a feature required to perform an action is missing, then that action is
        skipped.
        """
    @abc.abstractmethod
    def ErrorAck(
        self,
        request: frequenz.api.microgrid.microgrid_pb2.ComponentIdParam,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty:
        """Acknowledges any recoverable error reported by the component, and brings it
        back to the stopped or cold-standby state.
        """

def add_MicrogridServicer_to_server(servicer: MicrogridServicer, server: grpc.Server) -> None: ...
