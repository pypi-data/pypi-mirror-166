# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: frequenz/api/microgrid/inverter.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from frequenz.api.microgrid import common_pb2 as frequenz_dot_api_dot_microgrid_dot_common__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n%frequenz/api/microgrid/inverter.proto\x12\x1f\x66requenz.api.microgrid.inverter\x1a#frequenz/api/microgrid/common.proto\"Q\n\x05State\x12H\n\x0f\x63omponent_state\x18\x01 \x01(\x0e\x32/.frequenz.api.microgrid.inverter.ComponentState\"\x88\x01\n\x05\x45rror\x12\x38\n\x04\x63ode\x18\x01 \x01(\x0e\x32*.frequenz.api.microgrid.inverter.ErrorCode\x12\x38\n\x05level\x18\x02 \x01(\x0e\x32).frequenz.api.microgrid.common.ErrorLevel\x12\x0b\n\x03msg\x18\x03 \x01(\t\"\xa0\x01\n\x04\x44\x61ta\x12-\n\x02\x64\x63\x18\x01 \x01(\x0b\x32!.frequenz.api.microgrid.common.DC\x12-\n\x02\x61\x63\x18\x02 \x01(\x0b\x32!.frequenz.api.microgrid.common.AC\x12:\n\x0btemperature\x18\x03 \x01(\x0b\x32%.frequenz.api.microgrid.common.Metric\"\"\n\nProperties\x12\x14\n\x0c\x66irmware_ver\x18\x01 \x01(\t\"\xef\x01\n\x08Inverter\x12?\n\nproperties\x18\x01 \x01(\x0b\x32+.frequenz.api.microgrid.inverter.Properties\x12\x35\n\x05state\x18\x02 \x01(\x0b\x32&.frequenz.api.microgrid.inverter.State\x12\x36\n\x06\x65rrors\x18\x03 \x03(\x0b\x32&.frequenz.api.microgrid.inverter.Error\x12\x33\n\x04\x64\x61ta\x18\x04 \x01(\x0b\x32%.frequenz.api.microgrid.inverter.Data*O\n\x04Type\x12\x14\n\x10TYPE_UNSPECIFIED\x10\x00\x12\x10\n\x0cTYPE_BATTERY\x10\x01\x12\x0e\n\nTYPE_SOLAR\x10\x02\x12\x0f\n\x0bTYPE_HYBRID\x10\x03*\xc1\x02\n\x0e\x43omponentState\x12\x1f\n\x1b\x43OMPONENT_STATE_UNSPECIFIED\x10\x00\x12\x17\n\x13\x43OMPONENT_STATE_OFF\x10\x01\x12 \n\x1c\x43OMPONENT_STATE_SWITCHING_ON\x10\x02\x12!\n\x1d\x43OMPONENT_STATE_SWITCHING_OFF\x10\x03\x12\x1b\n\x17\x43OMPONENT_STATE_STANDBY\x10\x04\x12\x18\n\x14\x43OMPONENT_STATE_IDLE\x10\x05\x12\x1c\n\x18\x43OMPONENT_STATE_CHARGING\x10\n\x12\x1f\n\x1b\x43OMPONENT_STATE_DISCHARGING\x10\x0b\x12\x19\n\x15\x43OMPONENT_STATE_ERROR\x10\x0e\x12\x1f\n\x1b\x43OMPONENT_STATE_UNAVAILABLE\x10\x0f*\'\n\tErrorCode\x12\x1a\n\x16\x45RROR_CODE_UNSPECIFIED\x10\x00\x62\x06proto3')

_TYPE = DESCRIPTOR.enum_types_by_name['Type']
Type = enum_type_wrapper.EnumTypeWrapper(_TYPE)
_COMPONENTSTATE = DESCRIPTOR.enum_types_by_name['ComponentState']
ComponentState = enum_type_wrapper.EnumTypeWrapper(_COMPONENTSTATE)
_ERRORCODE = DESCRIPTOR.enum_types_by_name['ErrorCode']
ErrorCode = enum_type_wrapper.EnumTypeWrapper(_ERRORCODE)
TYPE_UNSPECIFIED = 0
TYPE_BATTERY = 1
TYPE_SOLAR = 2
TYPE_HYBRID = 3
COMPONENT_STATE_UNSPECIFIED = 0
COMPONENT_STATE_OFF = 1
COMPONENT_STATE_SWITCHING_ON = 2
COMPONENT_STATE_SWITCHING_OFF = 3
COMPONENT_STATE_STANDBY = 4
COMPONENT_STATE_IDLE = 5
COMPONENT_STATE_CHARGING = 10
COMPONENT_STATE_DISCHARGING = 11
COMPONENT_STATE_ERROR = 14
COMPONENT_STATE_UNAVAILABLE = 15
ERROR_CODE_UNSPECIFIED = 0


_STATE = DESCRIPTOR.message_types_by_name['State']
_ERROR = DESCRIPTOR.message_types_by_name['Error']
_DATA = DESCRIPTOR.message_types_by_name['Data']
_PROPERTIES = DESCRIPTOR.message_types_by_name['Properties']
_INVERTER = DESCRIPTOR.message_types_by_name['Inverter']
State = _reflection.GeneratedProtocolMessageType('State', (_message.Message,), {
  'DESCRIPTOR' : _STATE,
  '__module__' : 'frequenz.api.microgrid.inverter_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.inverter.State)
  })
_sym_db.RegisterMessage(State)

Error = _reflection.GeneratedProtocolMessageType('Error', (_message.Message,), {
  'DESCRIPTOR' : _ERROR,
  '__module__' : 'frequenz.api.microgrid.inverter_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.inverter.Error)
  })
_sym_db.RegisterMessage(Error)

Data = _reflection.GeneratedProtocolMessageType('Data', (_message.Message,), {
  'DESCRIPTOR' : _DATA,
  '__module__' : 'frequenz.api.microgrid.inverter_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.inverter.Data)
  })
_sym_db.RegisterMessage(Data)

Properties = _reflection.GeneratedProtocolMessageType('Properties', (_message.Message,), {
  'DESCRIPTOR' : _PROPERTIES,
  '__module__' : 'frequenz.api.microgrid.inverter_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.inverter.Properties)
  })
_sym_db.RegisterMessage(Properties)

Inverter = _reflection.GeneratedProtocolMessageType('Inverter', (_message.Message,), {
  'DESCRIPTOR' : _INVERTER,
  '__module__' : 'frequenz.api.microgrid.inverter_pb2'
  # @@protoc_insertion_point(class_scope:frequenz.api.microgrid.inverter.Inverter)
  })
_sym_db.RegisterMessage(Inverter)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _TYPE._serialized_start=774
  _TYPE._serialized_end=853
  _COMPONENTSTATE._serialized_start=856
  _COMPONENTSTATE._serialized_end=1177
  _ERRORCODE._serialized_start=1179
  _ERRORCODE._serialized_end=1218
  _STATE._serialized_start=111
  _STATE._serialized_end=192
  _ERROR._serialized_start=195
  _ERROR._serialized_end=331
  _DATA._serialized_start=334
  _DATA._serialized_end=494
  _PROPERTIES._serialized_start=496
  _PROPERTIES._serialized_end=530
  _INVERTER._serialized_start=533
  _INVERTER._serialized_end=772
# @@protoc_insertion_point(module_scope)
