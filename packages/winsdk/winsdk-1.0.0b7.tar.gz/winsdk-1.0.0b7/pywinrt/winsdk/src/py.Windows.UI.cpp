// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.7

#include "pybase.h"
#include "py.Windows.UI.h"


PyObject* py::converter<winrt::Windows::UI::Color>::convert(winrt::Windows::UI::Color instance) noexcept
{
    auto type = py::get_python_type<winrt::Windows::UI::Color>();
    if (!type)
    {
        return nullptr;
    }

    return py::wrap_struct(instance, type);
}
winrt::Windows::UI::Color py::converter<winrt::Windows::UI::Color>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);

    auto type =  py::get_python_type<winrt::Windows::UI::Color>();

    if (!type) {
        throw python_exception();
    }

    if (Py_TYPE(obj) == type)
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::UI::Color>*>(obj)->obj;
    }

    PyErr_SetString(PyExc_TypeError, "expecting winrt::Windows::UI::Color");
    throw python_exception();
}

PyObject* py::converter<winrt::Windows::UI::WindowId>::convert(winrt::Windows::UI::WindowId instance) noexcept
{
    auto type = py::get_python_type<winrt::Windows::UI::WindowId>();
    if (!type)
    {
        return nullptr;
    }

    return py::wrap_struct(instance, type);
}
winrt::Windows::UI::WindowId py::converter<winrt::Windows::UI::WindowId>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);

    auto type =  py::get_python_type<winrt::Windows::UI::WindowId>();

    if (!type) {
        throw python_exception();
    }

    if (Py_TYPE(obj) == type)
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::UI::WindowId>*>(obj)->obj;
    }

    PyErr_SetString(PyExc_TypeError, "expecting winrt::Windows::UI::WindowId");
    throw python_exception();
}

namespace py::cpp::Windows::UI
{
    struct module_state
    {
        PyTypeObject* type_ColorHelper;
        PyTypeObject* type_Colors;
        PyTypeObject* type_UIContentRoot;
        PyTypeObject* type_UIContext;
        PyTypeObject* type_Color;
        PyTypeObject* type_WindowId;
    };

    // ----- ColorHelper class --------------------
    constexpr const char* const type_name_ColorHelper = "ColorHelper";

    static PyObject* _new_ColorHelper(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_ColorHelper);
        return nullptr;
    }

    static void _dealloc_ColorHelper(py::wrapper::Windows::UI::ColorHelper* self)
    {
        auto tp = Py_TYPE(self);
        self->obj = nullptr;
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ColorHelper_FromArgb(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 4)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.ColorHelper", L"FromArgb", 4))
            {
                PyErr_SetString(PyExc_AttributeError, "method 4 args is not available in this version of Windows");
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<uint8_t>(args, 0);
                auto param1 = py::convert_to<uint8_t>(args, 1);
                auto param2 = py::convert_to<uint8_t>(args, 2);
                auto param3 = py::convert_to<uint8_t>(args, 3);

                return py::convert(winrt::Windows::UI::ColorHelper::FromArgb(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* ColorHelper_ToDisplayName(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.UI.ColorHelper", L"ToDisplayName", 1))
            {
                PyErr_SetString(PyExc_AttributeError, "method 1 args is not available in this version of Windows");
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::UI::Color>(args, 0);

                return py::convert(winrt::Windows::UI::ColorHelper::ToDisplayName(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_ColorHelper(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::ColorHelper>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ColorHelper[] = {
        { "from_argb", reinterpret_cast<PyCFunction>(ColorHelper_FromArgb), METH_VARARGS | METH_STATIC, nullptr },
        { "to_display_name", reinterpret_cast<PyCFunction>(ColorHelper_ToDisplayName), METH_VARARGS | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_ColorHelper), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ColorHelper[] = {
        { }
    };

    static PyType_Slot _type_slots_ColorHelper[] = 
    {
        { Py_tp_new, _new_ColorHelper },
        { Py_tp_dealloc, _dealloc_ColorHelper },
        { Py_tp_methods, _methods_ColorHelper },
        { Py_tp_getset, _getset_ColorHelper },
        { },
    };

    static PyType_Spec type_spec_ColorHelper =
    {
        "_winsdk_Windows_UI.ColorHelper",
        sizeof(py::wrapper::Windows::UI::ColorHelper),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ColorHelper
    };

    // ----- Colors class --------------------
    constexpr const char* const type_name_Colors = "Colors";

    static PyObject* _new_Colors(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_Colors);
        return nullptr;
    }

    static void _dealloc_Colors(py::wrapper::Windows::UI::Colors* self)
    {
        auto tp = Py_TYPE(self);
        self->obj = nullptr;
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* Colors_get_AliceBlue(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"AliceBlue"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::AliceBlue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_AntiqueWhite(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"AntiqueWhite"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::AntiqueWhite());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Aqua(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Aqua"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Aqua());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Aquamarine(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Aquamarine"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Aquamarine());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Azure(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Azure"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Azure());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Beige(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Beige"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Beige());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Bisque(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Bisque"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Bisque());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Black(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Black"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Black());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_BlanchedAlmond(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"BlanchedAlmond"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::BlanchedAlmond());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Blue(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Blue"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Blue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_BlueViolet(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"BlueViolet"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::BlueViolet());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Brown(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Brown"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Brown());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_BurlyWood(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"BurlyWood"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::BurlyWood());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_CadetBlue(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"CadetBlue"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::CadetBlue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Chartreuse(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Chartreuse"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Chartreuse());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Chocolate(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Chocolate"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Chocolate());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Coral(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Coral"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Coral());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_CornflowerBlue(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"CornflowerBlue"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::CornflowerBlue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Cornsilk(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Cornsilk"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Cornsilk());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Crimson(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Crimson"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Crimson());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Cyan(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Cyan"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Cyan());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_DarkBlue(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"DarkBlue"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::DarkBlue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_DarkCyan(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"DarkCyan"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::DarkCyan());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_DarkGoldenrod(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"DarkGoldenrod"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::DarkGoldenrod());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_DarkGray(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"DarkGray"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::DarkGray());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_DarkGreen(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"DarkGreen"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::DarkGreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_DarkKhaki(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"DarkKhaki"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::DarkKhaki());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_DarkMagenta(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"DarkMagenta"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::DarkMagenta());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_DarkOliveGreen(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"DarkOliveGreen"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::DarkOliveGreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_DarkOrange(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"DarkOrange"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::DarkOrange());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_DarkOrchid(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"DarkOrchid"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::DarkOrchid());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_DarkRed(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"DarkRed"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::DarkRed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_DarkSalmon(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"DarkSalmon"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::DarkSalmon());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_DarkSeaGreen(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"DarkSeaGreen"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::DarkSeaGreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_DarkSlateBlue(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"DarkSlateBlue"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::DarkSlateBlue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_DarkSlateGray(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"DarkSlateGray"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::DarkSlateGray());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_DarkTurquoise(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"DarkTurquoise"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::DarkTurquoise());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_DarkViolet(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"DarkViolet"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::DarkViolet());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_DeepPink(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"DeepPink"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::DeepPink());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_DeepSkyBlue(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"DeepSkyBlue"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::DeepSkyBlue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_DimGray(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"DimGray"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::DimGray());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_DodgerBlue(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"DodgerBlue"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::DodgerBlue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Firebrick(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Firebrick"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Firebrick());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_FloralWhite(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"FloralWhite"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::FloralWhite());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_ForestGreen(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"ForestGreen"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::ForestGreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Fuchsia(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Fuchsia"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Fuchsia());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Gainsboro(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Gainsboro"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Gainsboro());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_GhostWhite(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"GhostWhite"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::GhostWhite());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Gold(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Gold"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Gold());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Goldenrod(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Goldenrod"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Goldenrod());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Gray(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Gray"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Gray());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Green(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Green"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Green());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_GreenYellow(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"GreenYellow"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::GreenYellow());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Honeydew(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Honeydew"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Honeydew());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_HotPink(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"HotPink"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::HotPink());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_IndianRed(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"IndianRed"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::IndianRed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Indigo(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Indigo"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Indigo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Ivory(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Ivory"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Ivory());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Khaki(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Khaki"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Khaki());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Lavender(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Lavender"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Lavender());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_LavenderBlush(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"LavenderBlush"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::LavenderBlush());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_LawnGreen(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"LawnGreen"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::LawnGreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_LemonChiffon(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"LemonChiffon"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::LemonChiffon());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_LightBlue(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"LightBlue"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::LightBlue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_LightCoral(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"LightCoral"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::LightCoral());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_LightCyan(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"LightCyan"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::LightCyan());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_LightGoldenrodYellow(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"LightGoldenrodYellow"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::LightGoldenrodYellow());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_LightGray(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"LightGray"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::LightGray());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_LightGreen(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"LightGreen"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::LightGreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_LightPink(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"LightPink"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::LightPink());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_LightSalmon(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"LightSalmon"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::LightSalmon());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_LightSeaGreen(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"LightSeaGreen"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::LightSeaGreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_LightSkyBlue(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"LightSkyBlue"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::LightSkyBlue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_LightSlateGray(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"LightSlateGray"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::LightSlateGray());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_LightSteelBlue(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"LightSteelBlue"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::LightSteelBlue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_LightYellow(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"LightYellow"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::LightYellow());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Lime(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Lime"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Lime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_LimeGreen(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"LimeGreen"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::LimeGreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Linen(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Linen"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Linen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Magenta(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Magenta"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Magenta());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Maroon(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Maroon"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Maroon());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_MediumAquamarine(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"MediumAquamarine"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::MediumAquamarine());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_MediumBlue(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"MediumBlue"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::MediumBlue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_MediumOrchid(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"MediumOrchid"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::MediumOrchid());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_MediumPurple(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"MediumPurple"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::MediumPurple());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_MediumSeaGreen(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"MediumSeaGreen"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::MediumSeaGreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_MediumSlateBlue(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"MediumSlateBlue"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::MediumSlateBlue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_MediumSpringGreen(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"MediumSpringGreen"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::MediumSpringGreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_MediumTurquoise(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"MediumTurquoise"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::MediumTurquoise());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_MediumVioletRed(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"MediumVioletRed"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::MediumVioletRed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_MidnightBlue(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"MidnightBlue"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::MidnightBlue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_MintCream(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"MintCream"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::MintCream());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_MistyRose(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"MistyRose"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::MistyRose());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Moccasin(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Moccasin"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Moccasin());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_NavajoWhite(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"NavajoWhite"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::NavajoWhite());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Navy(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Navy"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Navy());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_OldLace(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"OldLace"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::OldLace());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Olive(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Olive"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Olive());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_OliveDrab(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"OliveDrab"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::OliveDrab());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Orange(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Orange"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Orange());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_OrangeRed(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"OrangeRed"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::OrangeRed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Orchid(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Orchid"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Orchid());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_PaleGoldenrod(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"PaleGoldenrod"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::PaleGoldenrod());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_PaleGreen(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"PaleGreen"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::PaleGreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_PaleTurquoise(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"PaleTurquoise"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::PaleTurquoise());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_PaleVioletRed(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"PaleVioletRed"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::PaleVioletRed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_PapayaWhip(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"PapayaWhip"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::PapayaWhip());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_PeachPuff(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"PeachPuff"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::PeachPuff());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Peru(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Peru"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Peru());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Pink(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Pink"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Pink());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Plum(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Plum"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Plum());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_PowderBlue(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"PowderBlue"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::PowderBlue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Purple(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Purple"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Purple());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Red(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Red"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Red());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_RosyBrown(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"RosyBrown"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::RosyBrown());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_RoyalBlue(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"RoyalBlue"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::RoyalBlue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_SaddleBrown(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"SaddleBrown"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::SaddleBrown());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Salmon(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Salmon"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Salmon());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_SandyBrown(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"SandyBrown"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::SandyBrown());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_SeaGreen(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"SeaGreen"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::SeaGreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_SeaShell(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"SeaShell"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::SeaShell());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Sienna(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Sienna"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Sienna());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Silver(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Silver"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Silver());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_SkyBlue(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"SkyBlue"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::SkyBlue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_SlateBlue(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"SlateBlue"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::SlateBlue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_SlateGray(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"SlateGray"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::SlateGray());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Snow(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Snow"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Snow());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_SpringGreen(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"SpringGreen"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::SpringGreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_SteelBlue(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"SteelBlue"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::SteelBlue());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Tan(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Tan"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Tan());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Teal(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Teal"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Teal());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Thistle(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Thistle"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Thistle());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Tomato(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Tomato"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Tomato());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Transparent(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Transparent"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Transparent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Turquoise(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Turquoise"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Turquoise());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Violet(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Violet"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Violet());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Wheat(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Wheat"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Wheat());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_White(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"White"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::White());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_WhiteSmoke(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"WhiteSmoke"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::WhiteSmoke());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_Yellow(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"Yellow"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::Yellow());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* Colors_get_YellowGreen(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.Colors", L"YellowGreen"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::UI::Colors::YellowGreen());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_Colors(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::Colors>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_Colors[] = {
        { "get_alice_blue", reinterpret_cast<PyCFunction>(Colors_get_AliceBlue), METH_NOARGS | METH_STATIC, nullptr },
        { "get_antique_white", reinterpret_cast<PyCFunction>(Colors_get_AntiqueWhite), METH_NOARGS | METH_STATIC, nullptr },
        { "get_aqua", reinterpret_cast<PyCFunction>(Colors_get_Aqua), METH_NOARGS | METH_STATIC, nullptr },
        { "get_aquamarine", reinterpret_cast<PyCFunction>(Colors_get_Aquamarine), METH_NOARGS | METH_STATIC, nullptr },
        { "get_azure", reinterpret_cast<PyCFunction>(Colors_get_Azure), METH_NOARGS | METH_STATIC, nullptr },
        { "get_beige", reinterpret_cast<PyCFunction>(Colors_get_Beige), METH_NOARGS | METH_STATIC, nullptr },
        { "get_bisque", reinterpret_cast<PyCFunction>(Colors_get_Bisque), METH_NOARGS | METH_STATIC, nullptr },
        { "get_black", reinterpret_cast<PyCFunction>(Colors_get_Black), METH_NOARGS | METH_STATIC, nullptr },
        { "get_blanched_almond", reinterpret_cast<PyCFunction>(Colors_get_BlanchedAlmond), METH_NOARGS | METH_STATIC, nullptr },
        { "get_blue", reinterpret_cast<PyCFunction>(Colors_get_Blue), METH_NOARGS | METH_STATIC, nullptr },
        { "get_blue_violet", reinterpret_cast<PyCFunction>(Colors_get_BlueViolet), METH_NOARGS | METH_STATIC, nullptr },
        { "get_brown", reinterpret_cast<PyCFunction>(Colors_get_Brown), METH_NOARGS | METH_STATIC, nullptr },
        { "get_burly_wood", reinterpret_cast<PyCFunction>(Colors_get_BurlyWood), METH_NOARGS | METH_STATIC, nullptr },
        { "get_cadet_blue", reinterpret_cast<PyCFunction>(Colors_get_CadetBlue), METH_NOARGS | METH_STATIC, nullptr },
        { "get_chartreuse", reinterpret_cast<PyCFunction>(Colors_get_Chartreuse), METH_NOARGS | METH_STATIC, nullptr },
        { "get_chocolate", reinterpret_cast<PyCFunction>(Colors_get_Chocolate), METH_NOARGS | METH_STATIC, nullptr },
        { "get_coral", reinterpret_cast<PyCFunction>(Colors_get_Coral), METH_NOARGS | METH_STATIC, nullptr },
        { "get_cornflower_blue", reinterpret_cast<PyCFunction>(Colors_get_CornflowerBlue), METH_NOARGS | METH_STATIC, nullptr },
        { "get_cornsilk", reinterpret_cast<PyCFunction>(Colors_get_Cornsilk), METH_NOARGS | METH_STATIC, nullptr },
        { "get_crimson", reinterpret_cast<PyCFunction>(Colors_get_Crimson), METH_NOARGS | METH_STATIC, nullptr },
        { "get_cyan", reinterpret_cast<PyCFunction>(Colors_get_Cyan), METH_NOARGS | METH_STATIC, nullptr },
        { "get_dark_blue", reinterpret_cast<PyCFunction>(Colors_get_DarkBlue), METH_NOARGS | METH_STATIC, nullptr },
        { "get_dark_cyan", reinterpret_cast<PyCFunction>(Colors_get_DarkCyan), METH_NOARGS | METH_STATIC, nullptr },
        { "get_dark_goldenrod", reinterpret_cast<PyCFunction>(Colors_get_DarkGoldenrod), METH_NOARGS | METH_STATIC, nullptr },
        { "get_dark_gray", reinterpret_cast<PyCFunction>(Colors_get_DarkGray), METH_NOARGS | METH_STATIC, nullptr },
        { "get_dark_green", reinterpret_cast<PyCFunction>(Colors_get_DarkGreen), METH_NOARGS | METH_STATIC, nullptr },
        { "get_dark_khaki", reinterpret_cast<PyCFunction>(Colors_get_DarkKhaki), METH_NOARGS | METH_STATIC, nullptr },
        { "get_dark_magenta", reinterpret_cast<PyCFunction>(Colors_get_DarkMagenta), METH_NOARGS | METH_STATIC, nullptr },
        { "get_dark_olive_green", reinterpret_cast<PyCFunction>(Colors_get_DarkOliveGreen), METH_NOARGS | METH_STATIC, nullptr },
        { "get_dark_orange", reinterpret_cast<PyCFunction>(Colors_get_DarkOrange), METH_NOARGS | METH_STATIC, nullptr },
        { "get_dark_orchid", reinterpret_cast<PyCFunction>(Colors_get_DarkOrchid), METH_NOARGS | METH_STATIC, nullptr },
        { "get_dark_red", reinterpret_cast<PyCFunction>(Colors_get_DarkRed), METH_NOARGS | METH_STATIC, nullptr },
        { "get_dark_salmon", reinterpret_cast<PyCFunction>(Colors_get_DarkSalmon), METH_NOARGS | METH_STATIC, nullptr },
        { "get_dark_sea_green", reinterpret_cast<PyCFunction>(Colors_get_DarkSeaGreen), METH_NOARGS | METH_STATIC, nullptr },
        { "get_dark_slate_blue", reinterpret_cast<PyCFunction>(Colors_get_DarkSlateBlue), METH_NOARGS | METH_STATIC, nullptr },
        { "get_dark_slate_gray", reinterpret_cast<PyCFunction>(Colors_get_DarkSlateGray), METH_NOARGS | METH_STATIC, nullptr },
        { "get_dark_turquoise", reinterpret_cast<PyCFunction>(Colors_get_DarkTurquoise), METH_NOARGS | METH_STATIC, nullptr },
        { "get_dark_violet", reinterpret_cast<PyCFunction>(Colors_get_DarkViolet), METH_NOARGS | METH_STATIC, nullptr },
        { "get_deep_pink", reinterpret_cast<PyCFunction>(Colors_get_DeepPink), METH_NOARGS | METH_STATIC, nullptr },
        { "get_deep_sky_blue", reinterpret_cast<PyCFunction>(Colors_get_DeepSkyBlue), METH_NOARGS | METH_STATIC, nullptr },
        { "get_dim_gray", reinterpret_cast<PyCFunction>(Colors_get_DimGray), METH_NOARGS | METH_STATIC, nullptr },
        { "get_dodger_blue", reinterpret_cast<PyCFunction>(Colors_get_DodgerBlue), METH_NOARGS | METH_STATIC, nullptr },
        { "get_firebrick", reinterpret_cast<PyCFunction>(Colors_get_Firebrick), METH_NOARGS | METH_STATIC, nullptr },
        { "get_floral_white", reinterpret_cast<PyCFunction>(Colors_get_FloralWhite), METH_NOARGS | METH_STATIC, nullptr },
        { "get_forest_green", reinterpret_cast<PyCFunction>(Colors_get_ForestGreen), METH_NOARGS | METH_STATIC, nullptr },
        { "get_fuchsia", reinterpret_cast<PyCFunction>(Colors_get_Fuchsia), METH_NOARGS | METH_STATIC, nullptr },
        { "get_gainsboro", reinterpret_cast<PyCFunction>(Colors_get_Gainsboro), METH_NOARGS | METH_STATIC, nullptr },
        { "get_ghost_white", reinterpret_cast<PyCFunction>(Colors_get_GhostWhite), METH_NOARGS | METH_STATIC, nullptr },
        { "get_gold", reinterpret_cast<PyCFunction>(Colors_get_Gold), METH_NOARGS | METH_STATIC, nullptr },
        { "get_goldenrod", reinterpret_cast<PyCFunction>(Colors_get_Goldenrod), METH_NOARGS | METH_STATIC, nullptr },
        { "get_gray", reinterpret_cast<PyCFunction>(Colors_get_Gray), METH_NOARGS | METH_STATIC, nullptr },
        { "get_green", reinterpret_cast<PyCFunction>(Colors_get_Green), METH_NOARGS | METH_STATIC, nullptr },
        { "get_green_yellow", reinterpret_cast<PyCFunction>(Colors_get_GreenYellow), METH_NOARGS | METH_STATIC, nullptr },
        { "get_honeydew", reinterpret_cast<PyCFunction>(Colors_get_Honeydew), METH_NOARGS | METH_STATIC, nullptr },
        { "get_hot_pink", reinterpret_cast<PyCFunction>(Colors_get_HotPink), METH_NOARGS | METH_STATIC, nullptr },
        { "get_indian_red", reinterpret_cast<PyCFunction>(Colors_get_IndianRed), METH_NOARGS | METH_STATIC, nullptr },
        { "get_indigo", reinterpret_cast<PyCFunction>(Colors_get_Indigo), METH_NOARGS | METH_STATIC, nullptr },
        { "get_ivory", reinterpret_cast<PyCFunction>(Colors_get_Ivory), METH_NOARGS | METH_STATIC, nullptr },
        { "get_khaki", reinterpret_cast<PyCFunction>(Colors_get_Khaki), METH_NOARGS | METH_STATIC, nullptr },
        { "get_lavender", reinterpret_cast<PyCFunction>(Colors_get_Lavender), METH_NOARGS | METH_STATIC, nullptr },
        { "get_lavender_blush", reinterpret_cast<PyCFunction>(Colors_get_LavenderBlush), METH_NOARGS | METH_STATIC, nullptr },
        { "get_lawn_green", reinterpret_cast<PyCFunction>(Colors_get_LawnGreen), METH_NOARGS | METH_STATIC, nullptr },
        { "get_lemon_chiffon", reinterpret_cast<PyCFunction>(Colors_get_LemonChiffon), METH_NOARGS | METH_STATIC, nullptr },
        { "get_light_blue", reinterpret_cast<PyCFunction>(Colors_get_LightBlue), METH_NOARGS | METH_STATIC, nullptr },
        { "get_light_coral", reinterpret_cast<PyCFunction>(Colors_get_LightCoral), METH_NOARGS | METH_STATIC, nullptr },
        { "get_light_cyan", reinterpret_cast<PyCFunction>(Colors_get_LightCyan), METH_NOARGS | METH_STATIC, nullptr },
        { "get_light_goldenrod_yellow", reinterpret_cast<PyCFunction>(Colors_get_LightGoldenrodYellow), METH_NOARGS | METH_STATIC, nullptr },
        { "get_light_gray", reinterpret_cast<PyCFunction>(Colors_get_LightGray), METH_NOARGS | METH_STATIC, nullptr },
        { "get_light_green", reinterpret_cast<PyCFunction>(Colors_get_LightGreen), METH_NOARGS | METH_STATIC, nullptr },
        { "get_light_pink", reinterpret_cast<PyCFunction>(Colors_get_LightPink), METH_NOARGS | METH_STATIC, nullptr },
        { "get_light_salmon", reinterpret_cast<PyCFunction>(Colors_get_LightSalmon), METH_NOARGS | METH_STATIC, nullptr },
        { "get_light_sea_green", reinterpret_cast<PyCFunction>(Colors_get_LightSeaGreen), METH_NOARGS | METH_STATIC, nullptr },
        { "get_light_sky_blue", reinterpret_cast<PyCFunction>(Colors_get_LightSkyBlue), METH_NOARGS | METH_STATIC, nullptr },
        { "get_light_slate_gray", reinterpret_cast<PyCFunction>(Colors_get_LightSlateGray), METH_NOARGS | METH_STATIC, nullptr },
        { "get_light_steel_blue", reinterpret_cast<PyCFunction>(Colors_get_LightSteelBlue), METH_NOARGS | METH_STATIC, nullptr },
        { "get_light_yellow", reinterpret_cast<PyCFunction>(Colors_get_LightYellow), METH_NOARGS | METH_STATIC, nullptr },
        { "get_lime", reinterpret_cast<PyCFunction>(Colors_get_Lime), METH_NOARGS | METH_STATIC, nullptr },
        { "get_lime_green", reinterpret_cast<PyCFunction>(Colors_get_LimeGreen), METH_NOARGS | METH_STATIC, nullptr },
        { "get_linen", reinterpret_cast<PyCFunction>(Colors_get_Linen), METH_NOARGS | METH_STATIC, nullptr },
        { "get_magenta", reinterpret_cast<PyCFunction>(Colors_get_Magenta), METH_NOARGS | METH_STATIC, nullptr },
        { "get_maroon", reinterpret_cast<PyCFunction>(Colors_get_Maroon), METH_NOARGS | METH_STATIC, nullptr },
        { "get_medium_aquamarine", reinterpret_cast<PyCFunction>(Colors_get_MediumAquamarine), METH_NOARGS | METH_STATIC, nullptr },
        { "get_medium_blue", reinterpret_cast<PyCFunction>(Colors_get_MediumBlue), METH_NOARGS | METH_STATIC, nullptr },
        { "get_medium_orchid", reinterpret_cast<PyCFunction>(Colors_get_MediumOrchid), METH_NOARGS | METH_STATIC, nullptr },
        { "get_medium_purple", reinterpret_cast<PyCFunction>(Colors_get_MediumPurple), METH_NOARGS | METH_STATIC, nullptr },
        { "get_medium_sea_green", reinterpret_cast<PyCFunction>(Colors_get_MediumSeaGreen), METH_NOARGS | METH_STATIC, nullptr },
        { "get_medium_slate_blue", reinterpret_cast<PyCFunction>(Colors_get_MediumSlateBlue), METH_NOARGS | METH_STATIC, nullptr },
        { "get_medium_spring_green", reinterpret_cast<PyCFunction>(Colors_get_MediumSpringGreen), METH_NOARGS | METH_STATIC, nullptr },
        { "get_medium_turquoise", reinterpret_cast<PyCFunction>(Colors_get_MediumTurquoise), METH_NOARGS | METH_STATIC, nullptr },
        { "get_medium_violet_red", reinterpret_cast<PyCFunction>(Colors_get_MediumVioletRed), METH_NOARGS | METH_STATIC, nullptr },
        { "get_midnight_blue", reinterpret_cast<PyCFunction>(Colors_get_MidnightBlue), METH_NOARGS | METH_STATIC, nullptr },
        { "get_mint_cream", reinterpret_cast<PyCFunction>(Colors_get_MintCream), METH_NOARGS | METH_STATIC, nullptr },
        { "get_misty_rose", reinterpret_cast<PyCFunction>(Colors_get_MistyRose), METH_NOARGS | METH_STATIC, nullptr },
        { "get_moccasin", reinterpret_cast<PyCFunction>(Colors_get_Moccasin), METH_NOARGS | METH_STATIC, nullptr },
        { "get_navajo_white", reinterpret_cast<PyCFunction>(Colors_get_NavajoWhite), METH_NOARGS | METH_STATIC, nullptr },
        { "get_navy", reinterpret_cast<PyCFunction>(Colors_get_Navy), METH_NOARGS | METH_STATIC, nullptr },
        { "get_old_lace", reinterpret_cast<PyCFunction>(Colors_get_OldLace), METH_NOARGS | METH_STATIC, nullptr },
        { "get_olive", reinterpret_cast<PyCFunction>(Colors_get_Olive), METH_NOARGS | METH_STATIC, nullptr },
        { "get_olive_drab", reinterpret_cast<PyCFunction>(Colors_get_OliveDrab), METH_NOARGS | METH_STATIC, nullptr },
        { "get_orange", reinterpret_cast<PyCFunction>(Colors_get_Orange), METH_NOARGS | METH_STATIC, nullptr },
        { "get_orange_red", reinterpret_cast<PyCFunction>(Colors_get_OrangeRed), METH_NOARGS | METH_STATIC, nullptr },
        { "get_orchid", reinterpret_cast<PyCFunction>(Colors_get_Orchid), METH_NOARGS | METH_STATIC, nullptr },
        { "get_pale_goldenrod", reinterpret_cast<PyCFunction>(Colors_get_PaleGoldenrod), METH_NOARGS | METH_STATIC, nullptr },
        { "get_pale_green", reinterpret_cast<PyCFunction>(Colors_get_PaleGreen), METH_NOARGS | METH_STATIC, nullptr },
        { "get_pale_turquoise", reinterpret_cast<PyCFunction>(Colors_get_PaleTurquoise), METH_NOARGS | METH_STATIC, nullptr },
        { "get_pale_violet_red", reinterpret_cast<PyCFunction>(Colors_get_PaleVioletRed), METH_NOARGS | METH_STATIC, nullptr },
        { "get_papaya_whip", reinterpret_cast<PyCFunction>(Colors_get_PapayaWhip), METH_NOARGS | METH_STATIC, nullptr },
        { "get_peach_puff", reinterpret_cast<PyCFunction>(Colors_get_PeachPuff), METH_NOARGS | METH_STATIC, nullptr },
        { "get_peru", reinterpret_cast<PyCFunction>(Colors_get_Peru), METH_NOARGS | METH_STATIC, nullptr },
        { "get_pink", reinterpret_cast<PyCFunction>(Colors_get_Pink), METH_NOARGS | METH_STATIC, nullptr },
        { "get_plum", reinterpret_cast<PyCFunction>(Colors_get_Plum), METH_NOARGS | METH_STATIC, nullptr },
        { "get_powder_blue", reinterpret_cast<PyCFunction>(Colors_get_PowderBlue), METH_NOARGS | METH_STATIC, nullptr },
        { "get_purple", reinterpret_cast<PyCFunction>(Colors_get_Purple), METH_NOARGS | METH_STATIC, nullptr },
        { "get_red", reinterpret_cast<PyCFunction>(Colors_get_Red), METH_NOARGS | METH_STATIC, nullptr },
        { "get_rosy_brown", reinterpret_cast<PyCFunction>(Colors_get_RosyBrown), METH_NOARGS | METH_STATIC, nullptr },
        { "get_royal_blue", reinterpret_cast<PyCFunction>(Colors_get_RoyalBlue), METH_NOARGS | METH_STATIC, nullptr },
        { "get_saddle_brown", reinterpret_cast<PyCFunction>(Colors_get_SaddleBrown), METH_NOARGS | METH_STATIC, nullptr },
        { "get_salmon", reinterpret_cast<PyCFunction>(Colors_get_Salmon), METH_NOARGS | METH_STATIC, nullptr },
        { "get_sandy_brown", reinterpret_cast<PyCFunction>(Colors_get_SandyBrown), METH_NOARGS | METH_STATIC, nullptr },
        { "get_sea_green", reinterpret_cast<PyCFunction>(Colors_get_SeaGreen), METH_NOARGS | METH_STATIC, nullptr },
        { "get_sea_shell", reinterpret_cast<PyCFunction>(Colors_get_SeaShell), METH_NOARGS | METH_STATIC, nullptr },
        { "get_sienna", reinterpret_cast<PyCFunction>(Colors_get_Sienna), METH_NOARGS | METH_STATIC, nullptr },
        { "get_silver", reinterpret_cast<PyCFunction>(Colors_get_Silver), METH_NOARGS | METH_STATIC, nullptr },
        { "get_sky_blue", reinterpret_cast<PyCFunction>(Colors_get_SkyBlue), METH_NOARGS | METH_STATIC, nullptr },
        { "get_slate_blue", reinterpret_cast<PyCFunction>(Colors_get_SlateBlue), METH_NOARGS | METH_STATIC, nullptr },
        { "get_slate_gray", reinterpret_cast<PyCFunction>(Colors_get_SlateGray), METH_NOARGS | METH_STATIC, nullptr },
        { "get_snow", reinterpret_cast<PyCFunction>(Colors_get_Snow), METH_NOARGS | METH_STATIC, nullptr },
        { "get_spring_green", reinterpret_cast<PyCFunction>(Colors_get_SpringGreen), METH_NOARGS | METH_STATIC, nullptr },
        { "get_steel_blue", reinterpret_cast<PyCFunction>(Colors_get_SteelBlue), METH_NOARGS | METH_STATIC, nullptr },
        { "get_tan", reinterpret_cast<PyCFunction>(Colors_get_Tan), METH_NOARGS | METH_STATIC, nullptr },
        { "get_teal", reinterpret_cast<PyCFunction>(Colors_get_Teal), METH_NOARGS | METH_STATIC, nullptr },
        { "get_thistle", reinterpret_cast<PyCFunction>(Colors_get_Thistle), METH_NOARGS | METH_STATIC, nullptr },
        { "get_tomato", reinterpret_cast<PyCFunction>(Colors_get_Tomato), METH_NOARGS | METH_STATIC, nullptr },
        { "get_transparent", reinterpret_cast<PyCFunction>(Colors_get_Transparent), METH_NOARGS | METH_STATIC, nullptr },
        { "get_turquoise", reinterpret_cast<PyCFunction>(Colors_get_Turquoise), METH_NOARGS | METH_STATIC, nullptr },
        { "get_violet", reinterpret_cast<PyCFunction>(Colors_get_Violet), METH_NOARGS | METH_STATIC, nullptr },
        { "get_wheat", reinterpret_cast<PyCFunction>(Colors_get_Wheat), METH_NOARGS | METH_STATIC, nullptr },
        { "get_white", reinterpret_cast<PyCFunction>(Colors_get_White), METH_NOARGS | METH_STATIC, nullptr },
        { "get_white_smoke", reinterpret_cast<PyCFunction>(Colors_get_WhiteSmoke), METH_NOARGS | METH_STATIC, nullptr },
        { "get_yellow", reinterpret_cast<PyCFunction>(Colors_get_Yellow), METH_NOARGS | METH_STATIC, nullptr },
        { "get_yellow_green", reinterpret_cast<PyCFunction>(Colors_get_YellowGreen), METH_NOARGS | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_Colors), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_Colors[] = {
        { }
    };

    static PyType_Slot _type_slots_Colors[] = 
    {
        { Py_tp_new, _new_Colors },
        { Py_tp_dealloc, _dealloc_Colors },
        { Py_tp_methods, _methods_Colors },
        { Py_tp_getset, _getset_Colors },
        { },
    };

    static PyType_Spec type_spec_Colors =
    {
        "_winsdk_Windows_UI.Colors",
        sizeof(py::wrapper::Windows::UI::Colors),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Colors
    };

    // ----- UIContentRoot class --------------------
    constexpr const char* const type_name_UIContentRoot = "UIContentRoot";

    static PyObject* _new_UIContentRoot(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_UIContentRoot);
        return nullptr;
    }

    static void _dealloc_UIContentRoot(py::wrapper::Windows::UI::UIContentRoot* self)
    {
        auto tp = Py_TYPE(self);
        self->obj = nullptr;
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* UIContentRoot_get_UIContext(py::wrapper::Windows::UI::UIContentRoot* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.UI.UIContentRoot", L"UIContext"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.UIContext());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_UIContentRoot(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::UIContentRoot>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UIContentRoot[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_UIContentRoot), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_UIContentRoot[] = {
        { "u_i_context", reinterpret_cast<getter>(UIContentRoot_get_UIContext), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_UIContentRoot[] = 
    {
        { Py_tp_new, _new_UIContentRoot },
        { Py_tp_dealloc, _dealloc_UIContentRoot },
        { Py_tp_methods, _methods_UIContentRoot },
        { Py_tp_getset, _getset_UIContentRoot },
        { },
    };

    static PyType_Spec type_spec_UIContentRoot =
    {
        "_winsdk_Windows_UI.UIContentRoot",
        sizeof(py::wrapper::Windows::UI::UIContentRoot),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UIContentRoot
    };

    // ----- UIContext class --------------------
    constexpr const char* const type_name_UIContext = "UIContext";

    static PyObject* _new_UIContext(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_UIContext);
        return nullptr;
    }

    static void _dealloc_UIContext(py::wrapper::Windows::UI::UIContext* self)
    {
        auto tp = Py_TYPE(self);
        self->obj = nullptr;
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* _from_UIContext(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::UI::UIContext>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_UIContext[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_UIContext), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_UIContext[] = {
        { }
    };

    static PyType_Slot _type_slots_UIContext[] = 
    {
        { Py_tp_new, _new_UIContext },
        { Py_tp_dealloc, _dealloc_UIContext },
        { Py_tp_methods, _methods_UIContext },
        { Py_tp_getset, _getset_UIContext },
        { },
    };

    static PyType_Spec type_spec_UIContext =
    {
        "_winsdk_Windows_UI.UIContext",
        sizeof(py::wrapper::Windows::UI::UIContext),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UIContext
    };

    // ----- Color struct --------------------
    constexpr const char* const type_name_Color = "Color";

    PyObject* _new_Color(PyTypeObject* type, PyObject* args, PyObject* kwds)
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            try
            {
                winrt::Windows::UI::Color return_value{};
                return py::convert(return_value);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }

        uint8_t _A{};
        uint8_t _R{};
        uint8_t _G{};
        uint8_t _B{};

        static const char* kwlist[] = {"a", "r", "g", "b", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "y1y1y1y1", const_cast<char**>(kwlist), &_A, &_R, &_G, &_B))
        {
            return nullptr;
        }

        try
        {
            winrt::Windows::UI::Color return_value{ _A, _R, _G, _B };
            return py::convert(return_value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_Color(py::wrapper::Windows::UI::Color* self)
    {
    }

    static PyObject* Color_get_A(py::wrapper::Windows::UI::Color* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.A);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Color_set_A(py::wrapper::Windows::UI::Color* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.A = py::converter<uint8_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Color_get_R(py::wrapper::Windows::UI::Color* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.R);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Color_set_R(py::wrapper::Windows::UI::Color* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.R = py::converter<uint8_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Color_get_G(py::wrapper::Windows::UI::Color* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.G);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Color_set_G(py::wrapper::Windows::UI::Color* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.G = py::converter<uint8_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* Color_get_B(py::wrapper::Windows::UI::Color* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.B);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int Color_set_B(py::wrapper::Windows::UI::Color* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.B = py::converter<uint8_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_Color[] = {
        { "a", reinterpret_cast<getter>(Color_get_A), reinterpret_cast<setter>(Color_set_A), nullptr, nullptr },
        { "r", reinterpret_cast<getter>(Color_get_R), reinterpret_cast<setter>(Color_set_R), nullptr, nullptr },
        { "g", reinterpret_cast<getter>(Color_get_G), reinterpret_cast<setter>(Color_set_G), nullptr, nullptr },
        { "b", reinterpret_cast<getter>(Color_get_B), reinterpret_cast<setter>(Color_set_B), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_Color[] = 
    {
        { Py_tp_new, _new_Color },
        { Py_tp_dealloc, _dealloc_Color },
        { Py_tp_getset, _getset_Color },
        { },
    };

    static PyType_Spec type_spec_Color =
    {
        "_winsdk_Windows_UI.Color",
        sizeof(py::wrapper::Windows::UI::Color),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_Color
    };

    // ----- WindowId struct --------------------
    constexpr const char* const type_name_WindowId = "WindowId";

    PyObject* _new_WindowId(PyTypeObject* type, PyObject* args, PyObject* kwds)
    {
        auto tuple_size = PyTuple_Size(args);

        if ((tuple_size == 0) && (kwds == nullptr))
        {
            try
            {
                winrt::Windows::UI::WindowId return_value{};
                return py::convert(return_value);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }

        uint64_t _Value{};

        static const char* kwlist[] = {"value", nullptr};
        if (!PyArg_ParseTupleAndKeywords(args, kwds, "K", const_cast<char**>(kwlist), &_Value))
        {
            return nullptr;
        }

        try
        {
            winrt::Windows::UI::WindowId return_value{ _Value };
            return py::convert(return_value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static void _dealloc_WindowId(py::wrapper::Windows::UI::WindowId* self)
    {
    }

    static PyObject* WindowId_get_Value(py::wrapper::Windows::UI::WindowId* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Value);
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int WindowId_set_Value(py::wrapper::Windows::UI::WindowId* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_AttributeError, "can't delete attribute");
            return -1;
        }

        try
        {
            self->obj.Value = py::converter<uint64_t>::convert_to(arg);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyGetSetDef _getset_WindowId[] = {
        { "value", reinterpret_cast<getter>(WindowId_get_Value), reinterpret_cast<setter>(WindowId_set_Value), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_WindowId[] = 
    {
        { Py_tp_new, _new_WindowId },
        { Py_tp_dealloc, _dealloc_WindowId },
        { Py_tp_getset, _getset_WindowId },
        { },
    };

    static PyType_Spec type_spec_WindowId =
    {
        "_winsdk_Windows_UI.WindowId",
        sizeof(py::wrapper::Windows::UI::WindowId),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_WindowId
    };

    // ----- Windows.UI Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::UI");

    static PyMethodDef module_methods[] = {
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_ColorHelper);
        Py_VISIT(state->type_Colors);
        Py_VISIT(state->type_UIContentRoot);
        Py_VISIT(state->type_UIContext);
        Py_VISIT(state->type_Color);
        Py_VISIT(state->type_WindowId);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_ColorHelper);
        Py_CLEAR(state->type_Colors);
        Py_CLEAR(state->type_UIContentRoot);
        Py_CLEAR(state->type_UIContext);
        Py_CLEAR(state->type_Color);
        Py_CLEAR(state->type_WindowId);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_UI",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::UI

PyMODINIT_FUNC PyInit__winsdk_Windows_UI(void) noexcept
{
    using namespace py::cpp::Windows::UI;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    state->type_ColorHelper = py::register_python_type(module.get(), type_name_ColorHelper, &type_spec_ColorHelper, bases.get());
    if (!state->type_ColorHelper)
    {
        return nullptr;
    }

    Py_INCREF(state->type_ColorHelper);

    state->type_Colors = py::register_python_type(module.get(), type_name_Colors, &type_spec_Colors, bases.get());
    if (!state->type_Colors)
    {
        return nullptr;
    }

    Py_INCREF(state->type_Colors);

    state->type_UIContentRoot = py::register_python_type(module.get(), type_name_UIContentRoot, &type_spec_UIContentRoot, bases.get());
    if (!state->type_UIContentRoot)
    {
        return nullptr;
    }

    Py_INCREF(state->type_UIContentRoot);

    state->type_UIContext = py::register_python_type(module.get(), type_name_UIContext, &type_spec_UIContext, bases.get());
    if (!state->type_UIContext)
    {
        return nullptr;
    }

    Py_INCREF(state->type_UIContext);

    state->type_Color = py::register_python_type(module.get(), type_name_Color, &type_spec_Color, bases.get());
    if (!state->type_Color)
    {
        return nullptr;
    }

    Py_INCREF(state->type_Color);

    state->type_WindowId = py::register_python_type(module.get(), type_name_WindowId, &type_spec_WindowId, bases.get());
    if (!state->type_WindowId)
    {
        return nullptr;
    }

    Py_INCREF(state->type_WindowId);


    return module.detach();
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::ColorHelper>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_ColorHelper;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::ColorHelper is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::Colors>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_Colors;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Colors is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::UIContentRoot>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_UIContentRoot;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::UIContentRoot is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::UIContext>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_UIContext;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::UIContext is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::Color>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_Color;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::Color is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::UI::WindowId>::get_python_type() noexcept {
    using namespace py::cpp::Windows::UI;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::UI");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_WindowId;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::UI::WindowId is not registered");
        return nullptr;
    }

    return python_type;
}
