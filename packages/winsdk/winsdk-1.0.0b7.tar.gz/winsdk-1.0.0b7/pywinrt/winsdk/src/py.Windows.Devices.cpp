// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.7

#include "pybase.h"
#include "py.Windows.Devices.h"


namespace py::cpp::Windows::Devices
{
    struct module_state
    {
        PyTypeObject* type_LowLevelDevicesAggregateProvider;
        PyTypeObject* type_LowLevelDevicesController;
        PyTypeObject* type_ILowLevelDevicesAggregateProvider;
    };

    // ----- LowLevelDevicesAggregateProvider class --------------------
    constexpr const char* const type_name_LowLevelDevicesAggregateProvider = "LowLevelDevicesAggregateProvider";

    static PyObject* _new_LowLevelDevicesAggregateProvider(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 5)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Adc::Provider::IAdcControllerProvider>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Pwm::Provider::IPwmControllerProvider>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Devices::Gpio::Provider::IGpioControllerProvider>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Devices::I2c::Provider::II2cControllerProvider>(args, 3);
                auto param4 = py::convert_to<winrt::Windows::Devices::Spi::Provider::ISpiControllerProvider>(args, 4);

                winrt::Windows::Devices::LowLevelDevicesAggregateProvider instance{ param0, param1, param2, param3, param4 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_LowLevelDevicesAggregateProvider(py::wrapper::Windows::Devices::LowLevelDevicesAggregateProvider* self)
    {
        auto tp = Py_TYPE(self);
        self->obj = nullptr;
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* LowLevelDevicesAggregateProvider_get_AdcControllerProvider(py::wrapper::Windows::Devices::LowLevelDevicesAggregateProvider* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.LowLevelDevicesAggregateProvider", L"AdcControllerProvider"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AdcControllerProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LowLevelDevicesAggregateProvider_get_GpioControllerProvider(py::wrapper::Windows::Devices::LowLevelDevicesAggregateProvider* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.LowLevelDevicesAggregateProvider", L"GpioControllerProvider"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.GpioControllerProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LowLevelDevicesAggregateProvider_get_I2cControllerProvider(py::wrapper::Windows::Devices::LowLevelDevicesAggregateProvider* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.LowLevelDevicesAggregateProvider", L"I2cControllerProvider"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.I2cControllerProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LowLevelDevicesAggregateProvider_get_PwmControllerProvider(py::wrapper::Windows::Devices::LowLevelDevicesAggregateProvider* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.LowLevelDevicesAggregateProvider", L"PwmControllerProvider"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PwmControllerProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LowLevelDevicesAggregateProvider_get_SpiControllerProvider(py::wrapper::Windows::Devices::LowLevelDevicesAggregateProvider* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.LowLevelDevicesAggregateProvider", L"SpiControllerProvider"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SpiControllerProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_LowLevelDevicesAggregateProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::LowLevelDevicesAggregateProvider>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LowLevelDevicesAggregateProvider[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_LowLevelDevicesAggregateProvider), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_LowLevelDevicesAggregateProvider[] = {
        { "adc_controller_provider", reinterpret_cast<getter>(LowLevelDevicesAggregateProvider_get_AdcControllerProvider), nullptr, nullptr, nullptr },
        { "gpio_controller_provider", reinterpret_cast<getter>(LowLevelDevicesAggregateProvider_get_GpioControllerProvider), nullptr, nullptr, nullptr },
        { "i2c_controller_provider", reinterpret_cast<getter>(LowLevelDevicesAggregateProvider_get_I2cControllerProvider), nullptr, nullptr, nullptr },
        { "pwm_controller_provider", reinterpret_cast<getter>(LowLevelDevicesAggregateProvider_get_PwmControllerProvider), nullptr, nullptr, nullptr },
        { "spi_controller_provider", reinterpret_cast<getter>(LowLevelDevicesAggregateProvider_get_SpiControllerProvider), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_LowLevelDevicesAggregateProvider[] = 
    {
        { Py_tp_new, _new_LowLevelDevicesAggregateProvider },
        { Py_tp_dealloc, _dealloc_LowLevelDevicesAggregateProvider },
        { Py_tp_methods, _methods_LowLevelDevicesAggregateProvider },
        { Py_tp_getset, _getset_LowLevelDevicesAggregateProvider },
        { },
    };

    static PyType_Spec type_spec_LowLevelDevicesAggregateProvider =
    {
        "_winsdk_Windows_Devices.LowLevelDevicesAggregateProvider",
        sizeof(py::wrapper::Windows::Devices::LowLevelDevicesAggregateProvider),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LowLevelDevicesAggregateProvider
    };

    // ----- LowLevelDevicesController class --------------------
    constexpr const char* const type_name_LowLevelDevicesController = "LowLevelDevicesController";

    static PyObject* _new_LowLevelDevicesController(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_LowLevelDevicesController);
        return nullptr;
    }

    static void _dealloc_LowLevelDevicesController(py::wrapper::Windows::Devices::LowLevelDevicesController* self)
    {
        auto tp = Py_TYPE(self);
        self->obj = nullptr;
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* LowLevelDevicesController_get_DefaultProvider(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.LowLevelDevicesController", L"DefaultProvider"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(winrt::Windows::Devices::LowLevelDevicesController::DefaultProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LowLevelDevicesController_put_DefaultProvider(PyObject* /*unused*/, PyObject* arg, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.LowLevelDevicesController", L"DefaultProvider"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Devices::ILowLevelDevicesAggregateProvider>(arg);

            winrt::Windows::Devices::LowLevelDevicesController::DefaultProvider(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_LowLevelDevicesController(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::LowLevelDevicesController>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LowLevelDevicesController[] = {
        { "get_default_provider", reinterpret_cast<PyCFunction>(LowLevelDevicesController_get_DefaultProvider), METH_NOARGS | METH_STATIC, nullptr },
        { "put_default_provider", reinterpret_cast<PyCFunction>(LowLevelDevicesController_put_DefaultProvider), METH_O | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_LowLevelDevicesController), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_LowLevelDevicesController[] = {
        { }
    };

    static PyType_Slot _type_slots_LowLevelDevicesController[] = 
    {
        { Py_tp_new, _new_LowLevelDevicesController },
        { Py_tp_dealloc, _dealloc_LowLevelDevicesController },
        { Py_tp_methods, _methods_LowLevelDevicesController },
        { Py_tp_getset, _getset_LowLevelDevicesController },
        { },
    };

    static PyType_Spec type_spec_LowLevelDevicesController =
    {
        "_winsdk_Windows_Devices.LowLevelDevicesController",
        sizeof(py::wrapper::Windows::Devices::LowLevelDevicesController),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LowLevelDevicesController
    };

    // ----- ILowLevelDevicesAggregateProvider interface --------------------
    constexpr const char* const type_name_ILowLevelDevicesAggregateProvider = "ILowLevelDevicesAggregateProvider";

    static PyObject* _new_ILowLevelDevicesAggregateProvider(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(type_name_ILowLevelDevicesAggregateProvider);
        return nullptr;
    }

    static void _dealloc_ILowLevelDevicesAggregateProvider(py::wrapper::Windows::Devices::ILowLevelDevicesAggregateProvider* self)
    {
        auto tp = Py_TYPE(self);
        self->obj = nullptr;
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ILowLevelDevicesAggregateProvider_get_AdcControllerProvider(py::wrapper::Windows::Devices::ILowLevelDevicesAggregateProvider* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.ILowLevelDevicesAggregateProvider", L"AdcControllerProvider"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.AdcControllerProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ILowLevelDevicesAggregateProvider_get_GpioControllerProvider(py::wrapper::Windows::Devices::ILowLevelDevicesAggregateProvider* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.ILowLevelDevicesAggregateProvider", L"GpioControllerProvider"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.GpioControllerProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ILowLevelDevicesAggregateProvider_get_I2cControllerProvider(py::wrapper::Windows::Devices::ILowLevelDevicesAggregateProvider* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.ILowLevelDevicesAggregateProvider", L"I2cControllerProvider"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.I2cControllerProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ILowLevelDevicesAggregateProvider_get_PwmControllerProvider(py::wrapper::Windows::Devices::ILowLevelDevicesAggregateProvider* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.ILowLevelDevicesAggregateProvider", L"PwmControllerProvider"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.PwmControllerProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ILowLevelDevicesAggregateProvider_get_SpiControllerProvider(py::wrapper::Windows::Devices::ILowLevelDevicesAggregateProvider* self, void* /*unused*/) noexcept
    {
        if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsPropertyPresent(L"Windows.Devices.ILowLevelDevicesAggregateProvider", L"SpiControllerProvider"))
        {
            PyErr_SetString(PyExc_AttributeError, "property is not available in this version of Windows");
            return nullptr;
        }

        try
        {
            return py::convert(self->obj.SpiControllerProvider());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ILowLevelDevicesAggregateProvider(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Devices::ILowLevelDevicesAggregateProvider>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ILowLevelDevicesAggregateProvider[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_ILowLevelDevicesAggregateProvider), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ILowLevelDevicesAggregateProvider[] = {
        { "adc_controller_provider", reinterpret_cast<getter>(ILowLevelDevicesAggregateProvider_get_AdcControllerProvider), nullptr, nullptr, nullptr },
        { "gpio_controller_provider", reinterpret_cast<getter>(ILowLevelDevicesAggregateProvider_get_GpioControllerProvider), nullptr, nullptr, nullptr },
        { "i2c_controller_provider", reinterpret_cast<getter>(ILowLevelDevicesAggregateProvider_get_I2cControllerProvider), nullptr, nullptr, nullptr },
        { "pwm_controller_provider", reinterpret_cast<getter>(ILowLevelDevicesAggregateProvider_get_PwmControllerProvider), nullptr, nullptr, nullptr },
        { "spi_controller_provider", reinterpret_cast<getter>(ILowLevelDevicesAggregateProvider_get_SpiControllerProvider), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ILowLevelDevicesAggregateProvider[] = 
    {
        { Py_tp_new, _new_ILowLevelDevicesAggregateProvider },
        { Py_tp_dealloc, _dealloc_ILowLevelDevicesAggregateProvider },
        { Py_tp_methods, _methods_ILowLevelDevicesAggregateProvider },
        { Py_tp_getset, _getset_ILowLevelDevicesAggregateProvider },
        { },
    };

    static PyType_Spec type_spec_ILowLevelDevicesAggregateProvider =
    {
        "_winsdk_Windows_Devices.ILowLevelDevicesAggregateProvider",
        sizeof(py::wrapper::Windows::Devices::ILowLevelDevicesAggregateProvider),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ILowLevelDevicesAggregateProvider
    };

    // ----- Windows.Devices Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Devices");

    static PyMethodDef module_methods[] = {
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_LowLevelDevicesAggregateProvider);
        Py_VISIT(state->type_LowLevelDevicesController);
        Py_VISIT(state->type_ILowLevelDevicesAggregateProvider);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_LowLevelDevicesAggregateProvider);
        Py_CLEAR(state->type_LowLevelDevicesController);
        Py_CLEAR(state->type_ILowLevelDevicesAggregateProvider);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Devices",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::Devices

PyMODINIT_FUNC PyInit__winsdk_Windows_Devices(void) noexcept
{
    using namespace py::cpp::Windows::Devices;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    state->type_LowLevelDevicesAggregateProvider = py::register_python_type(module.get(), type_name_LowLevelDevicesAggregateProvider, &type_spec_LowLevelDevicesAggregateProvider, bases.get());
    if (!state->type_LowLevelDevicesAggregateProvider)
    {
        return nullptr;
    }

    Py_INCREF(state->type_LowLevelDevicesAggregateProvider);

    state->type_LowLevelDevicesController = py::register_python_type(module.get(), type_name_LowLevelDevicesController, &type_spec_LowLevelDevicesController, bases.get());
    if (!state->type_LowLevelDevicesController)
    {
        return nullptr;
    }

    Py_INCREF(state->type_LowLevelDevicesController);

    state->type_ILowLevelDevicesAggregateProvider = py::register_python_type(module.get(), type_name_ILowLevelDevicesAggregateProvider, &type_spec_ILowLevelDevicesAggregateProvider, bases.get());
    if (!state->type_ILowLevelDevicesAggregateProvider)
    {
        return nullptr;
    }

    Py_INCREF(state->type_ILowLevelDevicesAggregateProvider);


    return module.detach();
}

PyTypeObject* py::winrt_type<winrt::Windows::Devices::LowLevelDevicesAggregateProvider>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Devices;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Devices");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_LowLevelDevicesAggregateProvider;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Devices::LowLevelDevicesAggregateProvider is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Devices::LowLevelDevicesController>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Devices;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Devices");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_LowLevelDevicesController;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Devices::LowLevelDevicesController is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Devices::ILowLevelDevicesAggregateProvider>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Devices;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Devices");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_ILowLevelDevicesAggregateProvider;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Devices::ILowLevelDevicesAggregateProvider is not registered");
        return nullptr;
    }

    return python_type;
}
