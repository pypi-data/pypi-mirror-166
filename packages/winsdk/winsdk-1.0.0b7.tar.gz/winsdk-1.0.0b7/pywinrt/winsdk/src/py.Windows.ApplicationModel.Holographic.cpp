// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.7

#include "pybase.h"
#include "py.Windows.ApplicationModel.Holographic.h"


namespace py::cpp::Windows::ApplicationModel::Holographic
{
    struct module_state
    {
        PyTypeObject* type_HolographicKeyboard;
    };

    // ----- HolographicKeyboard class --------------------
    constexpr const char* const type_name_HolographicKeyboard = "HolographicKeyboard";

    static PyObject* _new_HolographicKeyboard(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(type_name_HolographicKeyboard);
        return nullptr;
    }

    static void _dealloc_HolographicKeyboard(py::wrapper::Windows::ApplicationModel::Holographic::HolographicKeyboard* self)
    {
        auto tp = Py_TYPE(self);
        self->obj = nullptr;
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* HolographicKeyboard_GetDefault(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Holographic.HolographicKeyboard", L"GetDefault", 0))
            {
                PyErr_SetString(PyExc_AttributeError, "method 0 args is not available in this version of Windows");
                return nullptr;
            }

            try
            {
                return py::convert(winrt::Windows::ApplicationModel::Holographic::HolographicKeyboard::GetDefault());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicKeyboard_ResetPlacementOverride(py::wrapper::Windows::ApplicationModel::Holographic::HolographicKeyboard* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Holographic.HolographicKeyboard", L"ResetPlacementOverride", 0))
            {
                PyErr_SetString(PyExc_AttributeError, "method 0 args is not available in this version of Windows");
                return nullptr;
            }

            try
            {
                self->obj.ResetPlacementOverride();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* HolographicKeyboard_SetPlacementOverride(py::wrapper::Windows::ApplicationModel::Holographic::HolographicKeyboard* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 3)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Holographic.HolographicKeyboard", L"SetPlacementOverride", 3))
            {
                PyErr_SetString(PyExc_AttributeError, "method 3 args is not available in this version of Windows");
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Numerics::quaternion>(args, 2);

                self->obj.SetPlacementOverride(param0, param1, param2);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            if (!winrt::Windows::Foundation::Metadata::ApiInformation::IsMethodPresent(L"Windows.ApplicationModel.Holographic.HolographicKeyboard", L"SetPlacementOverride", 4))
            {
                PyErr_SetString(PyExc_AttributeError, "method 4 args is not available in this version of Windows");
                return nullptr;
            }

            try
            {
                auto param0 = py::convert_to<winrt::Windows::Perception::Spatial::SpatialCoordinateSystem>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Numerics::float3>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Foundation::Numerics::quaternion>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Foundation::Numerics::float2>(args, 3);

                self->obj.SetPlacementOverride(param0, param1, param2, param3);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_HolographicKeyboard(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::Holographic::HolographicKeyboard>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_HolographicKeyboard[] = {
        { "get_default", reinterpret_cast<PyCFunction>(HolographicKeyboard_GetDefault), METH_VARARGS | METH_STATIC, nullptr },
        { "reset_placement_override", reinterpret_cast<PyCFunction>(HolographicKeyboard_ResetPlacementOverride), METH_VARARGS, nullptr },
        { "set_placement_override", reinterpret_cast<PyCFunction>(HolographicKeyboard_SetPlacementOverride), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_HolographicKeyboard), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_HolographicKeyboard[] = {
        { }
    };

    static PyType_Slot _type_slots_HolographicKeyboard[] = 
    {
        { Py_tp_new, _new_HolographicKeyboard },
        { Py_tp_dealloc, _dealloc_HolographicKeyboard },
        { Py_tp_methods, _methods_HolographicKeyboard },
        { Py_tp_getset, _getset_HolographicKeyboard },
        { },
    };

    static PyType_Spec type_spec_HolographicKeyboard =
    {
        "_winsdk_Windows_ApplicationModel_Holographic.HolographicKeyboard",
        sizeof(py::wrapper::Windows::ApplicationModel::Holographic::HolographicKeyboard),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_HolographicKeyboard
    };

    // ----- Windows.ApplicationModel.Holographic Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::ApplicationModel::Holographic");

    static PyMethodDef module_methods[] = {
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_HolographicKeyboard);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_HolographicKeyboard);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_ApplicationModel_Holographic",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::ApplicationModel::Holographic

PyMODINIT_FUNC PyInit__winsdk_Windows_ApplicationModel_Holographic(void) noexcept
{
    using namespace py::cpp::Windows::ApplicationModel::Holographic;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    state->type_HolographicKeyboard = py::register_python_type(module.get(), type_name_HolographicKeyboard, &type_spec_HolographicKeyboard, bases.get());
    if (!state->type_HolographicKeyboard)
    {
        return nullptr;
    }

    Py_INCREF(state->type_HolographicKeyboard);


    return module.detach();
}

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::Holographic::HolographicKeyboard>::get_python_type() noexcept {
    using namespace py::cpp::Windows::ApplicationModel::Holographic;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::ApplicationModel::Holographic");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_HolographicKeyboard;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::ApplicationModel::Holographic::HolographicKeyboard is not registered");
        return nullptr;
    }

    return python_type;
}
