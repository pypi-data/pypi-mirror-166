# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.7

import enum
import datetime
import sys
import types
import typing

import winsdk._winrt as _winrt
import winsdk.windows.devices.enumeration
import winsdk.windows.foundation
import winsdk.windows.foundation.collections
import winsdk.windows.foundation.numerics
import winsdk.windows.graphics.imaging
import winsdk.windows.media
import winsdk.windows.media.devices.core

class PerceptionFrameSourceAccessStatus(enum.IntEnum):
    UNSPECIFIED = 0
    ALLOWED = 1
    DENIED_BY_USER = 2
    DENIED_BY_SYSTEM = 3

class PerceptionFrameSourcePropertyChangeStatus(enum.IntEnum):
    UNKNOWN = 0
    ACCEPTED = 1
    LOST_CONTROL = 2
    PROPERTY_NOT_SUPPORTED = 3
    PROPERTY_READ_ONLY = 4
    VALUE_OUT_OF_RANGE = 5

Self = typing.TypeVar('Self')

class KnownCameraIntrinsicsProperties(_winrt.Object):
    focal_length: str
    principal_point: str
    radial_distortion: str
    tangential_distortion: str
    @staticmethod
    def _from(obj: _winrt.Object) -> KnownCameraIntrinsicsProperties: ...

class KnownPerceptionColorFrameSourceProperties(_winrt.Object):
    auto_exposure_enabled: str
    exposure: str
    exposure_compensation: str
    @staticmethod
    def _from(obj: _winrt.Object) -> KnownPerceptionColorFrameSourceProperties: ...

class KnownPerceptionDepthFrameSourceProperties(_winrt.Object):
    max_depth: str
    min_depth: str
    @staticmethod
    def _from(obj: _winrt.Object) -> KnownPerceptionDepthFrameSourceProperties: ...

class KnownPerceptionFrameSourceProperties(_winrt.Object):
    device_model_version: str
    enclosure_location: str
    frame_kind: str
    id: str
    physical_device_ids: str
    device_id: str
    @staticmethod
    def _from(obj: _winrt.Object) -> KnownPerceptionFrameSourceProperties: ...

class KnownPerceptionInfraredFrameSourceProperties(_winrt.Object):
    active_illumination_enabled: str
    ambient_subtraction_enabled: str
    auto_exposure_enabled: str
    exposure: str
    exposure_compensation: str
    interleaved_illumination_enabled: str
    structure_light_pattern_enabled: str
    @staticmethod
    def _from(obj: _winrt.Object) -> KnownPerceptionInfraredFrameSourceProperties: ...

class KnownPerceptionVideoFrameSourceProperties(_winrt.Object):
    available_video_profiles: str
    camera_intrinsics: str
    is_mirrored: str
    supported_video_profiles: str
    video_profile: str
    @staticmethod
    def _from(obj: _winrt.Object) -> KnownPerceptionVideoFrameSourceProperties: ...

class KnownPerceptionVideoProfileProperties(_winrt.Object):
    bitmap_alpha_mode: str
    bitmap_pixel_format: str
    frame_duration: str
    height: str
    width: str
    @staticmethod
    def _from(obj: _winrt.Object) -> KnownPerceptionVideoProfileProperties: ...

class PerceptionColorFrame(_winrt.Object):
    video_frame: typing.Optional[winsdk.windows.media.VideoFrame]
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionColorFrame: ...
    def close(self) -> None: ...

class PerceptionColorFrameArrivedEventArgs(_winrt.Object):
    relative_time: datetime.timedelta
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionColorFrameArrivedEventArgs: ...
    def try_open_frame(self) -> typing.Optional[PerceptionColorFrame]: ...

class PerceptionColorFrameReader(_winrt.Object):
    is_paused: _winrt.Boolean
    source: typing.Optional[PerceptionColorFrameSource]
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionColorFrameReader: ...
    def close(self) -> None: ...
    def try_read_latest_frame(self) -> typing.Optional[PerceptionColorFrame]: ...
    def add_frame_arrived(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionColorFrameReader, PerceptionColorFrameArrivedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_frame_arrived(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

class PerceptionColorFrameSource(_winrt.Object):
    active: _winrt.Boolean
    available: _winrt.Boolean
    available_video_profiles: typing.Optional[winsdk.windows.foundation.collections.IVectorView[PerceptionVideoProfile]]
    camera_intrinsics: typing.Optional[winsdk.windows.media.devices.core.CameraIntrinsics]
    device_kind: str
    display_name: str
    id: str
    is_controlled: _winrt.Boolean
    properties: typing.Optional[winsdk.windows.foundation.collections.IMapView[str, _winrt.Object]]
    supported_video_profiles: typing.Optional[winsdk.windows.foundation.collections.IVectorView[PerceptionVideoProfile]]
    video_profile: typing.Optional[PerceptionVideoProfile]
    device_id: str
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionColorFrameSource: ...
    def acquire_control_session(self) -> typing.Optional[PerceptionControlSession]: ...
    def can_control_independently_from(self, target_id: str) -> _winrt.Boolean: ...
    @staticmethod
    def create_watcher() -> typing.Optional[PerceptionColorFrameSourceWatcher]: ...
    @staticmethod
    def find_all_async() -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[PerceptionColorFrameSource]]: ...
    @staticmethod
    def from_id_async(id: str) -> winsdk.windows.foundation.IAsyncOperation[PerceptionColorFrameSource]: ...
    def is_correlated_with(self, target_id: str) -> _winrt.Boolean: ...
    def open_reader(self) -> typing.Optional[PerceptionColorFrameReader]: ...
    @staticmethod
    def request_access_async() -> winsdk.windows.foundation.IAsyncOperation[PerceptionFrameSourceAccessStatus]: ...
    def try_get_depth_correlated_camera_intrinsics_async(self, correlated_depth_frame_source: typing.Optional[PerceptionDepthFrameSource]) -> winsdk.windows.foundation.IAsyncOperation[PerceptionDepthCorrelatedCameraIntrinsics]: ...
    def try_get_depth_correlated_coordinate_mapper_async(self, target_source_id: str, correlated_depth_frame_source: typing.Optional[PerceptionDepthFrameSource]) -> winsdk.windows.foundation.IAsyncOperation[PerceptionDepthCorrelatedCoordinateMapper]: ...
    def try_get_transform_to(self, target_id: str) -> typing.Tuple[_winrt.Boolean, winsdk.windows.foundation.numerics.Matrix4x4]: ...
    def try_set_video_profile_async(self, control_session: typing.Optional[PerceptionControlSession], profile: typing.Optional[PerceptionVideoProfile]) -> winsdk.windows.foundation.IAsyncOperation[PerceptionFrameSourcePropertyChangeResult]: ...
    def add_active_changed(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionColorFrameSource, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_active_changed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_available_changed(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionColorFrameSource, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_available_changed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_camera_intrinsics_changed(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionColorFrameSource, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_camera_intrinsics_changed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_properties_changed(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionColorFrameSource, PerceptionFrameSourcePropertiesChangedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_properties_changed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_video_profile_changed(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionColorFrameSource, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_video_profile_changed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

class PerceptionColorFrameSourceAddedEventArgs(_winrt.Object):
    frame_source: typing.Optional[PerceptionColorFrameSource]
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionColorFrameSourceAddedEventArgs: ...

class PerceptionColorFrameSourceRemovedEventArgs(_winrt.Object):
    frame_source: typing.Optional[PerceptionColorFrameSource]
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionColorFrameSourceRemovedEventArgs: ...

class PerceptionColorFrameSourceWatcher(_winrt.Object):
    status: winsdk.windows.devices.enumeration.DeviceWatcherStatus
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionColorFrameSourceWatcher: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def add_enumeration_completed(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionColorFrameSourceWatcher, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_enumeration_completed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_source_added(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionColorFrameSourceWatcher, PerceptionColorFrameSourceAddedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_source_added(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_source_removed(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionColorFrameSourceWatcher, PerceptionColorFrameSourceRemovedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_source_removed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_stopped(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionColorFrameSourceWatcher, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_stopped(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

class PerceptionControlSession(_winrt.Object):
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionControlSession: ...
    def close(self) -> None: ...
    def try_set_property_async(self, name: str, value: typing.Optional[_winrt.Object]) -> winsdk.windows.foundation.IAsyncOperation[PerceptionFrameSourcePropertyChangeResult]: ...
    def add_control_lost(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionControlSession, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_control_lost(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

class PerceptionDepthCorrelatedCameraIntrinsics(_winrt.Object):
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionDepthCorrelatedCameraIntrinsics: ...
    def unproject_all_pixels_at_correlated_depth_async(self, depth_frame: typing.Optional[PerceptionDepthFrame], results_size: _winrt.UInt32) -> typing.Tuple[typing.Optional[winsdk.windows.foundation.IAsyncAction], typing.List[winsdk.windows.foundation.numerics.Vector3]]: ...
    def unproject_pixel_at_correlated_depth(self, pixel_coordinate: winsdk.windows.foundation.Point, depth_frame: typing.Optional[PerceptionDepthFrame]) -> winsdk.windows.foundation.numerics.Vector3: ...
    def unproject_pixels_at_correlated_depth(self, source_coordinates: typing.Sequence[winsdk.windows.foundation.Point], depth_frame: typing.Optional[PerceptionDepthFrame], results_size: _winrt.UInt32) -> typing.List[winsdk.windows.foundation.numerics.Vector3]: ...
    def unproject_region_pixels_at_correlated_depth_async(self, region: winsdk.windows.foundation.Rect, depth_frame: typing.Optional[PerceptionDepthFrame], results_size: _winrt.UInt32) -> typing.Tuple[typing.Optional[winsdk.windows.foundation.IAsyncAction], typing.List[winsdk.windows.foundation.numerics.Vector3]]: ...

class PerceptionDepthCorrelatedCoordinateMapper(_winrt.Object):
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionDepthCorrelatedCoordinateMapper: ...
    def map_all_pixels_to_target_async(self, depth_frame: typing.Optional[PerceptionDepthFrame], target_coordinates_size: _winrt.UInt32) -> typing.Tuple[typing.Optional[winsdk.windows.foundation.IAsyncAction], typing.List[winsdk.windows.foundation.Point]]: ...
    def map_pixel_to_target(self, source_pixel_coordinate: winsdk.windows.foundation.Point, depth_frame: typing.Optional[PerceptionDepthFrame]) -> winsdk.windows.foundation.Point: ...
    def map_pixels_to_target(self, source_coordinates: typing.Sequence[winsdk.windows.foundation.Point], depth_frame: typing.Optional[PerceptionDepthFrame], results_size: _winrt.UInt32) -> typing.List[winsdk.windows.foundation.Point]: ...
    def map_region_of_pixels_to_target_async(self, region: winsdk.windows.foundation.Rect, depth_frame: typing.Optional[PerceptionDepthFrame], target_coordinates_size: _winrt.UInt32) -> typing.Tuple[typing.Optional[winsdk.windows.foundation.IAsyncAction], typing.List[winsdk.windows.foundation.Point]]: ...

class PerceptionDepthFrame(_winrt.Object):
    video_frame: typing.Optional[winsdk.windows.media.VideoFrame]
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionDepthFrame: ...
    def close(self) -> None: ...

class PerceptionDepthFrameArrivedEventArgs(_winrt.Object):
    relative_time: datetime.timedelta
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionDepthFrameArrivedEventArgs: ...
    def try_open_frame(self) -> typing.Optional[PerceptionDepthFrame]: ...

class PerceptionDepthFrameReader(_winrt.Object):
    is_paused: _winrt.Boolean
    source: typing.Optional[PerceptionDepthFrameSource]
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionDepthFrameReader: ...
    def close(self) -> None: ...
    def try_read_latest_frame(self) -> typing.Optional[PerceptionDepthFrame]: ...
    def add_frame_arrived(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionDepthFrameReader, PerceptionDepthFrameArrivedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_frame_arrived(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

class PerceptionDepthFrameSource(_winrt.Object):
    active: _winrt.Boolean
    available: _winrt.Boolean
    available_video_profiles: typing.Optional[winsdk.windows.foundation.collections.IVectorView[PerceptionVideoProfile]]
    camera_intrinsics: typing.Optional[winsdk.windows.media.devices.core.CameraIntrinsics]
    device_kind: str
    display_name: str
    id: str
    is_controlled: _winrt.Boolean
    properties: typing.Optional[winsdk.windows.foundation.collections.IMapView[str, _winrt.Object]]
    supported_video_profiles: typing.Optional[winsdk.windows.foundation.collections.IVectorView[PerceptionVideoProfile]]
    video_profile: typing.Optional[PerceptionVideoProfile]
    device_id: str
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionDepthFrameSource: ...
    def acquire_control_session(self) -> typing.Optional[PerceptionControlSession]: ...
    def can_control_independently_from(self, target_id: str) -> _winrt.Boolean: ...
    @staticmethod
    def create_watcher() -> typing.Optional[PerceptionDepthFrameSourceWatcher]: ...
    @staticmethod
    def find_all_async() -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[PerceptionDepthFrameSource]]: ...
    @staticmethod
    def from_id_async(id: str) -> winsdk.windows.foundation.IAsyncOperation[PerceptionDepthFrameSource]: ...
    def is_correlated_with(self, target_id: str) -> _winrt.Boolean: ...
    def open_reader(self) -> typing.Optional[PerceptionDepthFrameReader]: ...
    @staticmethod
    def request_access_async() -> winsdk.windows.foundation.IAsyncOperation[PerceptionFrameSourceAccessStatus]: ...
    def try_get_depth_correlated_camera_intrinsics_async(self, target: typing.Optional[PerceptionDepthFrameSource]) -> winsdk.windows.foundation.IAsyncOperation[PerceptionDepthCorrelatedCameraIntrinsics]: ...
    def try_get_depth_correlated_coordinate_mapper_async(self, target_id: str, depth_frame_source_to_map_with: typing.Optional[PerceptionDepthFrameSource]) -> winsdk.windows.foundation.IAsyncOperation[PerceptionDepthCorrelatedCoordinateMapper]: ...
    def try_get_transform_to(self, target_id: str) -> typing.Tuple[_winrt.Boolean, winsdk.windows.foundation.numerics.Matrix4x4]: ...
    def try_set_video_profile_async(self, control_session: typing.Optional[PerceptionControlSession], profile: typing.Optional[PerceptionVideoProfile]) -> winsdk.windows.foundation.IAsyncOperation[PerceptionFrameSourcePropertyChangeResult]: ...
    def add_active_changed(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionDepthFrameSource, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_active_changed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_available_changed(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionDepthFrameSource, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_available_changed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_camera_intrinsics_changed(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionDepthFrameSource, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_camera_intrinsics_changed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_properties_changed(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionDepthFrameSource, PerceptionFrameSourcePropertiesChangedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_properties_changed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_video_profile_changed(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionDepthFrameSource, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_video_profile_changed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

class PerceptionDepthFrameSourceAddedEventArgs(_winrt.Object):
    frame_source: typing.Optional[PerceptionDepthFrameSource]
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionDepthFrameSourceAddedEventArgs: ...

class PerceptionDepthFrameSourceRemovedEventArgs(_winrt.Object):
    frame_source: typing.Optional[PerceptionDepthFrameSource]
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionDepthFrameSourceRemovedEventArgs: ...

class PerceptionDepthFrameSourceWatcher(_winrt.Object):
    status: winsdk.windows.devices.enumeration.DeviceWatcherStatus
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionDepthFrameSourceWatcher: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def add_enumeration_completed(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionDepthFrameSourceWatcher, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_enumeration_completed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_source_added(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionDepthFrameSourceWatcher, PerceptionDepthFrameSourceAddedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_source_added(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_source_removed(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionDepthFrameSourceWatcher, PerceptionDepthFrameSourceRemovedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_source_removed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_stopped(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionDepthFrameSourceWatcher, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_stopped(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

class PerceptionFrameSourcePropertiesChangedEventArgs(_winrt.Object):
    collection_change: winsdk.windows.foundation.collections.CollectionChange
    key: str
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionFrameSourcePropertiesChangedEventArgs: ...

class PerceptionFrameSourcePropertyChangeResult(_winrt.Object):
    new_value: typing.Optional[_winrt.Object]
    status: PerceptionFrameSourcePropertyChangeStatus
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionFrameSourcePropertyChangeResult: ...

class PerceptionInfraredFrame(_winrt.Object):
    video_frame: typing.Optional[winsdk.windows.media.VideoFrame]
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionInfraredFrame: ...
    def close(self) -> None: ...

class PerceptionInfraredFrameArrivedEventArgs(_winrt.Object):
    relative_time: datetime.timedelta
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionInfraredFrameArrivedEventArgs: ...
    def try_open_frame(self) -> typing.Optional[PerceptionInfraredFrame]: ...

class PerceptionInfraredFrameReader(_winrt.Object):
    is_paused: _winrt.Boolean
    source: typing.Optional[PerceptionInfraredFrameSource]
    def __enter__(self: Self) -> Self: ...
    def __exit__(self, *args) -> None: ...
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionInfraredFrameReader: ...
    def close(self) -> None: ...
    def try_read_latest_frame(self) -> typing.Optional[PerceptionInfraredFrame]: ...
    def add_frame_arrived(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionInfraredFrameReader, PerceptionInfraredFrameArrivedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_frame_arrived(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

class PerceptionInfraredFrameSource(_winrt.Object):
    active: _winrt.Boolean
    available: _winrt.Boolean
    available_video_profiles: typing.Optional[winsdk.windows.foundation.collections.IVectorView[PerceptionVideoProfile]]
    camera_intrinsics: typing.Optional[winsdk.windows.media.devices.core.CameraIntrinsics]
    device_kind: str
    display_name: str
    id: str
    is_controlled: _winrt.Boolean
    properties: typing.Optional[winsdk.windows.foundation.collections.IMapView[str, _winrt.Object]]
    supported_video_profiles: typing.Optional[winsdk.windows.foundation.collections.IVectorView[PerceptionVideoProfile]]
    video_profile: typing.Optional[PerceptionVideoProfile]
    device_id: str
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionInfraredFrameSource: ...
    def acquire_control_session(self) -> typing.Optional[PerceptionControlSession]: ...
    def can_control_independently_from(self, target_id: str) -> _winrt.Boolean: ...
    @staticmethod
    def create_watcher() -> typing.Optional[PerceptionInfraredFrameSourceWatcher]: ...
    @staticmethod
    def find_all_async() -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[PerceptionInfraredFrameSource]]: ...
    @staticmethod
    def from_id_async(id: str) -> winsdk.windows.foundation.IAsyncOperation[PerceptionInfraredFrameSource]: ...
    def is_correlated_with(self, target_id: str) -> _winrt.Boolean: ...
    def open_reader(self) -> typing.Optional[PerceptionInfraredFrameReader]: ...
    @staticmethod
    def request_access_async() -> winsdk.windows.foundation.IAsyncOperation[PerceptionFrameSourceAccessStatus]: ...
    def try_get_depth_correlated_camera_intrinsics_async(self, target: typing.Optional[PerceptionDepthFrameSource]) -> winsdk.windows.foundation.IAsyncOperation[PerceptionDepthCorrelatedCameraIntrinsics]: ...
    def try_get_depth_correlated_coordinate_mapper_async(self, target_id: str, depth_frame_source_to_map_with: typing.Optional[PerceptionDepthFrameSource]) -> winsdk.windows.foundation.IAsyncOperation[PerceptionDepthCorrelatedCoordinateMapper]: ...
    def try_get_transform_to(self, target_id: str) -> typing.Tuple[_winrt.Boolean, winsdk.windows.foundation.numerics.Matrix4x4]: ...
    def try_set_video_profile_async(self, control_session: typing.Optional[PerceptionControlSession], profile: typing.Optional[PerceptionVideoProfile]) -> winsdk.windows.foundation.IAsyncOperation[PerceptionFrameSourcePropertyChangeResult]: ...
    def add_active_changed(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionInfraredFrameSource, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_active_changed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_available_changed(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionInfraredFrameSource, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_available_changed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_camera_intrinsics_changed(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionInfraredFrameSource, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_camera_intrinsics_changed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_properties_changed(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionInfraredFrameSource, PerceptionFrameSourcePropertiesChangedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_properties_changed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_video_profile_changed(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionInfraredFrameSource, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_video_profile_changed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

class PerceptionInfraredFrameSourceAddedEventArgs(_winrt.Object):
    frame_source: typing.Optional[PerceptionInfraredFrameSource]
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionInfraredFrameSourceAddedEventArgs: ...

class PerceptionInfraredFrameSourceRemovedEventArgs(_winrt.Object):
    frame_source: typing.Optional[PerceptionInfraredFrameSource]
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionInfraredFrameSourceRemovedEventArgs: ...

class PerceptionInfraredFrameSourceWatcher(_winrt.Object):
    status: winsdk.windows.devices.enumeration.DeviceWatcherStatus
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionInfraredFrameSourceWatcher: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def add_enumeration_completed(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionInfraredFrameSourceWatcher, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_enumeration_completed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_source_added(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionInfraredFrameSourceWatcher, PerceptionInfraredFrameSourceAddedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_source_added(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_source_removed(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionInfraredFrameSourceWatcher, PerceptionInfraredFrameSourceRemovedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_source_removed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_stopped(self, handler: winsdk.windows.foundation.TypedEventHandler[PerceptionInfraredFrameSourceWatcher, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_stopped(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

class PerceptionVideoProfile(_winrt.Object):
    bitmap_alpha_mode: winsdk.windows.graphics.imaging.BitmapAlphaMode
    bitmap_pixel_format: winsdk.windows.graphics.imaging.BitmapPixelFormat
    frame_duration: datetime.timedelta
    height: _winrt.Int32
    width: _winrt.Int32
    @staticmethod
    def _from(obj: _winrt.Object) -> PerceptionVideoProfile: ...
    def is_equal(self, other: typing.Optional[PerceptionVideoProfile]) -> _winrt.Boolean: ...

