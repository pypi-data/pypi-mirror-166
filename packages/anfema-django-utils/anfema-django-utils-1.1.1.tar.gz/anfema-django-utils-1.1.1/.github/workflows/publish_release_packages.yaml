on:
  release:
    types: [published]

name: Upload package to PyPI and GitHub release on release publish
jobs:
  generate:
    name: Create release-artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade packaging setuptools build
      - name: Get version from tag
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/v}
      - name: Check package version (compare package version with tag)
        id: check_package_version
        shell: python
        run: |
          from packaging.version import parse
          from setuptools.config.pyprojecttoml import read_configuration
          package_version = read_configuration('pyproject.toml')['project']['version']
          if parse(package_version) != parse('${{ steps.get_version.outputs.VERSION }}'):
            print(f'version mismatch: {package_version} (package) vs ${{ steps.get_version.outputs.VERSION }} (tag)')
            exit(1)
      - name: Build sdist & wheel
        run: |
          python -m build --sdist --wheel
      - name: Update release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          # bodyFile: "body.md"
          generateReleaseNotes: true
          allowUpdates: true
          # omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish a Python distribution to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          # password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          # repository_url: https://test.pypi.org/legacy/
