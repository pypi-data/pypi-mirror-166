# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['postprocessing_variant_calls', 'postprocessing_variant_calls.vardict']

package_data = \
{'': ['*']}

install_requires = \
['PyVCF3', 'typer[all]']

entry_points = \
{'console_scripts': ['pv = postprocessing_variant_calls.main:app']}

setup_kwargs = {
    'name': 'postprocessing-variant-calls',
    'version': '0.1.5',
    'description': 'This hosts multiple scripts necessary for filtering and processing of variant calls in the vcfs/txt file generated by callers.',
    'long_description': '# Post-processing of variant calls\n\nThis hosts multiple scripts necessary for filtering and processing of variant calls in the vcfs/txt file generated by callers.\n\n## Callers Supported\n`pv` is the main command for the `postprocessing_variant_calls` package see `pv --help` to see supported variant callers commands. \n\n### VarDictJava\n\nThe sub-command `pv vardict` allows users to perform post-processing on VarDictJava output. The two supported inputs to `pv vardict` from VarDictJava are `single` and `case-control` vcfs. \n\nTo specify to `pv vardict`, which input type will be used one of the following sub-commands may be used: \n- `pv vardict single` for single sample vcfs \n- `pv vardict case-control` for case-controlled vcfs. \n\nNext the user can specify, what post-processing should be done. Right now, `postprocessing_variant_calls` supports filtering: \n-  `pv vardict single filter` \n-  `pv vardict case-control filter` \n\nFinally, we can specify the paths and options for our filtering and run our command. Here is an example using the test data provided in this repository: \n\n`pv vardict single filter --inputVcf data/Myeloid200-1.vcf  --tsampleName Myeloid200-1  -ad 1 -o data/single`\n\nThere are various options and input specifications for filtering so see `pv vardict single filter --help` or `pv vardict single case-sontrol --help` for help. \n\nSee `example_calls.sh` for more example calls. \n\n## How the repo was made\n\nTemplate used: https://github.com/yxtay/python-project-template\n\n### Usage\n\n\n#### External dependencies\n\n- [Conda][conda]\n- [Docker][docker]\n- [Make][make]\n\n#### Create environment\n\nUse Conda to create a virtual environment and activate it for the project.\n\n```bash\nconda env create -f environment.yml\nconda activate pv_calls\n```\n\n#### Install dependencies\n\nThen install project dependencies with Poetry.\n\n```bash\nmake deps-install\n```\n\n#### Updating Environment\n\nTo update the environment after initial setup up run: \n\n```bash\nconda env update -f environment.yml\n```\n\ninstead of `conda create`, and then re-run `make deps-install`\n',
    'author': 'Ronak Shah',
    'author_email': 'shahr2@mskcc.org',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://cmo-ci.gitbook.io/postprocessing_variant_calls/',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.7',
}


setup(**setup_kwargs)
