Metadata-Version: 2.1
Name: best-first-search
Version: 0.0.2
Summary: My package description
Author: Han Jaeseung
Author-email: thestudentofkyoto@gmail.com
License: MIT License        
        Copyright (c) 2022 Han Jaeseung        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.        
Keywords: best-first-search,graph-traversal
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Provides-Extra: ci
Requires-Dist: pylint (==2.15.0) ; extra == 'ci'
Requires-Dist: mypy (<1.0) ; extra == 'ci'
Requires-Dist: setuptools-scm ; extra == 'ci'
Requires-Dist: pytest (<7.0.0) ; extra == 'ci'
Requires-Dist: isort (<6.0) ; extra == 'ci'
Requires-Dist: pytest-cov ; extra == 'ci'
Requires-Dist: codecov ; extra == 'ci'
Provides-Extra: example
Requires-Dist: networkx (>=2.8) ; extra == 'example'
Provides-Extra: visualize
Requires-Dist: matplotlib ; extra == 'visualize'

# Best first search, using pre-sorted iterators

![build](https://github.com/studentofkyoto/best-first-search/actions/workflows/push.yml/badge.svg)
[![codecov](https://codecov.io/gh/studentofkyoto/best-first-search/branch/main/graph/badge.svg?token=VCRNMAFGFB)](https://codecov.io/gh/studentofkyoto/best-first-search)

![sample_astar](assets/sample_astar.gif)

It finds the minimum cost path on a graph, where the cost of a path is linear sum of each edge's weight in it. To call the function, the followings are required:

- termination condition
- neighbor iterator; pre sorting the iterator helps the performance so that it iterates through each neighbor in ascending order of cost.
- cost addition function; in case you want to inject relaxation

For usage, take a look at `best_first_search.example`.
