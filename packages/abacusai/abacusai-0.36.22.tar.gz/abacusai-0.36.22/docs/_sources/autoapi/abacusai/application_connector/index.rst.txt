:py:mod:`abacusai.application_connector`
========================================

.. py:module:: abacusai.application_connector


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   abacusai.application_connector.ApplicationConnector




.. py:class:: ApplicationConnector(client, applicationConnectorId=None, service=None, name=None, createdAt=None, status=None, auth=None)

   Bases: :py:obj:`abacusai.return_class.AbstractApiClass`

   A connector to an external service

   :param client: An authenticated API Client instance
   :type client: ApiClient
   :param applicationConnectorId: The unique ID for the connection.
   :type applicationConnectorId: str
   :param service: The service this connection connects to
   :type service: str
   :param name: A user-friendly name for the service
   :type name: str
   :param createdAt: When the API key was created
   :type createdAt: str
   :param status: The status of the Application Connector
   :type status: str
   :param auth: Non-secret connection information for this connector
   :type auth: dict

   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: to_dict()

      Get a dict representation of the parameters in this class

      :returns: The dict value representation of the class parameters
      :rtype: dict


   .. py:method:: create_feature_group_from_git(branch_name, table_name, function_name, module_name, python_root = None, input_feature_groups = None, description = None, cpu_size = None, memory = None, package_requirements = None)

      Creates a new feature group from a ZIP file.

      :param branch_name: Name of the branch in the git repository to be used for training.
      :type branch_name: str
      :param table_name: The unique name to be given to the feature group.
      :type table_name: str
      :param function_name: Name of the function found in the module that will be executed (on the optional inputs) to materialize this feature group.
      :type function_name: str
      :param module_name: Path to the file with the feature group function.
      :type module_name: str
      :param python_root: Path from the top level of the git repository to the directory containing the Python source code. If not provided, the default is the root of the git repository.
      :type python_root: str
      :param input_feature_groups: List of feature groups that are supplied to the function as parameters. Each of the parameters are materialized Dataframes (same type as the functions return value).
      :type input_feature_groups: list
      :param description: The description about the feature group.
      :type description: str
      :param cpu_size: Size of the cpu for the feature group function
      :type cpu_size: str
      :param memory: Memory (in GB) for the feature group function
      :type memory: int
      :param package_requirements: Json with key value pairs corresponding to package: version for each dependency
      :type package_requirements: dict

      :returns: The created feature group
      :rtype: FeatureGroup


   .. py:method:: rename(name)

      Renames an Application Connector

      :param name: A new name for the application connector
      :type name: str


   .. py:method:: delete()

      Delete a application connector.

      :param application_connector_id: The unique identifier for the application connector.
      :type application_connector_id: str


   .. py:method:: list_objects()

      Lists querable objects in the application connector.

      :param application_connector_id: The unique identifier for the application connector.
      :type application_connector_id: str


   .. py:method:: verify()

      Checks to see if Abacus.AI can access the Application.

      :param application_connector_id: The unique identifier for the application connector.
      :type application_connector_id: str



