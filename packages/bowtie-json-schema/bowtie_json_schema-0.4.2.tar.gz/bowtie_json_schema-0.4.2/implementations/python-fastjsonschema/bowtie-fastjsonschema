#!/usr/bin/env python3
from dataclasses import dataclass
import io
import json
import sys

import fastjsonschema


@dataclass
class Runner:

    _started: bool = False
    _stdout: io.TextIOWrapper = sys.stdout

    def run(self, stdin=sys.stdin):
        for line in stdin:
            each = json.loads(line)
            cmd = each.pop("cmd")
            response = getattr(self, f"cmd_{cmd}")(**each)
            self._stdout.write(f"{json.dumps(response)}\n")
            self._stdout.flush()

    def cmd_start(self, version):
        assert version == 1
        self._started = True
        return dict(ready=True, version=1)

    def cmd_run(self, case, seq):
        assert self._started, "Not started!"
        schema = case["schema"]
        validate = fastjsonschema.compile(schema)

        tests = []

        for test in case["tests"]:
            try:
                validate(test["instance"])
            except fastjsonschema.JsonSchemaException:
                tests.append({"valid": False})
            else:
                tests.append({"valid": True})

        return dict(seq=seq, tests=tests)

    def cmd_stop(self):
        assert self._started, "Not started!"
        sys.exit(0)


Runner().run()
