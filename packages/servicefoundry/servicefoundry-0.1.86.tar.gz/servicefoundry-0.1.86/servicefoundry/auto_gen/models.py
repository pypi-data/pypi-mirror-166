# generated by datamodel-codegen:
#   filename:  application.json
#   timestamp: 2022-09-06T12:16:08+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional, Union

from pydantic import BaseModel, Field, conint, constr
from typing_extensions import Literal


class DefaultResources(BaseModel):
    cpu_request: Literal["200m"]
    cpu_limit: Literal["200m"]
    memory_request: Literal["256Mi"]
    memory_limit: Literal["256Mi"]
    gpu_limit: Literal["0"]
    gpu_vendor: Literal["nvidia"]


class DockerFileBuild(BaseModel):
    """
        +label=Docker File (I already have Docker File)
    +icon=fa-brands fa-docker:#0db7ed
    """

    type: constr(regex=r"dockerfile")
    dockerfile_path: str = Field(
        "./Dockerfile",
        description="+label=Path to Dockerfile\n+usage=The file path of the Dockerfile relative to project root path.",
    )
    build_context_path: str = Field(
        "./",
        description="+label=Path to build context\n+usage=Build context path for the Dockerfile relative to project root path.",
    )


class GithubSource(BaseModel):
    """
        +label=Github
    +icon=fa-brands fa-github:black
    """

    type: constr(regex=r"github")
    repo_url: str = Field(
        ..., description="+label=Repo URL\n+usage=The repository URL.\n+sort=1"
    )
    ref: str = Field(
        ...,
        description="+label=Branch/Tag/Commit SHA\n+usage=The commit sha, branch name or the tag.\n+sort=2",
    )


class HttpProbe(BaseModel):
    """
    +label=Instructions for assessing container health by executing an HTTP GET request.
    """

    type: constr(regex=r"http")
    path: str = Field(
        ...,
        description="+usage=The endpoint, relative to the port, to which the HTTP GET request should be directed.",
    )
    port: conint(ge=0, le=65535) = Field(
        ...,
        description="+usage=The TCP socket within the container to which the HTTP GET request should be directed.",
    )
    host: Optional[str] = None
    scheme: str = "HTTP"


class Image(BaseModel):
    """
        +label=Docker Image (Deploy an existing image)
    +icon=fa-brands fa-docker:#0db7ed
    """

    type: constr(regex=r"image")
    docker_registry: Optional[str] = Field(
        None,
        description="+usage=FQN of the container registry. If you can't find your registry here,\nadd it through the [Settings](/settings?tab=registry) page",
    )
    image_uri: str = Field(
        ...,
        description="+label=Image URI\n+usage=The image URI. Specify the name of the image and the tag.\nIf the image is in Dockerhub, you can skip registry-url (for e.g. `tensorflow/tensorflow`).\nYou can use an image from a private registry using Advanced fields\n+placeholder=registry-url/account/image:version (e.g. docker.io/tensorflow/tensorflow)",
    )


class Restart(Enum):
    """
    +usage=
    """

    Never = "Never"
    OnFailure = "OnFailure"
    Always = "Always"


class LocalSource(BaseModel):
    """
        +label=Local
    +icon=fa-folder:black
    """

    type: constr(regex=r"local")
    project_root_path: str = Field("./", description="+usage=Local project root path.")


class Manual(BaseModel):
    """
    +label= Manual - Trigger the job manually
    """

    type: constr(regex=r"manual")
    run: bool = Field(
        True,
        description="+label=Run (Trigger the job on creation)\n+usage=If set to false, the job will be created but will not run.\nIt can be triggered later.",
    )


class NotebookDefaultResources(BaseModel):
    cpu_request: Literal["200m"]
    cpu_limit: Literal["500m"]
    memory_request: Literal["256Mi"]
    memory_limit: Literal["512Mi"]
    gpu_limit: Literal["0"]


class Protocol(Enum):
    """
    +usage=Protocol for the port.
    """

    TCP = "TCP"
    UDP = "UDP"


class Port(BaseModel):
    protocol: Protocol = Field("TCP", description="+usage=Protocol for the port.")
    port: conint(ge=0, le=65535) = Field(
        80, description="+usage=Port number to expose."
    )
    expose: bool = Field(True, description="+usage=Expose the port")


class PythonBuild(BaseModel):
    """
        +label=Python Buildpack (I don't have Dockerfile)
    +icon=fa-brands fa-python:#306998
    """

    type: constr(regex=r"tfy-python-buildpack")
    python_version: constr(regex=r"^\d+(\.\d+){1,2}$") = Field(
        "3.9",
        description="+label=Python version\n+usage=Python version to run your application.",
    )
    build_context_path: str = Field(
        "./",
        description="+label=Path to build context\n+usage=Build path relative to project root path.",
    )
    requirements_path: Optional[str] = Field(
        None,
        description="+label=Path to requirements\n+usage=Path to `requirements.txt` relative to\n`Path to build context`",
    )
    pip_packages: Optional[List[str]] = Field(
        None,
        description="+label=Pip packages to install\n+usage=Define pip package requirements.",
    )
    command: Union[str, List[str]] = Field(
        ...,
        description="+label=Entrypoint override\n+usage=Override the command to run when the container starts.\nCommand will be set as the Entrypoint of the generated\nimage.",
    )


class RemoteSource(BaseModel):
    """
        +label=S3
    +icon=fa-brands fa-aws:black
    """

    type: constr(regex=r"remote")
    remote_uri: str = Field(..., description="+label=Remote URI")


class GpuVendor(Enum):
    """
        +label=GPU Vendor
    +usage=GPU vendor. Defaults to "nvidia"
    +sort=6
    """

    nvidia = "nvidia"
    amd = "amd"


class Resources(BaseModel):
    """
        +icon=fa-microchip
    +label=Resources to allocate.
    """

    cpu_request: str = Field(
        "200m",
        description="+label=CPU Request\n+sort=1\n+usage=Requested CPU which determines the minimum cost incurred. The CPU usage can exceed the requested\namount, but not the value specified in the limit. 1 CPU means 1 CPU core. Fractional CPU can be requested\nlike `0.5` or you can express it in milli units like `50m` which is equal to 0.05 units. You can read\nmore about it [here](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)",
    )
    cpu_limit: str = Field(
        "200m",
        description="+label=CPU Limit\n+usage=CPU limit beyond which the usage cannot be exceeded. 1 CPU means 1 CPU core. Fractional CPU can be requested\nlike `0.5` or you can express it in milli units like `50m` which is equal to 0.05 units. You can read\nmore about it [here](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)\n+sort=2",
    )
    memory_request: str = Field(
        "256Mi",
        description="+label=Memory Request\n+usage=Requested memory which determines the minimum cost incurred. The unit of memory is in bytes. We can specify\nthe plain integer or using a quantity suffix like k, M, G (400k is 400 kilobytes, 1M is 1 Megabyte and\n2G is 2 gigabytes.) You can read\nmore about it [here](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)\n+sort=3",
    )
    memory_limit: str = Field(
        "256Mi",
        description="+label=Memory Limit\n+usage=Memory limit after which the application will be killed with an OOM error. The unit of memory is\nin bytes. We can specify the plain integer or using a quantity suffix like k, M, G\n(400k is 400 kilobytes, 1M is 1 Megabyte and 2G is 2 gigabytes.) You can read\nmore about it [here](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)\n+sort=4",
    )
    gpu_limit: str = Field(
        "0",
        description="+label=GPU Limit\n+usage=GPU limit for the component. It can be a plain integer.\n+sort=5",
    )
    gpu_vendor: GpuVendor = Field(
        "nvidia",
        description='+label=GPU Vendor\n+usage=GPU vendor. Defaults to "nvidia"\n+sort=6',
    )


class ConcurrencyPolicy(Enum):
    """
        +usage=Choose whether to allow this job to run while another instance of the job is running, or to replace the currently running instance. Allow
    will enable multiple instances of this job to run. Forbid will keep the current instance of the job running and stop a new instance from being run.
    Replace will terminate any currently running instance of the job and start a new one.
    """

    Forbid = "Forbid"
    Allow = "Allow"
    Replace = "Replace"


class Schedule(BaseModel):
    """
    +label=Schedule - Run the job on a schedule
    """

    type: constr(regex=r"scheduled")
    schedule: str = Field(
        ...,
        description="+usage=Specify the schedule for this job to be run periodically in cron format.\n```\n* * * * *\n| | | | |\n| | | | |___ day of week (0-6) (Sunday is 0)\n| | | |_____ month (1-12)\n| | |_______ day of month (1-31)\n| |_________ hour (0-23)\n|___________ minute (0-59)\n```",
    )
    concurrency_policy: ConcurrencyPolicy = Field(
        "Forbid",
        description="+usage=Choose whether to allow this job to run while another instance of the job is running, or to replace the currently running instance. Allow\nwill enable multiple instances of this job to run. Forbid will keep the current instance of the job running and stop a new instance from being run.\nReplace will terminate any currently running instance of the job and start a new one.",
    )


class Build(BaseModel):
    """
        +label=Source Code (Build and deploy source code)
    +icon=fa-code
    """

    type: constr(regex=r"build")
    build_source: Union[RemoteSource, GithubSource, LocalSource] = Field(
        ..., description="+label=Fetch source code to build and deploy\n+icon=fa-code"
    )
    build_spec: Union[DockerFileBuild, PythonBuild] = Field(
        ...,
        description="+label=Build using DockerFile or using Buildpack\n+icon=fa-wrench",
    )


class HealthProbe(BaseModel):
    """
    +icon=fa-heart
    """

    config: HttpProbe
    initial_delay_seconds: conint(ge=0) = Field(
        0,
        description="+usage=Number of seconds after the container is started before the first probe is initiated.",
    )
    period_seconds: conint(ge=0) = Field(
        10, description="+usage=How often, in seconds, to execute the probe."
    )
    timeout_seconds: conint(ge=0) = Field(
        1, description="+usage=Number of seconds after which the probe times out."
    )
    success_threshold: conint(ge=0) = Field(
        1,
        description="+usage=Minimum consecutive successes for the probe to be considered successful after having failed.",
    )
    failure_threshold: conint(ge=0) = Field(
        3,
        description="+usage=Number of consecutive failures required to determine the container is not alive (liveness probe) or not ready (readiness probe).",
    )


class Job(BaseModel):
    type: constr(regex=r"job")
    name: constr(regex=r"^[a-z0-9-]{1,15}$") = Field(
        ..., description="+usage=Name of the job\n+sort=1"
    )
    image: Union[Image, Build] = Field(
        ...,
        description="+label=Deploy a Docker image or build and deploy from source code\n+icon=fa-solid fa-cloud-arrow-up:#21B6A8\n+sort=2",
    )
    resources: Union[Resources, DefaultResources] = Field(
        {
            "cpu_request": "200m",
            "cpu_limit": "200m",
            "memory_request": "256Mi",
            "memory_limit": "256Mi",
            "gpu_limit": "0",
            "gpu_vendor": "nvidia",
        },
        description="+sort=3",
    )
    trigger: Union[Manual, Schedule] = Field(
        {"type": "manual", "run": True}, description="+sort=4"
    )
    retries: int = Field(
        1,
        description="+label=Retries\n+usage=Specify the maximum number of attempts to retry a job before it is marked as failed.\n+icon=fa-clone",
    )
    timeout: int = Field(
        1000,
        description="+label=Timeout\n+usage=Job timeout in seconds.\n+icon=fa-clone",
    )
    successful_jobs_history_limit: int = Field(
        100,
        description="+usage=Number of successful invocation of this job to keep in history",
    )
    failed_jobs_history_limit: int = Field(
        100,
        description="+usage=Number of failed invocation of this job to keep in history",
    )
    restart: Restart = Field("Never", description="+usage=")
    command: Optional[Union[str, List[str]]] = Field(
        None,
        description="+label=Commands\n+usage=Commands to execute to start the application. Overrides the `Entrypoint` command.\n+icon=fa-terminal\n+sort=6",
    )
    env: Optional[Dict[str, str]] = Field(
        None,
        description="+label=Environment Variables\n+usage=Configure environment variables to be injected in the service.\n+icon=fa-globe\n+sort=7",
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description="+usage=Specify the labels in the workload"
    )


class Notebook(BaseModel):
    type: constr(regex=r"notebook")
    name: constr(regex=r"^[a-z0-9-]{1,15}$") = Field(
        ..., description="+usage=Name of the notebook"
    )
    resources: Union[Resources, NotebookDefaultResources] = {
        "cpu_request": "200m",
        "cpu_limit": "500m",
        "memory_request": "256Mi",
        "memory_limit": "512Mi",
        "gpu_limit": "0",
    }


class Service(BaseModel):
    type: constr(regex=r"service")
    name: constr(regex=r"^[a-z0-9-]{1,15}$") = Field(
        ...,
        description="+usage=Name of the service. This uniquely identifies this service in the workspace and the service will be overwritten if deployed again with the same name.\n+sort=1",
    )
    image: Union[Image, Build] = Field(
        ...,
        description="+label=Deploy a Docker image or build and deploy from source code\n+icon=fa-solid fa-cloud-arrow-up:#21B6A8\n+sort=2",
    )
    resources: Union[Resources, DefaultResources] = Field(
        {
            "cpu_request": "200m",
            "cpu_limit": "200m",
            "memory_request": "256Mi",
            "memory_limit": "256Mi",
            "gpu_limit": "0",
            "gpu_vendor": "nvidia",
        },
        description="+sort=4",
    )
    replicas: conint(ge=1, lt=5) = Field(
        1,
        description="+label=Replicas\n+usage=Number of service instances/replicas you want to run.\n+icon=fa-clone\n+sort=3",
    )
    command: Optional[Union[str, List[str]]] = Field(
        None,
        description="+label=Commands\n+usage=Commands to execute to start the application. Overrides the `Entrypoint` command.\n+icon=fa-terminal",
    )
    env: Optional[Dict[str, str]] = Field(
        None,
        description="+label=Environment Variables\n+usage=Configure environment variables to be injected in the service.\n+icon=fa-globe\n+sort=6",
    )
    ports: List[Port] = Field(
        ...,
        description="+label=Ports (Ports to route customer traffic to)\n+icon=fa-plug\n+sort=5",
    )
    liveness_probe: Optional[HealthProbe] = None
    readiness_probe: Optional[HealthProbe] = None
    labels: Optional[Dict[str, str]] = Field(
        None, description="+usage=Specify the labels in the workload"
    )


class Application(BaseModel):
    name: constr(regex=r"^[a-z0-9-]{1,15}$") = Field(
        ..., description="+label=Name of the application"
    )
    components: List[Union[Service, Job, Notebook]] = Field(
        ..., description="+label=A list of components"
    )
