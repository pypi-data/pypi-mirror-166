import boto3
import datetime

def main():
    now = datetime.datetime.utcnow()
    start = (now - datetime.timedelta(days=1)).strftime('%Y-%m-%d')
    end = now.strftime('%Y-%m-%d')

    # to use a specific profile e.g. 'dev'
    session = boto3.session.Session(profile_name='hdc-aws')
    cd = session.client('ce', 'us-east-1')
    results = []

    token = None
    while True:
        if token:
            kwargs = {'NextPageToken': token}
        else:
            kwargs = {}
        #data = cd.get_cost_and_usage(TimePeriod={'Start': start, 'End':  end}, Granularity='DAILY', Metrics=['UnblendedCost'], GroupBy=[{'Type': 'DIMENSION', 'Key': 'LINKED_ACCOUNT'}, {'Type': 'DIMENSION', 'Key': 'SERVICE'}], **kwargs)
        data = cd.get_cost_and_usage(TimePeriod={'Start': start, 'End':  end}, Granularity='DAILY', Metrics=['UnblendedCost'], GroupBy=[{'Type': 'DIMENSION', 'Key': 'SERVICE'}], **kwargs)
        results += data['ResultsByTime']
        token = data.get('NextPageToken')
        if not token:
            break

    print('\t'.join(['TimePeriod', 'Service', 'Amount']))
    total = 0
    for result_by_time in results:
        for group in result_by_time['Groups']:
            amount = group['Metrics']['UnblendedCost']['Amount']
            total += float(amount)
            if float(amount) < 1.0:
                continue
            unit = group['Metrics']['UnblendedCost']['Unit']
            print(result_by_time['TimePeriod']['Start'], '\t', '\t'.join(group['Keys']), '\t', amount)
    print(total)

if __name__ == '__main__':
    main()